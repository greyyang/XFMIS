<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IBatisNet.DataMapper.1.5.1.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer">
            <summary>IBatisNet.DataMapper.Commands.DataReaderTransformer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.#ctor(IBatisNet.DataMapper.Commands.DataReaderTransformer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.Constructor">
            <summary>设置 DataReaderTransformer.DataReaderTransformer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.TransformIDataReaderIDbProvider">
            <summary>设置 DataReaderTransformer.Transform(IDataReader reader, IDbProvider dbProvider) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.ShimDataReaderTransformer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader">
            <summary>IBatisNet.DataMapper.Commands.InMemoryDataReader 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.#ctor(IBatisNet.DataMapper.Commands.InMemoryDataReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.Bind(System.Data.IDataReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.Bind(System.Data.IDataRecord)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.Close">
            <summary>设置 InMemoryDataReader.Close() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.ConstructorIDataReader">
            <summary>设置 InMemoryDataReader.InMemoryDataReader(IDataReader reader) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.DepthGet">
            <summary>设置 InMemoryDataReader.get_Depth() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.Dispose">
            <summary>设置 InMemoryDataReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.FieldCountGet">
            <summary>设置 InMemoryDataReader.get_FieldCount() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetBooleanInt32">
            <summary>设置 InMemoryDataReader.GetBoolean(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetByteInt32">
            <summary>设置 InMemoryDataReader.GetByte(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetBytesInt32Int64ByteArrayInt32Int32">
            <summary>设置 InMemoryDataReader.GetBytes(Int32 fieldIndex, Int64 dataIndex, Byte[] buffer, Int32 bufferIndex, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetCharInt32">
            <summary>设置 InMemoryDataReader.GetChar(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetCharsInt32Int64CharArrayInt32Int32">
            <summary>设置 InMemoryDataReader.GetChars(Int32 fieldIndex, Int64 dataIndex, Char[] buffer, Int32 bufferIndex, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetDataInt32">
            <summary>设置 InMemoryDataReader.GetData(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetDataTypeNameInt32">
            <summary>设置 InMemoryDataReader.GetDataTypeName(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetDateTimeInt32">
            <summary>设置 InMemoryDataReader.GetDateTime(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetDecimalInt32">
            <summary>设置 InMemoryDataReader.GetDecimal(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetDoubleInt32">
            <summary>设置 InMemoryDataReader.GetDouble(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetFieldTypeInt32">
            <summary>设置 InMemoryDataReader.GetFieldType(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetFloatInt32">
            <summary>设置 InMemoryDataReader.GetFloat(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetGuidInt32">
            <summary>设置 InMemoryDataReader.GetGuid(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetInt16Int32">
            <summary>设置 InMemoryDataReader.GetInt16(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetInt32Int32">
            <summary>设置 InMemoryDataReader.GetInt32(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetInt64Int32">
            <summary>设置 InMemoryDataReader.GetInt64(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetNameInt32">
            <summary>设置 InMemoryDataReader.GetName(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetOrdinalString">
            <summary>设置 InMemoryDataReader.GetOrdinal(String colName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetSchemaTable">
            <summary>设置 InMemoryDataReader.GetSchemaTable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetStringInt32">
            <summary>设置 InMemoryDataReader.GetString(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetValueInt32">
            <summary>设置 InMemoryDataReader.GetValue(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.GetValuesObjectArray">
            <summary>设置 InMemoryDataReader.GetValues(Object[] values) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.IsClosedGet">
            <summary>设置 InMemoryDataReader.get_IsClosed() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.IsDBNullInt32">
            <summary>设置 InMemoryDataReader.IsDBNull(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.ItemGetInt32">
            <summary>设置 InMemoryDataReader.get_Item(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.ItemGetString">
            <summary>设置 InMemoryDataReader.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.NextResult">
            <summary>设置 InMemoryDataReader.NextResult() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.Read">
            <summary>设置 InMemoryDataReader.Read() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.RecordsAffectedGet">
            <summary>设置 InMemoryDataReader.get_RecordsAffected() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.Close">
            <summary>设置 InMemoryDataReader.Close() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.DepthGet">
            <summary>设置 InMemoryDataReader.get_Depth() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.Dispose">
            <summary>设置 InMemoryDataReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.FieldCountGet">
            <summary>设置 InMemoryDataReader.get_FieldCount() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetBooleanInt32">
            <summary>设置 InMemoryDataReader.GetBoolean(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetByteInt32">
            <summary>设置 InMemoryDataReader.GetByte(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetBytesInt32Int64ByteArrayInt32Int32">
            <summary>设置 InMemoryDataReader.GetBytes(Int32 fieldIndex, Int64 dataIndex, Byte[] buffer, Int32 bufferIndex, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetCharInt32">
            <summary>设置 InMemoryDataReader.GetChar(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetCharsInt32Int64CharArrayInt32Int32">
            <summary>设置 InMemoryDataReader.GetChars(Int32 fieldIndex, Int64 dataIndex, Char[] buffer, Int32 bufferIndex, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetDataInt32">
            <summary>设置 InMemoryDataReader.GetData(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetDataTypeNameInt32">
            <summary>设置 InMemoryDataReader.GetDataTypeName(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetDateTimeInt32">
            <summary>设置 InMemoryDataReader.GetDateTime(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetDecimalInt32">
            <summary>设置 InMemoryDataReader.GetDecimal(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetDoubleInt32">
            <summary>设置 InMemoryDataReader.GetDouble(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetFieldTypeInt32">
            <summary>设置 InMemoryDataReader.GetFieldType(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetFloatInt32">
            <summary>设置 InMemoryDataReader.GetFloat(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetGuidInt32">
            <summary>设置 InMemoryDataReader.GetGuid(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetInt16Int32">
            <summary>设置 InMemoryDataReader.GetInt16(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetInt32Int32">
            <summary>设置 InMemoryDataReader.GetInt32(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetInt64Int32">
            <summary>设置 InMemoryDataReader.GetInt64(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetNameInt32">
            <summary>设置 InMemoryDataReader.GetName(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetOrdinalString">
            <summary>设置 InMemoryDataReader.GetOrdinal(String colName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetSchemaTable">
            <summary>设置 InMemoryDataReader.GetSchemaTable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetStringInt32">
            <summary>设置 InMemoryDataReader.GetString(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetValueInt32">
            <summary>设置 InMemoryDataReader.GetValue(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.GetValuesObjectArray">
            <summary>设置 InMemoryDataReader.GetValues(Object[] values) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.IsClosedGet">
            <summary>设置 InMemoryDataReader.get_IsClosed() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.IsDBNullInt32">
            <summary>设置 InMemoryDataReader.IsDBNull(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.ItemGetInt32">
            <summary>设置 InMemoryDataReader.get_Item(Int32 fieldIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.ItemGetString">
            <summary>设置 InMemoryDataReader.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.NextResult">
            <summary>设置 InMemoryDataReader.NextResult() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.Read">
            <summary>设置 InMemoryDataReader.Read() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimInMemoryDataReader.AllInstances.RecordsAffectedGet">
            <summary>设置 InMemoryDataReader.get_RecordsAffected() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy">
            <summary>IBatisNet.DataMapper.Commands.PreparedCommandProxy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.#ctor(IBatisNet.DataMapper.Commands.PreparedCommandProxy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.Bind(Castle.DynamicProxy.IInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.ConstructorIPreparedCommand">
            <summary>设置 PreparedCommandProxy.PreparedCommandProxy(IPreparedCommand preparedCommand) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.InterceptIInvocationObjectArray">
            <summary>设置 PreparedCommandProxy.Intercept(IInvocation invocation, Object[] arguments) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.NewInstanceIPreparedCommand">
            <summary>设置 PreparedCommandProxy.NewInstance(IPreparedCommand preparedCommand) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.StaticConstructor">
            <summary>设置 PreparedCommandProxy.PreparedCommandProxy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.ShimPreparedCommandProxy.AllInstances.InterceptIInvocationObjectArray">
            <summary>设置 PreparedCommandProxy.Intercept(IInvocation invocation, Object[] arguments) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.StubDataReaderTransformer">
            <summary>IBatisNet.DataMapper.Commands.DataReaderTransformer 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.StubDataReaderTransformer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.StubDataReaderTransformer.InitializeStub">
            <summary>初始化 type StubDataReaderTransformer 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.StubDataReaderTransformer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.StubDataReaderTransformer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.StubDataReaderTransformer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.StubIPreparedCommand">
            <summary>IBatisNet.DataMapper.Commands.IPreparedCommand 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.StubIPreparedCommand.#ctor">
            <summary>初始化 type StubIPreparedCommand 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Commands.Fakes.StubIPreparedCommand.CreateRequestScopeIDalSessionIStatementObject">
            <summary>设置 IPreparedCommand.Create(RequestScope request, IDalSession session, IStatement statement, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.StubIPreparedCommand.ibndm::IBatisNet#DataMapper#Commands#IPreparedCommand#Create(IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.Common.IDalSession,IBatisNet.DataMapper.Configuration.Statements.IStatement,System.Object)">
            <summary>设置 IPreparedCommand.Create(RequestScope request, IDalSession session, IStatement statement, Object parameterObject) 的 存根</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Commands.Fakes.StubInMemoryDataReader">
            <summary>IBatisNet.DataMapper.Commands.InMemoryDataReader 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.StubInMemoryDataReader.#ctor(System.Data.IDataReader)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Commands.Fakes.StubInMemoryDataReader.InitializeStub">
            <summary>初始化 type StubInMemoryDataReader 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.StubInMemoryDataReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.StubInMemoryDataReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Commands.Fakes.StubInMemoryDataReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias">
            <summary>IBatisNet.DataMapper.Configuration.Alias.TypeAlias 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.#ctor(IBatisNet.DataMapper.Configuration.Alias.TypeAlias)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.ClassGet">
            <summary>设置 TypeAlias.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.ClassNameGet">
            <summary>设置 TypeAlias.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.ClassNameSetString">
            <summary>设置 TypeAlias.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.Constructor">
            <summary>设置 TypeAlias.TypeAlias() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.ConstructorType">
            <summary>设置 TypeAlias.TypeAlias(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.Initialize">
            <summary>设置 TypeAlias.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.NameGet">
            <summary>设置 TypeAlias.get_Name() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.NameSetString">
            <summary>设置 TypeAlias.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.AllInstances.ClassGet">
            <summary>设置 TypeAlias.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.AllInstances.ClassNameGet">
            <summary>设置 TypeAlias.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.AllInstances.ClassNameSetString">
            <summary>设置 TypeAlias.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.AllInstances.Initialize">
            <summary>设置 TypeAlias.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.AllInstances.NameGet">
            <summary>设置 TypeAlias.get_Name() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeAlias.AllInstances.NameSetString">
            <summary>设置 TypeAlias.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler">
            <summary>IBatisNet.DataMapper.Configuration.Alias.TypeHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.#ctor(IBatisNet.DataMapper.Configuration.Alias.TypeHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.CallBackNameGet">
            <summary>设置 TypeHandler.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.CallBackNameSetString">
            <summary>设置 TypeHandler.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.ClassGet">
            <summary>设置 TypeHandler.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.ClassNameGet">
            <summary>设置 TypeHandler.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.ClassNameSetString">
            <summary>设置 TypeHandler.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.Constructor">
            <summary>设置 TypeHandler.TypeHandler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.DbTypeGet">
            <summary>设置 TypeHandler.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.DbTypeSetString">
            <summary>设置 TypeHandler.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.Initialize">
            <summary>设置 TypeHandler.Initialize() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.CallBackNameGet">
            <summary>设置 TypeHandler.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.CallBackNameSetString">
            <summary>设置 TypeHandler.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.ClassGet">
            <summary>设置 TypeHandler.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.ClassNameGet">
            <summary>设置 TypeHandler.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.ClassNameSetString">
            <summary>设置 TypeHandler.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.DbTypeGet">
            <summary>设置 TypeHandler.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.DbTypeSetString">
            <summary>设置 TypeHandler.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.ShimTypeHandler.AllInstances.Initialize">
            <summary>设置 TypeHandler.Initialize() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeAlias">
            <summary>IBatisNet.DataMapper.Configuration.Alias.TypeAlias 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeAlias.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeAlias.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeAlias.InitializeStub">
            <summary>初始化 type StubTypeAlias 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeAlias.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeAlias.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeAlias.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeHandler">
            <summary>IBatisNet.DataMapper.Configuration.Alias.TypeHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeHandler.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeHandler.InitializeStub">
            <summary>初始化 type StubTypeHandler 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Alias.Fakes.StubTypeHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey">
            <summary>IBatisNet.DataMapper.Configuration.Cache.CacheKey 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.#ctor(IBatisNet.DataMapper.Configuration.Cache.CacheKey)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.Constructor">
            <summary>设置 CacheKey.CacheKey() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.ConstructorInt32">
            <summary>设置 CacheKey.CacheKey(Int32 initialNonZeroOddNumber) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.ConstructorInt32Int32">
            <summary>设置 CacheKey.CacheKey(Int32 initialNonZeroOddNumber, Int32 multiplierNonZeroOddNumber) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.EqualsObject">
            <summary>设置 CacheKey.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.GetHashCode">
            <summary>设置 CacheKey.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.ToString">
            <summary>设置 CacheKey.ToString() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.UpdateObject">
            <summary>设置 CacheKey.Update(Object obj) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.AllInstances.EqualsObject">
            <summary>设置 CacheKey.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.AllInstances.GetHashCode01">
            <summary>设置 CacheKey.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.AllInstances.ToString01">
            <summary>设置 CacheKey.ToString() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheKey.AllInstances.UpdateObject">
            <summary>设置 CacheKey.Update(Object obj) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel">
            <summary>IBatisNet.DataMapper.Configuration.Cache.CacheModel 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.#ctor(IBatisNet.DataMapper.Configuration.Cache.CacheModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AddPropertyStringString">
            <summary>设置 CacheModel.AddProperty(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.CacheControllerSetICacheController">
            <summary>设置 CacheModel.set_CacheController(ICacheController value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.Constructor">
            <summary>设置 CacheModel.CacheModel() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.Flush">
            <summary>设置 CacheModel.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.FlushHandlerObjectExecuteEventArgs">
            <summary>设置 CacheModel.FlushHandler(Object sender, ExecuteEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.FlushIntervalGet">
            <summary>设置 CacheModel.get_FlushInterval() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.FlushIntervalSetFlushInterval">
            <summary>设置 CacheModel.set_FlushInterval(FlushInterval value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.GetLockCacheKey">
            <summary>设置 CacheModel.GetLock(CacheKey key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.HitRatioGet">
            <summary>设置 CacheModel.get_HitRatio() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.IdGet">
            <summary>设置 CacheModel.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.IdSetString">
            <summary>设置 CacheModel.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.ImplementationGet">
            <summary>设置 CacheModel.get_Implementation() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.ImplementationSetString">
            <summary>设置 CacheModel.set_Implementation(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.Initialize">
            <summary>设置 CacheModel.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.IsReadOnlyGet">
            <summary>设置 CacheModel.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.IsReadOnlySetBoolean">
            <summary>设置 CacheModel.set_IsReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.IsSerializableGet">
            <summary>设置 CacheModel.get_IsSerializable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.IsSerializableSetBoolean">
            <summary>设置 CacheModel.set_IsSerializable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.ItemGetCacheKey">
            <summary>设置 CacheModel.get_Item(CacheKey key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.ItemSetCacheKeyObject">
            <summary>设置 CacheModel.set_Item(CacheKey key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.RegisterTriggerStatementIMappedStatement">
            <summary>设置 CacheModel.RegisterTriggerStatement(IMappedStatement mappedStatement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.StaticConstructor">
            <summary>设置 CacheModel.CacheModel() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.AddPropertyStringString">
            <summary>设置 CacheModel.AddProperty(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.CacheControllerSetICacheController">
            <summary>设置 CacheModel.set_CacheController(ICacheController value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.Flush">
            <summary>设置 CacheModel.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.FlushHandlerObjectExecuteEventArgs">
            <summary>设置 CacheModel.FlushHandler(Object sender, ExecuteEventArgs e) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.FlushIntervalGet">
            <summary>设置 CacheModel.get_FlushInterval() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.FlushIntervalSetFlushInterval">
            <summary>设置 CacheModel.set_FlushInterval(FlushInterval value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.GetLockCacheKey">
            <summary>设置 CacheModel.GetLock(CacheKey key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.HitRatioGet">
            <summary>设置 CacheModel.get_HitRatio() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.IdGet">
            <summary>设置 CacheModel.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.IdSetString">
            <summary>设置 CacheModel.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.ImplementationGet">
            <summary>设置 CacheModel.get_Implementation() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.ImplementationSetString">
            <summary>设置 CacheModel.set_Implementation(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.Initialize">
            <summary>设置 CacheModel.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.IsReadOnlyGet">
            <summary>设置 CacheModel.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.IsReadOnlySetBoolean">
            <summary>设置 CacheModel.set_IsReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.IsSerializableGet">
            <summary>设置 CacheModel.get_IsSerializable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.IsSerializableSetBoolean">
            <summary>设置 CacheModel.set_IsSerializable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.ItemGetCacheKey">
            <summary>设置 CacheModel.get_Item(CacheKey key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.ItemSetCacheKeyObject">
            <summary>设置 CacheModel.set_Item(CacheKey key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimCacheModel.AllInstances.RegisterTriggerStatementIMappedStatement">
            <summary>设置 CacheModel.RegisterTriggerStatement(IMappedStatement mappedStatement) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval">
            <summary>IBatisNet.DataMapper.Configuration.Cache.FlushInterval 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.#ctor(IBatisNet.DataMapper.Configuration.Cache.FlushInterval)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.Constructor">
            <summary>设置 FlushInterval.FlushInterval() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.HoursGet">
            <summary>设置 FlushInterval.get_Hours() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.HoursSetInt32">
            <summary>设置 FlushInterval.set_Hours(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.Initialize">
            <summary>设置 FlushInterval.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.IntervalGet">
            <summary>设置 FlushInterval.get_Interval() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.MillisecondsGet">
            <summary>设置 FlushInterval.get_Milliseconds() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.MillisecondsSetInt32">
            <summary>设置 FlushInterval.set_Milliseconds(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.MinutesGet">
            <summary>设置 FlushInterval.get_Minutes() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.MinutesSetInt32">
            <summary>设置 FlushInterval.set_Minutes(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.SecondsGet">
            <summary>设置 FlushInterval.get_Seconds() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.SecondsSetInt32">
            <summary>设置 FlushInterval.set_Seconds(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.HoursGet">
            <summary>设置 FlushInterval.get_Hours() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.HoursSetInt32">
            <summary>设置 FlushInterval.set_Hours(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.Initialize">
            <summary>设置 FlushInterval.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.IntervalGet">
            <summary>设置 FlushInterval.get_Interval() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.MillisecondsGet">
            <summary>设置 FlushInterval.get_Milliseconds() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.MillisecondsSetInt32">
            <summary>设置 FlushInterval.set_Milliseconds(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.MinutesGet">
            <summary>设置 FlushInterval.get_Minutes() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.MinutesSetInt32">
            <summary>设置 FlushInterval.set_Minutes(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.SecondsGet">
            <summary>设置 FlushInterval.get_Seconds() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.ShimFlushInterval.AllInstances.SecondsSetInt32">
            <summary>设置 FlushInterval.set_Seconds(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey">
            <summary>IBatisNet.DataMapper.Configuration.Cache.CacheKey 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.Equals(System.Object)">
            <summary>设置 CacheKey.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.EqualsObject">
            <summary>设置 CacheKey.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.GetHashCode">
            <summary>设置 CacheKey.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.GetHashCode01">
            <summary>设置 CacheKey.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.InitializeStub">
            <summary>初始化 type StubCacheKey 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.ToString">
            <summary>设置 CacheKey.ToString() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.ToString01">
            <summary>设置 CacheKey.ToString() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheKey.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheModel">
            <summary>IBatisNet.DataMapper.Configuration.Cache.CacheModel 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheModel.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheModel.InitializeStub">
            <summary>初始化 type StubCacheModel 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubCacheModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubFlushInterval">
            <summary>IBatisNet.DataMapper.Configuration.Cache.FlushInterval 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubFlushInterval.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubFlushInterval.InitializeStub">
            <summary>初始化 type StubFlushInterval 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubFlushInterval.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubFlushInterval.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubFlushInterval.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController">
            <summary>IBatisNet.DataMapper.Configuration.Cache.ICacheController 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.#ctor">
            <summary>初始化 type StubICacheController 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.ConfigureIDictionary">
            <summary>设置 ICacheController.Configure(IDictionary properties) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.Flush">
            <summary>设置 ICacheController.Flush() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.ibndm::IBatisNet#DataMapper#Configuration#Cache#ICacheController#Configure(System.Collections.IDictionary)">
            <summary>设置 ICacheController.Configure(IDictionary properties) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.ibndm::IBatisNet#DataMapper#Configuration#Cache#ICacheController#Flush">
            <summary>设置 ICacheController.Flush() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.ibndm::IBatisNet#DataMapper#Configuration#Cache#ICacheController#Remove(System.Object)">
            <summary>设置 ICacheController.Remove(Object key) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.ItemGetObject">
            <summary>设置 ICacheController.get_Item(Object key) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.ItemSetObjectObject">
            <summary>设置 ICacheController.set_Item(Object key, Object value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.RemoveObject">
            <summary>设置 ICacheController.Remove(Object key) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fakes.StubICacheController.IBatisNet#DataMapper#Configuration#Cache#ICacheController#Item(System.Object)">
            <summary>设置 ICacheController.get_Item(Object key) 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController">
            <summary>IBatisNet.DataMapper.Configuration.Cache.Fifo.FifoCacheController 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.#ctor(IBatisNet.DataMapper.Configuration.Cache.Fifo.FifoCacheController)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.Bind(IBatisNet.DataMapper.Configuration.Cache.ICacheController)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.ConfigureIDictionary">
            <summary>设置 FifoCacheController.Configure(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.Constructor">
            <summary>设置 FifoCacheController.FifoCacheController() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.Flush">
            <summary>设置 FifoCacheController.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.ItemGetObject">
            <summary>设置 FifoCacheController.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.ItemSetObjectObject">
            <summary>设置 FifoCacheController.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.RemoveObject">
            <summary>设置 FifoCacheController.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.AllInstances.ConfigureIDictionary">
            <summary>设置 FifoCacheController.Configure(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.AllInstances.Flush">
            <summary>设置 FifoCacheController.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.AllInstances.ItemGetObject">
            <summary>设置 FifoCacheController.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.AllInstances.ItemSetObjectObject">
            <summary>设置 FifoCacheController.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.ShimFifoCacheController.AllInstances.RemoveObject">
            <summary>设置 FifoCacheController.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.StubFifoCacheController">
            <summary>IBatisNet.DataMapper.Configuration.Cache.Fifo.FifoCacheController 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.StubFifoCacheController.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.StubFifoCacheController.InitializeStub">
            <summary>初始化 type StubFifoCacheController 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.StubFifoCacheController.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.StubFifoCacheController.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Fifo.Fakes.StubFifoCacheController.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController">
            <summary>IBatisNet.DataMapper.Configuration.Cache.Lru.LruCacheController 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.#ctor(IBatisNet.DataMapper.Configuration.Cache.Lru.LruCacheController)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.Bind(IBatisNet.DataMapper.Configuration.Cache.ICacheController)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.ConfigureIDictionary">
            <summary>设置 LruCacheController.Configure(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.Constructor">
            <summary>设置 LruCacheController.LruCacheController() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.Flush">
            <summary>设置 LruCacheController.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.ItemGetObject">
            <summary>设置 LruCacheController.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.ItemSetObjectObject">
            <summary>设置 LruCacheController.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.RemoveObject">
            <summary>设置 LruCacheController.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.AllInstances.ConfigureIDictionary">
            <summary>设置 LruCacheController.Configure(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.AllInstances.Flush">
            <summary>设置 LruCacheController.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.AllInstances.ItemGetObject">
            <summary>设置 LruCacheController.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.AllInstances.ItemSetObjectObject">
            <summary>设置 LruCacheController.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.ShimLruCacheController.AllInstances.RemoveObject">
            <summary>设置 LruCacheController.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.StubLruCacheController">
            <summary>IBatisNet.DataMapper.Configuration.Cache.Lru.LruCacheController 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.StubLruCacheController.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.StubLruCacheController.InitializeStub">
            <summary>初始化 type StubLruCacheController 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.StubLruCacheController.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.StubLruCacheController.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Lru.Fakes.StubLruCacheController.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler">
            <summary>IBatisNet.DataMapper.Configuration.Cache.Memory.MemoryCacheControler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.#ctor(IBatisNet.DataMapper.Configuration.Cache.Memory.MemoryCacheControler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.Bind(IBatisNet.DataMapper.Configuration.Cache.ICacheController)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.ConfigureIDictionary">
            <summary>设置 MemoryCacheControler.Configure(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.Constructor">
            <summary>设置 MemoryCacheControler.MemoryCacheControler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.Flush">
            <summary>设置 MemoryCacheControler.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.ItemGetObject">
            <summary>设置 MemoryCacheControler.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.ItemSetObjectObject">
            <summary>设置 MemoryCacheControler.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.RemoveObject">
            <summary>设置 MemoryCacheControler.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.AllInstances.ConfigureIDictionary">
            <summary>设置 MemoryCacheControler.Configure(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.AllInstances.Flush">
            <summary>设置 MemoryCacheControler.Flush() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.AllInstances.ItemGetObject">
            <summary>设置 MemoryCacheControler.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.AllInstances.ItemSetObjectObject">
            <summary>设置 MemoryCacheControler.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheControler.AllInstances.RemoveObject">
            <summary>设置 MemoryCacheControler.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel">
            <summary>IBatisNet.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.#ctor(IBatisNet.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.ConstructorString">
            <summary>设置 MemoryCacheLevel.MemoryCacheLevel(String type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.GetByRefenceTypeString">
            <summary>设置 MemoryCacheLevel.GetByRefenceType(String referenceType) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.ReferenceTypeGet">
            <summary>设置 MemoryCacheLevel.get_ReferenceType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.StaticConstructor">
            <summary>设置 MemoryCacheLevel.MemoryCacheLevel() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.ShimMemoryCacheLevel.AllInstances.ReferenceTypeGet">
            <summary>设置 MemoryCacheLevel.get_ReferenceType() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.StubMemoryCacheControler">
            <summary>IBatisNet.DataMapper.Configuration.Cache.Memory.MemoryCacheControler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.StubMemoryCacheControler.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.StubMemoryCacheControler.InitializeStub">
            <summary>初始化 type StubMemoryCacheControler 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.StubMemoryCacheControler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.StubMemoryCacheControler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Cache.Memory.Fakes.StubMemoryCacheControler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder">
            <summary>IBatisNet.DataMapper.Configuration.DomSqlMapBuilder 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.#ctor(IBatisNet.DataMapper.Configuration.DomSqlMapBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ApplyDataMapperNamespacePrefixString">
            <summary>设置 DomSqlMapBuilder.ApplyDataMapperNamespacePrefix(String elementName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ApplyInlineParemeterMapIStatementString">
            <summary>设置 DomSqlMapBuilder.ApplyInlineParemeterMap(IStatement statement, String sqlStatement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ApplyMappingNamespacePrefixString">
            <summary>设置 DomSqlMapBuilder.ApplyMappingNamespacePrefix(String elementName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ApplyNamespaceString">
            <summary>设置 DomSqlMapBuilder.ApplyNamespace(String id) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ApplyProviderNamespacePrefixString">
            <summary>设置 DomSqlMapBuilder.ApplyProviderNamespacePrefix(String elementName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.BuildParameterMap">
            <summary>设置 DomSqlMapBuilder.BuildParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.BuildResultMap">
            <summary>设置 DomSqlMapBuilder.BuildResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.BuildXmlDocumentBoolean">
            <summary>设置 DomSqlMapBuilder.Build(XmlDocument document, Boolean useConfigFileWatcher) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.BuildXmlDocumentDataSourceBooleanBoolean">
            <summary>设置 DomSqlMapBuilder.Build(XmlDocument document, DataSource dataSource, Boolean useConfigFileWatcher, Boolean isCallFromDao) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.BuildXmlDocumentDataSourceBooleanNameValueCollection">
            <summary>设置 DomSqlMapBuilder.Build(XmlDocument document, DataSource dataSource, Boolean useConfigFileWatcher, NameValueCollection properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.Configure">
            <summary>设置 DomSqlMapBuilder.Configure() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureAndWatchConfigureHandler">
            <summary>设置 DomSqlMapBuilder.ConfigureAndWatch(ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureAndWatchFileInfoConfigureHandler">
            <summary>设置 DomSqlMapBuilder.ConfigureAndWatch(FileInfo resource, ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureAndWatchStringConfigureHandler">
            <summary>设置 DomSqlMapBuilder.ConfigureAndWatch(String resource, ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureFileInfo">
            <summary>设置 DomSqlMapBuilder.Configure(FileInfo resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureSqlMap">
            <summary>设置 DomSqlMapBuilder.ConfigureSqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureStream">
            <summary>设置 DomSqlMapBuilder.Configure(Stream resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureString">
            <summary>设置 DomSqlMapBuilder.Configure(String resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureUri">
            <summary>设置 DomSqlMapBuilder.Configure(Uri resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConfigureXmlDocument">
            <summary>设置 DomSqlMapBuilder.Configure(XmlDocument document) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.Constructor">
            <summary>设置 DomSqlMapBuilder.DomSqlMapBuilder() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ConstructorBoolean">
            <summary>设置 DomSqlMapBuilder.DomSqlMapBuilder(Boolean validateSqlMapConfig) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.GenerateCommandTextConfigurationScopeIStatement">
            <summary>设置 DomSqlMapBuilder.GenerateCommandText(ConfigurationScope configScope, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.GetAccessorFactorySetIGetAccessorFactory">
            <summary>设置 DomSqlMapBuilder.set_GetAccessorFactory(IGetAccessorFactory value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.GetProviders">
            <summary>设置 DomSqlMapBuilder.GetProviders() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.GetStreamString">
            <summary>设置 DomSqlMapBuilder.GetStream(String schemaResourceKey) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.Initialize">
            <summary>设置 DomSqlMapBuilder.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ObjectFactorySetIObjectFactory">
            <summary>设置 DomSqlMapBuilder.set_ObjectFactory(IObjectFactory value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.OnConfigFileChangeObject">
            <summary>设置 DomSqlMapBuilder.OnConfigFileChange(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ParseDynamicTagsXmlNodeIDynamicParentStringBuilderBooleanBooleanIStatement">
            <summary>设置 DomSqlMapBuilder.ParseDynamicTags(XmlNode commandTextNode, IDynamicParent dynamic, StringBuilder sqlBuffer, Boolean isDynamic, Boolean postParseRequired, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ParseGlobalProperties">
            <summary>设置 DomSqlMapBuilder.ParseGlobalProperties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ParseProvider">
            <summary>设置 DomSqlMapBuilder.ParseProvider() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ProcessSqlStatementIStatement">
            <summary>设置 DomSqlMapBuilder.ProcessSqlStatement(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.PropertiesSetNameValueCollection">
            <summary>设置 DomSqlMapBuilder.set_Properties(NameValueCollection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.Reset">
            <summary>设置 DomSqlMapBuilder.Reset() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.SetAccessorFactorySetISetAccessorFactory">
            <summary>设置 DomSqlMapBuilder.set_SetAccessorFactory(ISetAccessorFactory value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.StaticConstructor">
            <summary>设置 DomSqlMapBuilder.DomSqlMapBuilder() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ValidateSchemaXmlNodeString">
            <summary>设置 DomSqlMapBuilder.ValidateSchema(XmlNode section, String schemaFileName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ValidateSqlMapConfigSetBoolean">
            <summary>设置 DomSqlMapBuilder.set_ValidateSqlMapConfig(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.ValidationCallBackObjectValidationEventArgs">
            <summary>设置 DomSqlMapBuilder.ValidationCallBack(Object sender, ValidationEventArgs args) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ApplyDataMapperNamespacePrefixString">
            <summary>设置 DomSqlMapBuilder.ApplyDataMapperNamespacePrefix(String elementName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ApplyInlineParemeterMapIStatementString">
            <summary>设置 DomSqlMapBuilder.ApplyInlineParemeterMap(IStatement statement, String sqlStatement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ApplyNamespaceString">
            <summary>设置 DomSqlMapBuilder.ApplyNamespace(String id) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ApplyProviderNamespacePrefixString">
            <summary>设置 DomSqlMapBuilder.ApplyProviderNamespacePrefix(String elementName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.BuildParameterMap">
            <summary>设置 DomSqlMapBuilder.BuildParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.BuildResultMap">
            <summary>设置 DomSqlMapBuilder.BuildResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.BuildXmlDocumentBoolean">
            <summary>设置 DomSqlMapBuilder.Build(XmlDocument document, Boolean useConfigFileWatcher) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.BuildXmlDocumentDataSourceBooleanBoolean">
            <summary>设置 DomSqlMapBuilder.Build(XmlDocument document, DataSource dataSource, Boolean useConfigFileWatcher, Boolean isCallFromDao) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.BuildXmlDocumentDataSourceBooleanNameValueCollection">
            <summary>设置 DomSqlMapBuilder.Build(XmlDocument document, DataSource dataSource, Boolean useConfigFileWatcher, NameValueCollection properties) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.Configure">
            <summary>设置 DomSqlMapBuilder.Configure() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureAndWatchConfigureHandler">
            <summary>设置 DomSqlMapBuilder.ConfigureAndWatch(ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureAndWatchFileInfoConfigureHandler">
            <summary>设置 DomSqlMapBuilder.ConfigureAndWatch(FileInfo resource, ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureAndWatchStringConfigureHandler">
            <summary>设置 DomSqlMapBuilder.ConfigureAndWatch(String resource, ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureFileInfo">
            <summary>设置 DomSqlMapBuilder.Configure(FileInfo resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureSqlMap">
            <summary>设置 DomSqlMapBuilder.ConfigureSqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureStream">
            <summary>设置 DomSqlMapBuilder.Configure(Stream resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureString">
            <summary>设置 DomSqlMapBuilder.Configure(String resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureUri">
            <summary>设置 DomSqlMapBuilder.Configure(Uri resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ConfigureXmlDocument">
            <summary>设置 DomSqlMapBuilder.Configure(XmlDocument document) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.GenerateCommandTextConfigurationScopeIStatement">
            <summary>设置 DomSqlMapBuilder.GenerateCommandText(ConfigurationScope configScope, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.GetAccessorFactorySetIGetAccessorFactory">
            <summary>设置 DomSqlMapBuilder.set_GetAccessorFactory(IGetAccessorFactory value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.GetProviders">
            <summary>设置 DomSqlMapBuilder.GetProviders() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.GetStreamString">
            <summary>设置 DomSqlMapBuilder.GetStream(String schemaResourceKey) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.Initialize">
            <summary>设置 DomSqlMapBuilder.Initialize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ObjectFactorySetIObjectFactory">
            <summary>设置 DomSqlMapBuilder.set_ObjectFactory(IObjectFactory value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ParseDynamicTagsXmlNodeIDynamicParentStringBuilderBooleanBooleanIStatement">
            <summary>设置 DomSqlMapBuilder.ParseDynamicTags(XmlNode commandTextNode, IDynamicParent dynamic, StringBuilder sqlBuffer, Boolean isDynamic, Boolean postParseRequired, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ParseGlobalProperties">
            <summary>设置 DomSqlMapBuilder.ParseGlobalProperties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ParseProvider">
            <summary>设置 DomSqlMapBuilder.ParseProvider() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ProcessSqlStatementIStatement">
            <summary>设置 DomSqlMapBuilder.ProcessSqlStatement(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.PropertiesSetNameValueCollection">
            <summary>设置 DomSqlMapBuilder.set_Properties(NameValueCollection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.Reset">
            <summary>设置 DomSqlMapBuilder.Reset() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.SetAccessorFactorySetISetAccessorFactory">
            <summary>设置 DomSqlMapBuilder.set_SetAccessorFactory(ISetAccessorFactory value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ValidateSchemaXmlNodeString">
            <summary>设置 DomSqlMapBuilder.ValidateSchema(XmlNode section, String schemaFileName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ValidateSqlMapConfigSetBoolean">
            <summary>设置 DomSqlMapBuilder.set_ValidateSqlMapConfig(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.ShimDomSqlMapBuilder.AllInstances.ValidationCallBackObjectValidationEventArgs">
            <summary>设置 DomSqlMapBuilder.ValidationCallBack(Object sender, ValidationEventArgs args) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Fakes.StubDomSqlMapBuilder">
            <summary>IBatisNet.DataMapper.Configuration.DomSqlMapBuilder 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Fakes.StubDomSqlMapBuilder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Fakes.StubDomSqlMapBuilder.#ctor(System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Fakes.StubDomSqlMapBuilder.InitializeStub">
            <summary>初始化 type StubDomSqlMapBuilder 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.StubDomSqlMapBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.StubDomSqlMapBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Fakes.StubDomSqlMapBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap">
            <summary>IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterMap 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.#ctor(IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterMap)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AddParameterPropertyParameterProperty">
            <summary>设置 ParameterMap.AddParameterProperty(ParameterProperty property) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.BuildPropertiesConfigurationScope">
            <summary>设置 ParameterMap.BuildProperties(ConfigurationScope scope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.ClassGet">
            <summary>设置 ParameterMap.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.ClassNameGet">
            <summary>设置 ParameterMap.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.ClassNameSetString">
            <summary>设置 ParameterMap.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.ClassSetType">
            <summary>设置 ParameterMap.set_Class(Type value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.ConstructorDataExchangeFactory">
            <summary>设置 ParameterMap.ParameterMap(DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.DataExchangeSetIDataExchange">
            <summary>设置 ParameterMap.set_DataExchange(IDataExchange value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.ExtendMapGet">
            <summary>设置 ParameterMap.get_ExtendMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.ExtendMapSetString">
            <summary>设置 ParameterMap.set_ExtendMap(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.GetParameterIndexString">
            <summary>设置 ParameterMap.GetParameterIndex(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.GetPropertiesConfigurationScope">
            <summary>设置 ParameterMap.GetProperties(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.GetPropertyInt32">
            <summary>设置 ParameterMap.GetProperty(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.GetPropertyNameArray">
            <summary>设置 ParameterMap.GetPropertyNameArray() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.GetPropertyString">
            <summary>设置 ParameterMap.GetProperty(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.IdGet">
            <summary>设置 ParameterMap.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.IdSetString">
            <summary>设置 ParameterMap.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.InitializeBooleanIScope">
            <summary>设置 ParameterMap.Initialize(Boolean usePositionalParameters, IScope scope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.InsertParameterPropertyInt32ParameterProperty">
            <summary>设置 ParameterMap.InsertParameterProperty(Int32 index, ParameterProperty property) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.PropertiesGet">
            <summary>设置 ParameterMap.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.PropertiesListGet">
            <summary>设置 ParameterMap.get_PropertiesList() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.SetParameterParameterPropertyIDataParameterObject">
            <summary>设置 ParameterMap.SetParameter(ParameterProperty mapping, IDataParameter dataParameter, Object parameterValue) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.StaticConstructor">
            <summary>设置 ParameterMap.ParameterMap() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.AddParameterPropertyParameterProperty">
            <summary>设置 ParameterMap.AddParameterProperty(ParameterProperty property) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.BuildPropertiesConfigurationScope">
            <summary>设置 ParameterMap.BuildProperties(ConfigurationScope scope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.ClassGet">
            <summary>设置 ParameterMap.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.ClassNameGet">
            <summary>设置 ParameterMap.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.ClassNameSetString">
            <summary>设置 ParameterMap.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.ClassSetType">
            <summary>设置 ParameterMap.set_Class(Type value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.DataExchangeSetIDataExchange">
            <summary>设置 ParameterMap.set_DataExchange(IDataExchange value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.ExtendMapGet">
            <summary>设置 ParameterMap.get_ExtendMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.ExtendMapSetString">
            <summary>设置 ParameterMap.set_ExtendMap(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.GetParameterIndexString">
            <summary>设置 ParameterMap.GetParameterIndex(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.GetPropertiesConfigurationScope">
            <summary>设置 ParameterMap.GetProperties(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.GetPropertyInt32">
            <summary>设置 ParameterMap.GetProperty(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.GetPropertyNameArray">
            <summary>设置 ParameterMap.GetPropertyNameArray() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.GetPropertyString">
            <summary>设置 ParameterMap.GetProperty(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.IdGet">
            <summary>设置 ParameterMap.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.IdSetString">
            <summary>设置 ParameterMap.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.InitializeBooleanIScope">
            <summary>设置 ParameterMap.Initialize(Boolean usePositionalParameters, IScope scope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.InsertParameterPropertyInt32ParameterProperty">
            <summary>设置 ParameterMap.InsertParameterProperty(Int32 index, ParameterProperty property) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.PropertiesGet">
            <summary>设置 ParameterMap.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.PropertiesListGet">
            <summary>设置 ParameterMap.get_PropertiesList() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterMap.AllInstances.SetParameterParameterPropertyIDataParameterObject">
            <summary>设置 ParameterMap.SetParameter(ParameterProperty mapping, IDataParameter dataParameter, Object parameterValue) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty">
            <summary>IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterProperty 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.#ctor(IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.CLRTypeGet">
            <summary>设置 ParameterProperty.get_CLRType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.CLRTypeSetString">
            <summary>设置 ParameterProperty.set_CLRType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.CallBackNameGet">
            <summary>设置 ParameterProperty.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.CallBackNameSetString">
            <summary>设置 ParameterProperty.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.Clone">
            <summary>设置 ParameterProperty.Clone() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.ColumnNameGet">
            <summary>设置 ParameterProperty.get_ColumnName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.ColumnNameSetString">
            <summary>设置 ParameterProperty.set_ColumnName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.Constructor">
            <summary>设置 ParameterProperty.ParameterProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.DbTypeGet">
            <summary>设置 ParameterProperty.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.DbTypeSetString">
            <summary>设置 ParameterProperty.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.DirectionAttributeGet">
            <summary>设置 ParameterProperty.get_DirectionAttribute() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.DirectionAttributeSetString">
            <summary>设置 ParameterProperty.set_DirectionAttribute(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.DirectionGet">
            <summary>设置 ParameterProperty.get_Direction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.DirectionSetParameterDirection">
            <summary>设置 ParameterProperty.set_Direction(ParameterDirection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.EqualsObject">
            <summary>设置 ParameterProperty.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.GetAccessorGet">
            <summary>设置 ParameterProperty.get_GetAccessor() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.GetHashCode">
            <summary>设置 ParameterProperty.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.HasNullValueGet">
            <summary>设置 ParameterProperty.get_HasNullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.InitializeIScopeType">
            <summary>设置 ParameterProperty.Initialize(IScope scope, Type parameterClass) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.IsComplexMemberNameGet">
            <summary>设置 ParameterProperty.get_IsComplexMemberName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.NullValueGet">
            <summary>设置 ParameterProperty.get_NullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.NullValueSetString">
            <summary>设置 ParameterProperty.set_NullValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.PrecisionGet">
            <summary>设置 ParameterProperty.get_Precision() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.PrecisionSetByte">
            <summary>设置 ParameterProperty.set_Precision(Byte value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.PropertyNameGet">
            <summary>设置 ParameterProperty.get_PropertyName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.PropertyNameSetString">
            <summary>设置 ParameterProperty.set_PropertyName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.ScaleGet">
            <summary>设置 ParameterProperty.get_Scale() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.ScaleSetByte">
            <summary>设置 ParameterProperty.set_Scale(Byte value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.SizeGet">
            <summary>设置 ParameterProperty.get_Size() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.SizeSetInt32">
            <summary>设置 ParameterProperty.set_Size(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.TypeHandlerGet">
            <summary>设置 ParameterProperty.get_TypeHandler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.TypeHandlerSetITypeHandler">
            <summary>设置 ParameterProperty.set_TypeHandler(ITypeHandler value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.CLRTypeGet">
            <summary>设置 ParameterProperty.get_CLRType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.CLRTypeSetString">
            <summary>设置 ParameterProperty.set_CLRType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.CallBackNameGet">
            <summary>设置 ParameterProperty.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.CallBackNameSetString">
            <summary>设置 ParameterProperty.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.Clone">
            <summary>设置 ParameterProperty.Clone() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.ColumnNameGet">
            <summary>设置 ParameterProperty.get_ColumnName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.ColumnNameSetString">
            <summary>设置 ParameterProperty.set_ColumnName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.DbTypeGet">
            <summary>设置 ParameterProperty.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.DbTypeSetString">
            <summary>设置 ParameterProperty.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.DirectionAttributeGet">
            <summary>设置 ParameterProperty.get_DirectionAttribute() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.DirectionAttributeSetString">
            <summary>设置 ParameterProperty.set_DirectionAttribute(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.DirectionGet">
            <summary>设置 ParameterProperty.get_Direction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.DirectionSetParameterDirection">
            <summary>设置 ParameterProperty.set_Direction(ParameterDirection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.EqualsObject">
            <summary>设置 ParameterProperty.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.GetAccessorGet">
            <summary>设置 ParameterProperty.get_GetAccessor() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.GetHashCode01">
            <summary>设置 ParameterProperty.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.HasNullValueGet">
            <summary>设置 ParameterProperty.get_HasNullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.InitializeIScopeType">
            <summary>设置 ParameterProperty.Initialize(IScope scope, Type parameterClass) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.IsComplexMemberNameGet">
            <summary>设置 ParameterProperty.get_IsComplexMemberName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.NullValueGet">
            <summary>设置 ParameterProperty.get_NullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.NullValueSetString">
            <summary>设置 ParameterProperty.set_NullValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.PrecisionGet">
            <summary>设置 ParameterProperty.get_Precision() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.PrecisionSetByte">
            <summary>设置 ParameterProperty.set_Precision(Byte value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.PropertyNameGet">
            <summary>设置 ParameterProperty.get_PropertyName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.PropertyNameSetString">
            <summary>设置 ParameterProperty.set_PropertyName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.ScaleGet">
            <summary>设置 ParameterProperty.get_Scale() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.ScaleSetByte">
            <summary>设置 ParameterProperty.set_Scale(Byte value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.SizeGet">
            <summary>设置 ParameterProperty.get_Size() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.SizeSetInt32">
            <summary>设置 ParameterProperty.set_Size(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.TypeHandlerGet">
            <summary>设置 ParameterProperty.get_TypeHandler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterProperty.AllInstances.TypeHandlerSetITypeHandler">
            <summary>设置 ParameterProperty.set_TypeHandler(ITypeHandler value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection">
            <summary>IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.#ctor(IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AddParameterProperty">
            <summary>设置 ParameterPropertyCollection.Add(ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AddRangeParameterPropertyArray">
            <summary>设置 ParameterPropertyCollection.AddRange(ParameterProperty[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AddRangeParameterPropertyCollection">
            <summary>设置 ParameterPropertyCollection.AddRange(ParameterPropertyCollection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.Constructor">
            <summary>设置 ParameterPropertyCollection.ParameterPropertyCollection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.ConstructorInt32">
            <summary>设置 ParameterPropertyCollection.ParameterPropertyCollection(Int32 capacity) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.ContainsParameterProperty">
            <summary>设置 ParameterPropertyCollection.Contains(ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.CountGet">
            <summary>设置 ParameterPropertyCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.InsertInt32ParameterProperty">
            <summary>设置 ParameterPropertyCollection.Insert(Int32 index, ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.ItemGetInt32">
            <summary>设置 ParameterPropertyCollection.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.ItemSetInt32ParameterProperty">
            <summary>设置 ParameterPropertyCollection.set_Item(Int32 index, ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.LengthGet">
            <summary>设置 ParameterPropertyCollection.get_Length() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.RemoveAtInt32">
            <summary>设置 ParameterPropertyCollection.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.RemoveParameterProperty">
            <summary>设置 ParameterPropertyCollection.Remove(ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.ResizeInt32">
            <summary>设置 ParameterPropertyCollection.Resize(Int32 minSize) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.AddParameterProperty">
            <summary>设置 ParameterPropertyCollection.Add(ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.AddRangeParameterPropertyArray">
            <summary>设置 ParameterPropertyCollection.AddRange(ParameterProperty[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.AddRangeParameterPropertyCollection">
            <summary>设置 ParameterPropertyCollection.AddRange(ParameterPropertyCollection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.ContainsParameterProperty">
            <summary>设置 ParameterPropertyCollection.Contains(ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.CountGet">
            <summary>设置 ParameterPropertyCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.InsertInt32ParameterProperty">
            <summary>设置 ParameterPropertyCollection.Insert(Int32 index, ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.ItemGetInt32">
            <summary>设置 ParameterPropertyCollection.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.ItemSetInt32ParameterProperty">
            <summary>设置 ParameterPropertyCollection.set_Item(Int32 index, ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.LengthGet">
            <summary>设置 ParameterPropertyCollection.get_Length() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.RemoveAtInt32">
            <summary>设置 ParameterPropertyCollection.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.RemoveParameterProperty">
            <summary>设置 ParameterPropertyCollection.Remove(ParameterProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.ShimParameterPropertyCollection.AllInstances.ResizeInt32">
            <summary>设置 ParameterPropertyCollection.Resize(Int32 minSize) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterMap">
            <summary>IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterMap 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterMap.#ctor(IBatisNet.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterMap.InitializeStub">
            <summary>初始化 type StubParameterMap 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterMap.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterMap.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterMap.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty">
            <summary>IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterProperty 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.Equals(System.Object)">
            <summary>设置 ParameterProperty.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.EqualsObject">
            <summary>设置 ParameterProperty.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.GetHashCode">
            <summary>设置 ParameterProperty.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.GetHashCode01">
            <summary>设置 ParameterProperty.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.InitializeStub">
            <summary>初始化 type StubParameterProperty 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterProperty.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterPropertyCollection">
            <summary>IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterPropertyCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterPropertyCollection.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterPropertyCollection.InitializeStub">
            <summary>初始化 type StubParameterPropertyCollection 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterPropertyCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterPropertyCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ParameterMapping.Fakes.StubParameterPropertyCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ArgumentProperty 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.ArgumentProperty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.ArgumentNameGet">
            <summary>设置 ArgumentProperty.get_ArgumentName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.ArgumentNameSetString">
            <summary>设置 ArgumentProperty.set_ArgumentName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.ArgumentStrategyGet">
            <summary>设置 ArgumentProperty.get_ArgumentStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.ArgumentStrategySetIArgumentStrategy">
            <summary>设置 ArgumentProperty.set_ArgumentStrategy(IArgumentStrategy value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.Constructor">
            <summary>设置 ArgumentProperty.ArgumentProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.InitializeConfigurationScopeConstructorInfo">
            <summary>设置 ArgumentProperty.Initialize(ConfigurationScope configScope, ConstructorInfo constructorInfo) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.IsLazyLoadGet">
            <summary>设置 ArgumentProperty.get_IsLazyLoad() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.IsLazyLoadSetBoolean">
            <summary>设置 ArgumentProperty.set_IsLazyLoad(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.MemberTypeGet">
            <summary>设置 ArgumentProperty.get_MemberType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.ResolveTypeHandlerConfigurationScopeTypeStringString">
            <summary>设置 ArgumentProperty.ResolveTypeHandler(ConfigurationScope configScope, Type argumenType, String clrType, String dbType) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.ArgumentNameGet">
            <summary>设置 ArgumentProperty.get_ArgumentName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.ArgumentNameSetString">
            <summary>设置 ArgumentProperty.set_ArgumentName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.ArgumentStrategyGet">
            <summary>设置 ArgumentProperty.get_ArgumentStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.ArgumentStrategySetIArgumentStrategy">
            <summary>设置 ArgumentProperty.set_ArgumentStrategy(IArgumentStrategy value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.InitializeConfigurationScopeConstructorInfo">
            <summary>设置 ArgumentProperty.Initialize(ConfigurationScope configScope, ConstructorInfo constructorInfo) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.IsLazyLoadGet">
            <summary>设置 ArgumentProperty.get_IsLazyLoad() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.IsLazyLoadSetBoolean">
            <summary>设置 ArgumentProperty.set_IsLazyLoad(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.MemberTypeGet">
            <summary>设置 ArgumentProperty.get_MemberType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimArgumentProperty.AllInstances.ResolveTypeHandlerConfigurationScopeTypeStringString">
            <summary>设置 ArgumentProperty.ResolveTypeHandler(ConfigurationScope configScope, Type argumenType, String clrType, String dbType) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.Discriminator 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.Discriminator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AddSubMap">
            <summary>设置 Discriminator.Add(SubMap subMap) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.CLRTypeGet">
            <summary>设置 Discriminator.get_CLRType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.CLRTypeSetString">
            <summary>设置 Discriminator.set_CLRType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.CallBackNameGet">
            <summary>设置 Discriminator.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.CallBackNameSetString">
            <summary>设置 Discriminator.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.ColumnIndexGet">
            <summary>设置 Discriminator.get_ColumnIndex() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.ColumnIndexSetInt32">
            <summary>设置 Discriminator.set_ColumnIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.ColumnNameGet">
            <summary>设置 Discriminator.get_ColumnName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.ColumnNameSetString">
            <summary>设置 Discriminator.set_ColumnName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.Constructor">
            <summary>设置 Discriminator.Discriminator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.DbTypeGet">
            <summary>设置 Discriminator.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.DbTypeSetString">
            <summary>设置 Discriminator.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.GetSubMapString">
            <summary>设置 Discriminator.GetSubMap(String discriminatorValue) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.InitializeConfigurationScope">
            <summary>设置 Discriminator.Initialize(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.NullValueGet">
            <summary>设置 Discriminator.get_NullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.NullValueSetString">
            <summary>设置 Discriminator.set_NullValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.ResultPropertyGet">
            <summary>设置 Discriminator.get_ResultProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.SetMappingConfigurationScopeType">
            <summary>设置 Discriminator.SetMapping(ConfigurationScope configScope, Type resultClass) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.AddSubMap">
            <summary>设置 Discriminator.Add(SubMap subMap) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.CLRTypeGet">
            <summary>设置 Discriminator.get_CLRType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.CLRTypeSetString">
            <summary>设置 Discriminator.set_CLRType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.CallBackNameGet">
            <summary>设置 Discriminator.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.CallBackNameSetString">
            <summary>设置 Discriminator.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.ColumnIndexGet">
            <summary>设置 Discriminator.get_ColumnIndex() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.ColumnIndexSetInt32">
            <summary>设置 Discriminator.set_ColumnIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.ColumnNameGet">
            <summary>设置 Discriminator.get_ColumnName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.ColumnNameSetString">
            <summary>设置 Discriminator.set_ColumnName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.DbTypeGet">
            <summary>设置 Discriminator.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.DbTypeSetString">
            <summary>设置 Discriminator.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.GetSubMapString">
            <summary>设置 Discriminator.GetSubMap(String discriminatorValue) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.InitializeConfigurationScope">
            <summary>设置 Discriminator.Initialize(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.NullValueGet">
            <summary>设置 Discriminator.get_NullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.NullValueSetString">
            <summary>设置 Discriminator.set_NullValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.ResultPropertyGet">
            <summary>设置 Discriminator.get_ResultProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimDiscriminator.AllInstances.SetMappingConfigurationScopeType">
            <summary>设置 Discriminator.SetMapping(ConfigurationScope configScope, Type resultClass) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ResultMap 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.ResultMap)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AddResultProperyResultProperty">
            <summary>设置 ResultMap.AddResultPropery(ResultProperty property) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ClassGet">
            <summary>设置 ResultMap.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ClassNameGet">
            <summary>设置 ResultMap.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ClassNameSetString">
            <summary>设置 ResultMap.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ConstructorDataExchangeFactory">
            <summary>设置 ResultMap.ResultMap(DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.CreateInstanceOfResultObjectArray">
            <summary>设置 ResultMap.CreateInstanceOfResult(Object[] parameters) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.DataExchangeSetIDataExchange">
            <summary>设置 ResultMap.set_DataExchange(IDataExchange value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.DiscriminatorGet">
            <summary>设置 ResultMap.get_Discriminator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.DiscriminatorSetDiscriminator">
            <summary>设置 ResultMap.set_Discriminator(Discriminator value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ExtendMapGet">
            <summary>设置 ResultMap.get_ExtendMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ExtendMapSetString">
            <summary>设置 ResultMap.set_ExtendMap(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.GetChildNodeConfigurationScope">
            <summary>设置 ResultMap.GetChildNode(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.GetConstructorTypeStringArray">
            <summary>设置 ResultMap.GetConstructor(Type type, String[] parametersName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.IdGet">
            <summary>设置 ResultMap.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.IdSetString">
            <summary>设置 ResultMap.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.InitializeConfigurationScope">
            <summary>设置 ResultMap.Initialize(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ParametersGet">
            <summary>设置 ResultMap.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.PropertiesGet">
            <summary>设置 ResultMap.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.ResolveSubMapIDataReader">
            <summary>设置 ResultMap.ResolveSubMap(IDataReader dataReader) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.SqlMapNameSpaceGet">
            <summary>设置 ResultMap.get_SqlMapNameSpace() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.SqlMapNameSpaceSetString">
            <summary>设置 ResultMap.set_SqlMapNameSpace(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.StaticConstructor">
            <summary>设置 ResultMap.ResultMap() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.AddResultProperyResultProperty">
            <summary>设置 ResultMap.AddResultPropery(ResultProperty property) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.ClassGet">
            <summary>设置 ResultMap.get_Class() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.ClassNameGet">
            <summary>设置 ResultMap.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.ClassNameSetString">
            <summary>设置 ResultMap.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.CreateInstanceOfResultObjectArray">
            <summary>设置 ResultMap.CreateInstanceOfResult(Object[] parameters) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.DataExchangeSetIDataExchange">
            <summary>设置 ResultMap.set_DataExchange(IDataExchange value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.DiscriminatorGet">
            <summary>设置 ResultMap.get_Discriminator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.DiscriminatorSetDiscriminator">
            <summary>设置 ResultMap.set_Discriminator(Discriminator value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.ExtendMapGet">
            <summary>设置 ResultMap.get_ExtendMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.ExtendMapSetString">
            <summary>设置 ResultMap.set_ExtendMap(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.GetChildNodeConfigurationScope">
            <summary>设置 ResultMap.GetChildNode(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.GetConstructorTypeStringArray">
            <summary>设置 ResultMap.GetConstructor(Type type, String[] parametersName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.IdGet">
            <summary>设置 ResultMap.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.IdSetString">
            <summary>设置 ResultMap.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.InitializeConfigurationScope">
            <summary>设置 ResultMap.Initialize(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.ParametersGet">
            <summary>设置 ResultMap.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.PropertiesGet">
            <summary>设置 ResultMap.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.ResolveSubMapIDataReader">
            <summary>设置 ResultMap.ResolveSubMap(IDataReader dataReader) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.SqlMapNameSpaceGet">
            <summary>设置 ResultMap.get_SqlMapNameSpace() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultMap.AllInstances.SqlMapNameSpaceSetString">
            <summary>设置 ResultMap.set_SqlMapNameSpace(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.ArgumentStrategyGet">
            <summary>设置 ResultProperty.get_ArgumentStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.ArgumentStrategySetIArgumentStrategy">
            <summary>设置 ResultProperty.set_ArgumentStrategy(IArgumentStrategy value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.CLRTypeGet">
            <summary>设置 ResultProperty.get_CLRType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.CLRTypeSetString">
            <summary>设置 ResultProperty.set_CLRType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.CallBackNameGet">
            <summary>设置 ResultProperty.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.CallBackNameSetString">
            <summary>设置 ResultProperty.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.Clone">
            <summary>设置 ResultProperty.Clone() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.ColumnIndexGet">
            <summary>设置 ResultProperty.get_ColumnIndex() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.ColumnIndexSetInt32">
            <summary>设置 ResultProperty.set_ColumnIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.ColumnNameGet">
            <summary>设置 ResultProperty.get_ColumnName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.ColumnNameSetString">
            <summary>设置 ResultProperty.set_ColumnName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.Constructor">
            <summary>设置 ResultProperty.ResultProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.DbTypeGet">
            <summary>设置 ResultProperty.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.DbTypeSetString">
            <summary>设置 ResultProperty.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.GetDataBaseValueIDataReader">
            <summary>设置 ResultProperty.GetDataBaseValue(IDataReader dataReader) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.HasNullValueGet">
            <summary>设置 ResultProperty.get_HasNullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.InitializeConfigurationScopeType">
            <summary>设置 ResultProperty.Initialize(ConfigurationScope configScope, Type resultClass) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.InitializeTypeHandlerFactoryISetAccessor">
            <summary>设置 ResultProperty.Initialize(TypeHandlerFactory typeHandlerFactory, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.IsComplexMemberNameGet">
            <summary>设置 ResultProperty.get_IsComplexMemberName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.IsLazyLoadGet">
            <summary>设置 ResultProperty.get_IsLazyLoad() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.IsLazyLoadSetBoolean">
            <summary>设置 ResultProperty.set_IsLazyLoad(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.LazyFactoryGet">
            <summary>设置 ResultProperty.get_LazyFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.MemberTypeGet">
            <summary>设置 ResultProperty.get_MemberType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.NestedResultMapGet">
            <summary>设置 ResultProperty.get_NestedResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.NestedResultMapNameGet">
            <summary>设置 ResultProperty.get_NestedResultMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.NestedResultMapNameSetString">
            <summary>设置 ResultProperty.set_NestedResultMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.NestedResultMapSetResultMap">
            <summary>设置 ResultProperty.set_NestedResultMap(ResultMap value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.NullValueGet">
            <summary>设置 ResultProperty.get_NullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.NullValueSetString">
            <summary>设置 ResultProperty.set_NullValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.PropertyNameGet">
            <summary>设置 ResultProperty.get_PropertyName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.PropertyNameSetString">
            <summary>设置 ResultProperty.set_PropertyName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.PropertyStrategyGet">
            <summary>设置 ResultProperty.get_PropertyStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.PropertyStrategySetIPropertyStrategy">
            <summary>设置 ResultProperty.set_PropertyStrategy(IPropertyStrategy value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.SelectGet">
            <summary>设置 ResultProperty.get_Select() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.SelectSetString">
            <summary>设置 ResultProperty.set_Select(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.SetAccessorGet">
            <summary>设置 ResultProperty.get_SetAccessor() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.TranslateValueObject">
            <summary>设置 ResultProperty.TranslateValue(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.TypeHandlerGet">
            <summary>设置 ResultProperty.get_TypeHandler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.TypeHandlerSetITypeHandler">
            <summary>设置 ResultProperty.set_TypeHandler(ITypeHandler value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.ArgumentStrategyGet">
            <summary>设置 ResultProperty.get_ArgumentStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.ArgumentStrategySetIArgumentStrategy">
            <summary>设置 ResultProperty.set_ArgumentStrategy(IArgumentStrategy value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.CLRTypeGet">
            <summary>设置 ResultProperty.get_CLRType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.CLRTypeSetString">
            <summary>设置 ResultProperty.set_CLRType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.CallBackNameGet">
            <summary>设置 ResultProperty.get_CallBackName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.CallBackNameSetString">
            <summary>设置 ResultProperty.set_CallBackName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.Clone">
            <summary>设置 ResultProperty.Clone() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.ColumnIndexGet">
            <summary>设置 ResultProperty.get_ColumnIndex() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.ColumnIndexSetInt32">
            <summary>设置 ResultProperty.set_ColumnIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.ColumnNameGet">
            <summary>设置 ResultProperty.get_ColumnName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.ColumnNameSetString">
            <summary>设置 ResultProperty.set_ColumnName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.DbTypeGet">
            <summary>设置 ResultProperty.get_DbType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.DbTypeSetString">
            <summary>设置 ResultProperty.set_DbType(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.GetDataBaseValueIDataReader">
            <summary>设置 ResultProperty.GetDataBaseValue(IDataReader dataReader) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.HasNullValueGet">
            <summary>设置 ResultProperty.get_HasNullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.InitializeConfigurationScopeType">
            <summary>设置 ResultProperty.Initialize(ConfigurationScope configScope, Type resultClass) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.InitializeTypeHandlerFactoryISetAccessor">
            <summary>设置 ResultProperty.Initialize(TypeHandlerFactory typeHandlerFactory, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.IsComplexMemberNameGet">
            <summary>设置 ResultProperty.get_IsComplexMemberName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.IsLazyLoadGet">
            <summary>设置 ResultProperty.get_IsLazyLoad() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.IsLazyLoadSetBoolean">
            <summary>设置 ResultProperty.set_IsLazyLoad(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.LazyFactoryGet">
            <summary>设置 ResultProperty.get_LazyFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.MemberTypeGet">
            <summary>设置 ResultProperty.get_MemberType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.NestedResultMapGet">
            <summary>设置 ResultProperty.get_NestedResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.NestedResultMapNameGet">
            <summary>设置 ResultProperty.get_NestedResultMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.NestedResultMapNameSetString">
            <summary>设置 ResultProperty.set_NestedResultMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.NestedResultMapSetResultMap">
            <summary>设置 ResultProperty.set_NestedResultMap(ResultMap value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.NullValueGet">
            <summary>设置 ResultProperty.get_NullValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.NullValueSetString">
            <summary>设置 ResultProperty.set_NullValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.PropertyNameGet">
            <summary>设置 ResultProperty.get_PropertyName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.PropertyNameSetString">
            <summary>设置 ResultProperty.set_PropertyName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.PropertyStrategyGet">
            <summary>设置 ResultProperty.get_PropertyStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.PropertyStrategySetIPropertyStrategy">
            <summary>设置 ResultProperty.set_PropertyStrategy(IPropertyStrategy value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.SelectGet">
            <summary>设置 ResultProperty.get_Select() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.SelectSetString">
            <summary>设置 ResultProperty.set_Select(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.SetAccessorGet">
            <summary>设置 ResultProperty.get_SetAccessor() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.TranslateValueObject">
            <summary>设置 ResultProperty.TranslateValue(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.TypeHandlerGet">
            <summary>设置 ResultProperty.get_TypeHandler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultProperty.AllInstances.TypeHandlerSetITypeHandler">
            <summary>设置 ResultProperty.set_TypeHandler(ITypeHandler value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ResultPropertyCollection 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.ResultPropertyCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AddRangeResultPropertyArray">
            <summary>设置 ResultPropertyCollection.AddRange(ResultProperty[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AddRangeResultPropertyCollection">
            <summary>设置 ResultPropertyCollection.AddRange(ResultPropertyCollection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AddResultProperty">
            <summary>设置 ResultPropertyCollection.Add(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.Constructor">
            <summary>设置 ResultPropertyCollection.ResultPropertyCollection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.ConstructorInt32">
            <summary>设置 ResultPropertyCollection.ResultPropertyCollection(Int32 capacity) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.ContainsResultProperty">
            <summary>设置 ResultPropertyCollection.Contains(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.CountGet">
            <summary>设置 ResultPropertyCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.InsertInt32ResultProperty">
            <summary>设置 ResultPropertyCollection.Insert(Int32 index, ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.ItemGetInt32">
            <summary>设置 ResultPropertyCollection.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.ItemSetInt32ResultProperty">
            <summary>设置 ResultPropertyCollection.set_Item(Int32 index, ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.LengthGet">
            <summary>设置 ResultPropertyCollection.get_Length() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.RemoveAtInt32">
            <summary>设置 ResultPropertyCollection.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.RemoveResultProperty">
            <summary>设置 ResultPropertyCollection.Remove(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.ResizeInt32">
            <summary>设置 ResultPropertyCollection.Resize(Int32 minSize) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.AddRangeResultPropertyArray">
            <summary>设置 ResultPropertyCollection.AddRange(ResultProperty[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.AddRangeResultPropertyCollection">
            <summary>设置 ResultPropertyCollection.AddRange(ResultPropertyCollection value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.AddResultProperty">
            <summary>设置 ResultPropertyCollection.Add(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.ContainsResultProperty">
            <summary>设置 ResultPropertyCollection.Contains(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.CountGet">
            <summary>设置 ResultPropertyCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.InsertInt32ResultProperty">
            <summary>设置 ResultPropertyCollection.Insert(Int32 index, ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.ItemGetInt32">
            <summary>设置 ResultPropertyCollection.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.ItemSetInt32ResultProperty">
            <summary>设置 ResultPropertyCollection.set_Item(Int32 index, ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.LengthGet">
            <summary>设置 ResultPropertyCollection.get_Length() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.RemoveAtInt32">
            <summary>设置 ResultPropertyCollection.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.RemoveResultProperty">
            <summary>设置 ResultPropertyCollection.Remove(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimResultPropertyCollection.AllInstances.ResizeInt32">
            <summary>设置 ResultPropertyCollection.Resize(Int32 minSize) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.SubMap 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.SubMap)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.Constructor">
            <summary>设置 SubMap.SubMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.DiscriminatorValueGet">
            <summary>设置 SubMap.get_DiscriminatorValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.DiscriminatorValueSetString">
            <summary>设置 SubMap.set_DiscriminatorValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.ResultMapGet">
            <summary>设置 SubMap.get_ResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.ResultMapNameGet">
            <summary>设置 SubMap.get_ResultMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.ResultMapNameSetString">
            <summary>设置 SubMap.set_ResultMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.ResultMapSetResultMap">
            <summary>设置 SubMap.set_ResultMap(ResultMap value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.AllInstances.DiscriminatorValueGet">
            <summary>设置 SubMap.get_DiscriminatorValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.AllInstances.DiscriminatorValueSetString">
            <summary>设置 SubMap.set_DiscriminatorValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.AllInstances.ResultMapGet">
            <summary>设置 SubMap.get_ResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.AllInstances.ResultMapNameGet">
            <summary>设置 SubMap.get_ResultMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.AllInstances.ResultMapNameSetString">
            <summary>设置 SubMap.set_ResultMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.ShimSubMap.AllInstances.ResultMapSetResultMap">
            <summary>设置 SubMap.set_ResultMap(ResultMap value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ArgumentProperty 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.ArgumentStrategyGet">
            <summary>设置 ArgumentProperty.get_ArgumentStrategy() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.ArgumentStrategySetIArgumentStrategy">
            <summary>设置 ArgumentProperty.set_ArgumentStrategy(IArgumentStrategy value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.AttachBackingFieldToArgumentStrategy">
            <summary>附加委托以将 StubArgumentProperty.ArgumentStrategy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.AttachBackingFieldToIsLazyLoad">
            <summary>附加委托以将 StubArgumentProperty.IsLazyLoad 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.InitializeStub">
            <summary>初始化 type StubArgumentProperty 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.IsLazyLoadGet">
            <summary>设置 ArgumentProperty.get_IsLazyLoad() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.IsLazyLoadSetBoolean">
            <summary>设置 ArgumentProperty.set_IsLazyLoad(Boolean value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.MemberTypeGet">
            <summary>设置 ArgumentProperty.get_MemberType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.ArgumentStrategy">
            <summary>设置 ArgumentProperty.get_ArgumentStrategy() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.IsLazyLoad">
            <summary>设置 ArgumentProperty.get_IsLazyLoad() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubArgumentProperty.MemberType">
            <summary>设置 ArgumentProperty.get_MemberType() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubDiscriminator">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.Discriminator 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubDiscriminator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubDiscriminator.InitializeStub">
            <summary>初始化 type StubDiscriminator 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubDiscriminator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubDiscriminator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubDiscriminator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultMap">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ResultMap 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultMap.#ctor(IBatisNet.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultMap.InitializeStub">
            <summary>初始化 type StubResultMap 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultMap.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultMap.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultMap.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.ArgumentStrategyGet">
            <summary>设置 ResultProperty.get_ArgumentStrategy() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.ArgumentStrategySetIArgumentStrategy">
            <summary>设置 ResultProperty.set_ArgumentStrategy(IArgumentStrategy value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.AttachBackingFieldToArgumentStrategy">
            <summary>附加委托以将 StubResultProperty.ArgumentStrategy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.AttachBackingFieldToIsLazyLoad">
            <summary>附加委托以将 StubResultProperty.IsLazyLoad 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.InitializeStub">
            <summary>初始化 type StubResultProperty 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.IsLazyLoadGet">
            <summary>设置 ResultProperty.get_IsLazyLoad() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.IsLazyLoadSetBoolean">
            <summary>设置 ResultProperty.set_IsLazyLoad(Boolean value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.MemberTypeGet">
            <summary>设置 ResultProperty.get_MemberType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.ArgumentStrategy">
            <summary>设置 ResultProperty.get_ArgumentStrategy() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.IsLazyLoad">
            <summary>设置 ResultProperty.get_IsLazyLoad() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultProperty.MemberType">
            <summary>设置 ResultProperty.get_MemberType() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultPropertyCollection">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.ResultPropertyCollection 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultPropertyCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultPropertyCollection.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultPropertyCollection.InitializeStub">
            <summary>初始化 type StubResultPropertyCollection 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultPropertyCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultPropertyCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubResultPropertyCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubSubMap">
            <summary>IBatisNet.DataMapper.Configuration.ResultMapping.SubMap 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubSubMap.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubSubMap.InitializeStub">
            <summary>初始化 type StubSubMap 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubSubMap.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubSubMap.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.ResultMapping.Fakes.StubSubMap.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.ArgumentPropertyDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.ArgumentPropertyDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.Constructor">
            <summary>设置 ArgumentPropertyDeSerializer.ArgumentPropertyDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 ArgumentPropertyDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimArgumentPropertyDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.CacheModelDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.CacheModelDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.Constructor">
            <summary>设置 CacheModelDeSerializer.CacheModelDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 CacheModelDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimCacheModelDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.DeSerializerFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.#ctor(IBatisNet.DataMapper.Configuration.Serializers.DeSerializerFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.ConstructorConfigurationScope">
            <summary>设置 DeSerializerFactory.DeSerializerFactory(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.GetDeSerializerString">
            <summary>设置 DeSerializerFactory.GetDeSerializer(String name) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeSerializerFactory.AllInstances.GetDeSerializerString">
            <summary>设置 DeSerializerFactory.GetDeSerializer(String name) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.DeleteDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.DeleteDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.Constructor">
            <summary>设置 DeleteDeSerializer.DeleteDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 DeleteDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDeleteDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.DiscriminatorDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.DiscriminatorDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.Constructor">
            <summary>设置 DiscriminatorDeSerializer.DiscriminatorDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 DiscriminatorDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDiscriminatorDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.DynamicDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.DynamicDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.ConstructorConfigurationScope">
            <summary>设置 DynamicDeSerializer.DynamicDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.DeserializeXmlNode">
            <summary>设置 DynamicDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimDynamicDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 DynamicDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.InsertDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.InsertDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.Constructor">
            <summary>设置 InsertDeSerializer.InsertDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 InsertDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.ReadSelectKeyTypeString">
            <summary>设置 InsertDeSerializer.ReadSelectKeyType(String s) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimInsertDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsEmptyDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsEmptyDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsEmptyDeSerializer.IsEmptyDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.DeserializeXmlNode">
            <summary>设置 IsEmptyDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEmptyDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsEmptyDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsEqualDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsEqualDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsEqualDeSerializer.IsEqualDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.DeserializeXmlNode">
            <summary>设置 IsEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsEqualDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsGreaterEqualDeSerializer.IsGreaterEqualDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.DeserializeXmlNode">
            <summary>设置 IsGreaterEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterEqualDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsGreaterEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsGreaterThanDeSerializer.IsGreaterThanDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.DeserializeXmlNode">
            <summary>设置 IsGreaterThanDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsGreaterThanDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsGreaterThanDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsLessEqualDeSerializer.IsLessEqualDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.DeserializeXmlNode">
            <summary>设置 IsLessEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessEqualDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsLessEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsLessThanDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsLessThanDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsLessThanDeSerializer.IsLessThanDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.DeserializeXmlNode">
            <summary>设置 IsLessThanDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsLessThanDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsLessThanDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsNotEmptyDeSerializer.IsNotEmptyDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.DeserializeXmlNode">
            <summary>设置 IsNotEmptyDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEmptyDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsNotEmptyDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsNotEqualDeSerializer.IsNotEqualDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.DeserializeXmlNode">
            <summary>设置 IsNotEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotEqualDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsNotEqualDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsNotNullDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsNotNullDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsNotNullDeSerializer.IsNotNullDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.DeserializeXmlNode">
            <summary>设置 IsNotNullDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotNullDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsNotNullDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsNotParameterPresentDeSerializer.IsNotParameterPresentDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.DeserializeXmlNode">
            <summary>设置 IsNotParameterPresentDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotParameterPresentDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsNotParameterPresentDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsNotPropertyAvailableDeSerializer.IsNotPropertyAvailableDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.DeserializeXmlNode">
            <summary>设置 IsNotPropertyAvailableDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNotPropertyAvailableDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsNotPropertyAvailableDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsNullDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsNullDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsNullDeSerializer.IsNullDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.DeserializeXmlNode">
            <summary>设置 IsNullDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsNullDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsNullDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsParameterPresentDeSerializer.IsParameterPresentDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.DeserializeXmlNode">
            <summary>设置 IsParameterPresentDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsParameterPresentDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsParameterPresentDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.ConstructorConfigurationScope">
            <summary>设置 IsPropertyAvailableDeSerializer.IsPropertyAvailableDeSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.DeserializeXmlNode">
            <summary>设置 IsPropertyAvailableDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIsPropertyAvailableDeSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IsPropertyAvailableDeSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IterateSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.IterateSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.Bind(IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.ConstructorConfigurationScope">
            <summary>设置 IterateSerializer.IterateSerializer(ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.DeserializeXmlNode">
            <summary>设置 IterateSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimIterateSerializer.AllInstances.DeserializeXmlNode">
            <summary>设置 IterateSerializer.Deserialize(XmlNode node) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.ParameterMapDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.ParameterMapDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.Constructor">
            <summary>设置 ParameterMapDeSerializer.ParameterMapDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 ParameterMapDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterMapDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.ParameterPropertyDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.ParameterPropertyDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.Constructor">
            <summary>设置 ParameterPropertyDeSerializer.ParameterPropertyDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 ParameterPropertyDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimParameterPropertyDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.ProcedureDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.ProcedureDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.Constructor">
            <summary>设置 ProcedureDeSerializer.ProcedureDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 ProcedureDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimProcedureDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.ResultMapDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.ResultMapDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.Constructor">
            <summary>设置 ResultMapDeSerializer.ResultMapDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 ResultMapDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultMapDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.ResultPropertyDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.ResultPropertyDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.Constructor">
            <summary>设置 ResultPropertyDeSerializer.ResultPropertyDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 ResultPropertyDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimResultPropertyDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.SelectDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.SelectDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.Constructor">
            <summary>设置 SelectDeSerializer.SelectDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 SelectDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSelectDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.StatementDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.StatementDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.Constructor">
            <summary>设置 StatementDeSerializer.StatementDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 StatementDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimStatementDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.SubMapDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.SubMapDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.Constructor">
            <summary>设置 SubMapDeSerializer.SubMapDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 SubMapDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimSubMapDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.TypeAliasDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.TypeAliasDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.Constructor">
            <summary>设置 TypeAliasDeSerializer.TypeAliasDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 TypeAliasDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeAliasDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.TypeHandlerDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.TypeHandlerDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.Constructor">
            <summary>设置 TypeHandlerDeSerializer.TypeHandlerDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 TypeHandlerDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimTypeHandlerDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.UpdateDeSerializer 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.#ctor(IBatisNet.DataMapper.Configuration.Serializers.UpdateDeSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.Constructor">
            <summary>设置 UpdateDeSerializer.UpdateDeSerializer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.DeserializeXmlNodeConfigurationScope">
            <summary>设置 UpdateDeSerializer.Deserialize(XmlNode node, ConfigurationScope configScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.ShimUpdateDeSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubDeSerializerFactory">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.DeSerializerFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubDeSerializerFactory.#ctor(IBatisNet.DataMapper.Scope.ConfigurationScope)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubDeSerializerFactory.InitializeStub">
            <summary>初始化 type StubDeSerializerFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubDeSerializerFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubDeSerializerFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubDeSerializerFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubIDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.IDeSerializer 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubIDeSerializer.#ctor">
            <summary>初始化 type StubIDeSerializer 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubIDeSerializer.DeserializeXmlNode">
            <summary>设置 IDeSerializer.Deserialize(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubIDeSerializer.ibndm::IBatisNet#DataMapper#Configuration#Serializers#IDeSerializer#Deserialize(System.Xml.XmlNode)">
            <summary>设置 IDeSerializer.Deserialize(XmlNode node) 的 存根</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubParameterPropertyDeSerializer">
            <summary>IBatisNet.DataMapper.Configuration.Serializers.ParameterPropertyDeSerializer 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubParameterPropertyDeSerializer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubParameterPropertyDeSerializer.InitializeStub">
            <summary>初始化 type StubParameterPropertyDeSerializer 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubParameterPropertyDeSerializer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubParameterPropertyDeSerializer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Serializers.Fakes.StubParameterPropertyDeSerializer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.BaseTag 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.BaseTag)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.Constructor">
            <summary>设置 BaseTag.BaseTag() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.PropertyGet">
            <summary>设置 BaseTag.get_Property() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.PropertySetString">
            <summary>设置 BaseTag.set_Property(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.AllInstances.PropertyGet">
            <summary>设置 BaseTag.get_Property() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimBaseTag.AllInstances.PropertySetString">
            <summary>设置 BaseTag.set_Property(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Conditional 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Conditional)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.ComparePropertyGet">
            <summary>设置 Conditional.get_CompareProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.ComparePropertySetString">
            <summary>设置 Conditional.set_CompareProperty(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.CompareValueGet">
            <summary>设置 Conditional.get_CompareValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.CompareValueSetString">
            <summary>设置 Conditional.set_CompareValue(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.Constructor">
            <summary>设置 Conditional.Conditional() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.AllInstances.ComparePropertyGet">
            <summary>设置 Conditional.get_CompareProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.AllInstances.ComparePropertySetString">
            <summary>设置 Conditional.set_CompareProperty(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.AllInstances.CompareValueGet">
            <summary>设置 Conditional.get_CompareValue() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimConditional.AllInstances.CompareValueSetString">
            <summary>设置 Conditional.set_CompareValue(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Dynamic 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Dynamic)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.ConstructorAccessorFactory">
            <summary>设置 Dynamic.Dynamic(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimDynamic.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsEmpty 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsEmpty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.ConstructorAccessorFactory">
            <summary>设置 IsEmpty.IsEmpty(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEmpty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsEqual 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsEqual)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.ConstructorAccessorFactory">
            <summary>设置 IsEqual.IsEqual(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsEqual.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterEqual 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterEqual)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.ConstructorAccessorFactory">
            <summary>设置 IsGreaterEqual.IsGreaterEqual(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterEqual.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterThan 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterThan)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.ConstructorAccessorFactory">
            <summary>设置 IsGreaterThan.IsGreaterThan(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsGreaterThan.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessEqual 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessEqual)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.ConstructorAccessorFactory">
            <summary>设置 IsLessEqual.IsLessEqual(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessEqual.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessThan 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessThan)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.ConstructorAccessorFactory">
            <summary>设置 IsLessThan.IsLessThan(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsLessThan.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEmpty 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEmpty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.ConstructorAccessorFactory">
            <summary>设置 IsNotEmpty.IsNotEmpty(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEmpty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEqual 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEqual)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.ConstructorAccessorFactory">
            <summary>设置 IsNotEqual.IsNotEqual(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotEqual.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotNull 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotNull)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.ConstructorAccessorFactory">
            <summary>设置 IsNotNull.IsNotNull(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotNull.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotParameterPresent 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotParameterPresent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.ConstructorAccessorFactory">
            <summary>设置 IsNotParameterPresent.IsNotParameterPresent(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotParameterPresent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotPropertyAvailable 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotPropertyAvailable)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.ConstructorAccessorFactory">
            <summary>设置 IsNotPropertyAvailable.IsNotPropertyAvailable(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNotPropertyAvailable.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNull 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsNull)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.ConstructorAccessorFactory">
            <summary>设置 IsNull.IsNull(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsNull.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsParameterPresent 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsParameterPresent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.ConstructorAccessorFactory">
            <summary>设置 IsParameterPresent.IsParameterPresent(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsParameterPresent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsPropertyAvailable 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IsPropertyAvailable)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.ConstructorAccessorFactory">
            <summary>设置 IsPropertyAvailable.IsPropertyAvailable(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIsPropertyAvailable.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.CloseGet">
            <summary>设置 Iterate.get_Close() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.CloseSetString">
            <summary>设置 Iterate.set_Close(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.ConjunctionGet">
            <summary>设置 Iterate.get_Conjunction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.ConjunctionSetString">
            <summary>设置 Iterate.set_Conjunction(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.ConstructorAccessorFactory">
            <summary>设置 Iterate.Iterate(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.OpenGet">
            <summary>设置 Iterate.get_Open() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.OpenSetString">
            <summary>设置 Iterate.set_Open(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.AllInstances.CloseGet">
            <summary>设置 Iterate.get_Close() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.AllInstances.CloseSetString">
            <summary>设置 Iterate.set_Close(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.AllInstances.ConjunctionGet">
            <summary>设置 Iterate.get_Conjunction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.AllInstances.ConjunctionSetString">
            <summary>设置 Iterate.set_Conjunction(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.AllInstances.OpenGet">
            <summary>设置 Iterate.get_Open() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimIterate.AllInstances.OpenSetString">
            <summary>设置 Iterate.set_Open(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AddChildISqlChild">
            <summary>设置 SqlTag.AddChild(ISqlChild child) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.Constructor">
            <summary>设置 SqlTag.SqlTag() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.GetChildrenEnumerator">
            <summary>设置 SqlTag.GetChildrenEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.HandlerGet">
            <summary>设置 SqlTag.get_Handler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.HandlerSetISqlTagHandler">
            <summary>设置 SqlTag.set_Handler(ISqlTagHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.IsPrependAvailableGet">
            <summary>设置 SqlTag.get_IsPrependAvailable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.ParentGet">
            <summary>设置 SqlTag.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.ParentSetSqlTag">
            <summary>设置 SqlTag.set_Parent(SqlTag value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.PrependGet">
            <summary>设置 SqlTag.get_Prepend() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.PrependSetString">
            <summary>设置 SqlTag.set_Prepend(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.AddChildISqlChild">
            <summary>设置 SqlTag.AddChild(ISqlChild child) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.GetChildrenEnumerator">
            <summary>设置 SqlTag.GetChildrenEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.HandlerGet">
            <summary>设置 SqlTag.get_Handler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.HandlerSetISqlTagHandler">
            <summary>设置 SqlTag.set_Handler(ISqlTagHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.IsPrependAvailableGet">
            <summary>设置 SqlTag.get_IsPrependAvailable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.ParentGet">
            <summary>设置 SqlTag.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.ParentSetSqlTag">
            <summary>设置 SqlTag.set_Parent(SqlTag value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.PrependGet">
            <summary>设置 SqlTag.get_Prepend() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.ShimSqlTag.AllInstances.PrependSetString">
            <summary>设置 SqlTag.set_Prepend(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubBaseTag">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.BaseTag 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubBaseTag.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubBaseTag.InitializeStub">
            <summary>初始化 type StubBaseTag 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubBaseTag.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubBaseTag.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubBaseTag.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubConditional">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Conditional 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubConditional.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubConditional.InitializeStub">
            <summary>初始化 type StubConditional 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubConditional.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubConditional.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubConditional.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubIDynamicParent">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubIDynamicParent.#ctor">
            <summary>初始化 type StubIDynamicParent 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubIDynamicParent.AddChildISqlChild">
            <summary>设置 IDynamicParent.AddChild(ISqlChild child) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubIDynamicParent.ibndm::IBatisNet#DataMapper#Configuration#Sql#Dynamic#Elements#IDynamicParent#AddChild(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>设置 IDynamicParent.AddChild(ISqlChild child) 的 存根</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubSqlTag">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubSqlTag.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubSqlTag.InitializeStub">
            <summary>初始化 type StubSqlTag 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubSqlTag.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubSqlTag.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.Fakes.StubSqlTag.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.SqlText 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.SqlText)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.Constructor">
            <summary>设置 SqlText.SqlText() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.IsWhiteSpaceGet">
            <summary>设置 SqlText.get_IsWhiteSpace() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.ParametersGet">
            <summary>设置 SqlText.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.ParametersSetParameterPropertyArray">
            <summary>设置 SqlText.set_Parameters(ParameterProperty[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.TextGet">
            <summary>设置 SqlText.get_Text() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.TextSetString">
            <summary>设置 SqlText.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.AllInstances.IsWhiteSpaceGet">
            <summary>设置 SqlText.get_IsWhiteSpace() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.AllInstances.ParametersGet">
            <summary>设置 SqlText.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.AllInstances.ParametersSetParameterPropertyArray">
            <summary>设置 SqlText.set_Parameters(ParameterProperty[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.AllInstances.TextGet">
            <summary>设置 SqlText.get_Text() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.ShimSqlText.AllInstances.TextSetString">
            <summary>设置 SqlText.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.StubISqlChild">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.ISqlChild 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Fakes.StubISqlChild.#ctor">
            <summary>初始化 type StubISqlChild 的新实例</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.AccessorFactoryGet">
            <summary>设置 BaseTagHandler.get_AccessorFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.ConstructorAccessorFactory">
            <summary>设置 BaseTagHandler.BaseTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 BaseTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.AllInstances.AccessorFactoryGet">
            <summary>设置 BaseTagHandler.get_AccessorFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.AllInstances.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.AllInstances.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.AllInstances.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 BaseTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimBaseTagHandler.AllInstances.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.CompareSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.Compare(SqlTagContext ctx, SqlTag sqlTag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.CompareValuesTypeObjectObject">
            <summary>设置 ConditionalTagHandler.CompareValues(Type type, Object value1, Object value2) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.ConstructorAccessorFactory">
            <summary>设置 ConditionalTagHandler.ConditionalTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.ConvertValueTypeString">
            <summary>设置 ConditionalTagHandler.ConvertValue(Type type, String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.AllInstances.CompareSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.Compare(SqlTagContext ctx, SqlTag sqlTag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.AllInstances.CompareValuesTypeObjectObject">
            <summary>设置 ConditionalTagHandler.CompareValues(Type type, Object value1, Object value2) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.AllInstances.ConvertValueTypeString">
            <summary>设置 ConditionalTagHandler.ConvertValue(Type type, String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.AllInstances.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimConditionalTagHandler.AllInstances.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.DynamicTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.DynamicTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.ConstructorAccessorFactory">
            <summary>设置 DynamicTagHandler.DynamicTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 DynamicTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimDynamicTagHandler.AllInstances.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 DynamicTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEmptyTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEmptyTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsEmptyTagHandler.IsEmptyTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsEmptyTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEmptyTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsEmptyTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEqualTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEqualTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsEqualTagHandler.IsEqualTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsEqualTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsGreaterEqualTagHandler.IsGreaterEqualTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsGreaterEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterEqualTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsGreaterEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterThanTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterThanTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsGreaterThanTagHandler.IsGreaterThanTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsGreaterThanTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsGreaterThanTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsGreaterThanTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessEqualTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessEqualTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsLessEqualTagHandler.IsLessEqualTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsLessEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessEqualTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsLessEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessThanTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessThanTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsLessThanTagHandler.IsLessThanTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsLessThanTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsLessThanTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsLessThanTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEmptyTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEmptyTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsNotEmptyTagHandler.IsNotEmptyTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotEmptyTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEmptyTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotEmptyTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEqualTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEqualTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsNotEqualTagHandler.IsNotEqualTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotEqualTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotNullTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotNullTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsNotNullTagHandler.IsNotNullTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotNullTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotNullTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotNullTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsNotParameterPresentTagHandler.IsNotParameterPresentTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotParameterPresentTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotParameterPresentTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotParameterPresentTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsNotPropertyAvailableTagHandler.IsNotPropertyAvailableTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNotPropertyAvailableTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNullTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNullTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsNullTagHandler.IsNullTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNullTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsNullTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNullTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsParameterPresentTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsParameterPresentTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsParameterPresentTagHandler.IsParameterPresentTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsParameterPresentTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsParameterPresentTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsParameterPresentTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.ConstructorAccessorFactory">
            <summary>设置 IsPropertyAvailableTagHandler.IsPropertyAvailableTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIsPropertyAvailableTagHandler.AllInstances.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.Bind(System.Collections.IEnumerator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.ConstructorObject">
            <summary>设置 IterateContext.IterateContext(Object collection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.CurrentGet">
            <summary>设置 IterateContext.get_Current() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.HasNextGet">
            <summary>设置 IterateContext.get_HasNext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.IndexGet">
            <summary>设置 IterateContext.get_Index() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.IsFirstGet">
            <summary>设置 IterateContext.get_IsFirst() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.IsLastGet">
            <summary>设置 IterateContext.get_IsLast() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.MoveNext">
            <summary>设置 IterateContext.MoveNext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.Remove">
            <summary>设置 IterateContext.Remove() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.Reset">
            <summary>设置 IterateContext.Reset() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.CurrentGet">
            <summary>设置 IterateContext.get_Current() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.HasNextGet">
            <summary>设置 IterateContext.get_HasNext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.IndexGet">
            <summary>设置 IterateContext.get_Index() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.IsFirstGet">
            <summary>设置 IterateContext.get_IsFirst() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.IsLastGet">
            <summary>设置 IterateContext.get_IsLast() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.MoveNext">
            <summary>设置 IterateContext.MoveNext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.Remove">
            <summary>设置 IterateContext.Remove() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateContext.AllInstances.Reset">
            <summary>设置 IterateContext.Reset() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.Bind(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.ConstructorAccessorFactory">
            <summary>设置 IterateTagHandler.IterateTagHandler(AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 IterateTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 IterateTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 IterateTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.IsPostParseRequiredGet">
            <summary>设置 IterateTagHandler.get_IsPostParseRequired() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.ReplaceStringBuilderStringString">
            <summary>设置 IterateTagHandler.Replace(StringBuilder buffer, String find, String replace) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.AllInstances.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 IterateTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.AllInstances.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 IterateTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.AllInstances.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 IterateTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimIterateTagHandler.AllInstances.IsPostParseRequiredGet">
            <summary>设置 IterateTagHandler.get_IsPostParseRequired() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.#ctor(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AddAttributeObjectObject">
            <summary>设置 SqlTagContext.AddAttribute(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AddParameterMappingParameterProperty">
            <summary>设置 SqlTagContext.AddParameterMapping(ParameterProperty mapping) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.BodyTextGet">
            <summary>设置 SqlTagContext.get_BodyText() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.Constructor">
            <summary>设置 SqlTagContext.SqlTagContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.FirstNonDynamicTagWithPrependGet">
            <summary>设置 SqlTagContext.get_FirstNonDynamicTagWithPrepend() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.FirstNonDynamicTagWithPrependSetSqlTag">
            <summary>设置 SqlTagContext.set_FirstNonDynamicTagWithPrepend(SqlTag value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.GetAttributeObject">
            <summary>设置 SqlTagContext.GetAttribute(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.GetParameterMappings">
            <summary>设置 SqlTagContext.GetParameterMappings() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.GetWriter">
            <summary>设置 SqlTagContext.GetWriter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.IsOverridePrependGet">
            <summary>设置 SqlTagContext.get_IsOverridePrepend() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.IsOverridePrependSetBoolean">
            <summary>设置 SqlTagContext.set_IsOverridePrepend(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.AddAttributeObjectObject">
            <summary>设置 SqlTagContext.AddAttribute(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.AddParameterMappingParameterProperty">
            <summary>设置 SqlTagContext.AddParameterMapping(ParameterProperty mapping) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.BodyTextGet">
            <summary>设置 SqlTagContext.get_BodyText() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.FirstNonDynamicTagWithPrependGet">
            <summary>设置 SqlTagContext.get_FirstNonDynamicTagWithPrepend() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.FirstNonDynamicTagWithPrependSetSqlTag">
            <summary>设置 SqlTagContext.set_FirstNonDynamicTagWithPrepend(SqlTag value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.GetAttributeObject">
            <summary>设置 SqlTagContext.GetAttribute(Object key) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.GetParameterMappings">
            <summary>设置 SqlTagContext.GetParameterMappings() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.GetWriter">
            <summary>设置 SqlTagContext.GetWriter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.IsOverridePrependGet">
            <summary>设置 SqlTagContext.get_IsOverridePrepend() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.ShimSqlTagContext.AllInstances.IsOverridePrependSetBoolean">
            <summary>设置 SqlTagContext.set_IsOverridePrepend(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 BaseTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 BaseTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.InitializeStub">
            <summary>初始化 type StubBaseTagHandler 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubBaseTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.InitializeStub">
            <summary>初始化 type StubConditionalTagHandler 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.IsCondition(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubConditionalTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.#ctor">
            <summary>初始化 type StubISqlTagHandler 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ISqlTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ISqlTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ISqlTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.ibndm::IBatisNet#DataMapper#Configuration#Sql#Dynamic#Handlers#ISqlTagHandler#DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ISqlTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.ibndm::IBatisNet#DataMapper#Configuration#Sql#Dynamic#Handlers#ISqlTagHandler#DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ISqlTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.ibndm::IBatisNet#DataMapper#Configuration#Sql#Dynamic#Handlers#ISqlTagHandler#DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ISqlTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.IsPostParseRequiredGet">
            <summary>设置 ISqlTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubISqlTagHandler.ibndm::IBatisNet#DataMapper#Configuration#Sql#Dynamic#Handlers#ISqlTagHandler#IsPostParseRequired">
            <summary>设置 ISqlTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEmptyTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.InitializeStub">
            <summary>初始化 type StubIsEmptyTagHandler 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.IsCondition(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 IsEmptyTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsEmptyTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEmptyTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEqualTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.InitializeStub">
            <summary>初始化 type StubIsEqualTagHandler 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.IsCondition(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 IsEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsEqualTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsEqualTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.InitializeStub">
            <summary>初始化 type StubIsNotPropertyAvailableTagHandler 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.IsCondition(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 IsNotPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNotPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNotPropertyAvailableTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNullTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.InitializeStub">
            <summary>初始化 type StubIsNullTagHandler 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.IsCondition(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 IsNullTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsNullTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsNullTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsParameterPresentTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.InitializeStub">
            <summary>初始化 type StubIsParameterPresentTagHandler 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.IsCondition(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 IsParameterPresentTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsParameterPresentTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsParameterPresentTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.#ctor(IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.DoEndFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.DoEndFragmentSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 ConditionalTagHandler.DoEndFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.DoPrepend(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.DoPrependSqlTagContextSqlTagObjectStringBuilder">
            <summary>设置 BaseTagHandler.DoPrepend(SqlTagContext ctx, SqlTag tag, Object parameterObject, StringBuilder bodyContent) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.DoStartFragment(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.DoStartFragmentSqlTagContextSqlTagObject">
            <summary>设置 ConditionalTagHandler.DoStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.InitializeStub">
            <summary>初始化 type StubIsPropertyAvailableTagHandler 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.IsCondition(IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,IBatisNet.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>设置 IsPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.IsConditionSqlTagContextSqlTagObject">
            <summary>设置 IsPropertyAvailableTagHandler.IsCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.IsPostParseRequiredGet">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Dynamic.Handlers.Fakes.StubIsPropertyAvailableTagHandler.IsPostParseRequired">
            <summary>设置 BaseTagHandler.get_IsPostParseRequired() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Fakes.StubISql">
            <summary>IBatisNet.DataMapper.Configuration.Sql.ISql 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Fakes.StubISql.#ctor">
            <summary>初始化 type StubISql 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Sql.Fakes.StubISql.GetRequestScopeIMappedStatementObjectIDalSession">
            <summary>设置 ISql.GetRequestScope(IMappedStatement mappedStatement, Object parameterObject, IDalSession session) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Fakes.StubISql.ibndm::IBatisNet#DataMapper#Configuration#Sql#ISql#GetRequestScope(IBatisNet.DataMapper.MappedStatements.IMappedStatement,System.Object,IBatisNet.Common.IDalSession)">
            <summary>设置 ISql.GetRequestScope(IMappedStatement mappedStatement, Object parameterObject, IDalSession session) 的 存根</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Static.ProcedureSql 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.#ctor(IBatisNet.DataMapper.Configuration.Sql.Static.ProcedureSql)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.Bind(IBatisNet.DataMapper.Configuration.Sql.ISql)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.BuildPreparedStatementIDalSessionRequestScopeString">
            <summary>设置 ProcedureSql.BuildPreparedStatement(IDalSession session, RequestScope request, String commandText) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.ConstructorIScopeStringIStatement">
            <summary>设置 ProcedureSql.ProcedureSql(IScope scope, String sqlStatement, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.GetRequestScopeIMappedStatementObjectIDalSession">
            <summary>设置 ProcedureSql.GetRequestScope(IMappedStatement mappedStatement, Object parameterObject, IDalSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.AllInstances.BuildPreparedStatementIDalSessionRequestScopeString">
            <summary>设置 ProcedureSql.BuildPreparedStatement(IDalSession session, RequestScope request, String commandText) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimProcedureSql.AllInstances.GetRequestScopeIMappedStatementObjectIDalSession">
            <summary>设置 ProcedureSql.GetRequestScope(IMappedStatement mappedStatement, Object parameterObject, IDalSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql">
            <summary>IBatisNet.DataMapper.Configuration.Sql.Static.StaticSql 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.#ctor(IBatisNet.DataMapper.Configuration.Sql.Static.StaticSql)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.Bind(IBatisNet.DataMapper.Configuration.Sql.ISql)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.BuildPreparedStatementIDalSessionString">
            <summary>设置 StaticSql.BuildPreparedStatement(IDalSession session, String sqlStatement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.ConstructorIScopeIStatement">
            <summary>设置 StaticSql.StaticSql(IScope scope, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.GetRequestScopeIMappedStatementObjectIDalSession">
            <summary>设置 StaticSql.GetRequestScope(IMappedStatement mappedStatement, Object parameterObject, IDalSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.AllInstances.BuildPreparedStatementIDalSessionString">
            <summary>设置 StaticSql.BuildPreparedStatement(IDalSession session, String sqlStatement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Sql.Static.Fakes.ShimStaticSql.AllInstances.GetRequestScopeIMappedStatementObjectIDalSession">
            <summary>设置 StaticSql.GetRequestScope(IMappedStatement mappedStatement, Object parameterObject, IDalSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Delete 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.#ctor(IBatisNet.DataMapper.Configuration.Statements.Delete)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.Constructor">
            <summary>设置 Delete.Delete() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.GenerateGet">
            <summary>设置 Delete.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.GenerateSetGenerate">
            <summary>设置 Delete.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.AllInstances.GenerateGet">
            <summary>设置 Delete.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimDelete.AllInstances.GenerateSetGenerate">
            <summary>设置 Delete.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Generate 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.#ctor(IBatisNet.DataMapper.Configuration.Statements.Generate)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.ByGet">
            <summary>设置 Generate.get_By() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.BySetString">
            <summary>设置 Generate.set_By(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.Constructor">
            <summary>设置 Generate.Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.TableGet">
            <summary>设置 Generate.get_Table() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.TableSetString">
            <summary>设置 Generate.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.AllInstances.ByGet">
            <summary>设置 Generate.get_By() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.AllInstances.BySetString">
            <summary>设置 Generate.set_By(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.AllInstances.TableGet">
            <summary>设置 Generate.get_Table() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimGenerate.AllInstances.TableSetString">
            <summary>设置 Generate.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Insert 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.#ctor(IBatisNet.DataMapper.Configuration.Statements.Insert)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.Constructor">
            <summary>设置 Insert.Insert() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.ExtendStatementGet">
            <summary>设置 Insert.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.ExtendStatementSetString">
            <summary>设置 Insert.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.GenerateGet">
            <summary>设置 Insert.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.GenerateSetGenerate">
            <summary>设置 Insert.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.SelectKeyGet">
            <summary>设置 Insert.get_SelectKey() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.SelectKeySetSelectKey">
            <summary>设置 Insert.set_SelectKey(SelectKey value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.AllInstances.ExtendStatementGet">
            <summary>设置 Insert.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.AllInstances.ExtendStatementSetString">
            <summary>设置 Insert.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.AllInstances.GenerateGet">
            <summary>设置 Insert.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.AllInstances.GenerateSetGenerate">
            <summary>设置 Insert.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.AllInstances.SelectKeyGet">
            <summary>设置 Insert.get_SelectKey() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimInsert.AllInstances.SelectKeySetSelectKey">
            <summary>设置 Insert.set_SelectKey(SelectKey value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement">
            <summary>IBatisNet.DataMapper.Configuration.Statements.PreparedStatement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.#ctor(IBatisNet.DataMapper.Configuration.Statements.PreparedStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.Constructor">
            <summary>设置 PreparedStatement.PreparedStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.DbParametersGet">
            <summary>设置 PreparedStatement.get_DbParameters() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.DbParametersNameGet">
            <summary>设置 PreparedStatement.get_DbParametersName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.DbParametersSetIDataParameterArray">
            <summary>设置 PreparedStatement.set_DbParameters(IDataParameter[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.PreparedSqlGet">
            <summary>设置 PreparedStatement.get_PreparedSql() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.PreparedSqlSetString">
            <summary>设置 PreparedStatement.set_PreparedSql(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.AllInstances.DbParametersGet">
            <summary>设置 PreparedStatement.get_DbParameters() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.AllInstances.DbParametersNameGet">
            <summary>设置 PreparedStatement.get_DbParametersName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.AllInstances.DbParametersSetIDataParameterArray">
            <summary>设置 PreparedStatement.set_DbParameters(IDataParameter[] value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.AllInstances.PreparedSqlGet">
            <summary>设置 PreparedStatement.get_PreparedSql() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatement.AllInstances.PreparedSqlSetString">
            <summary>设置 PreparedStatement.set_PreparedSql(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory">
            <summary>IBatisNet.DataMapper.Configuration.Statements.PreparedStatementFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.#ctor(IBatisNet.DataMapper.Configuration.Statements.PreparedStatementFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.ConstructorIDalSessionRequestScopeIStatementString">
            <summary>设置 PreparedStatementFactory.PreparedStatementFactory(IDalSession session, RequestScope request, IStatement statement, String commandText) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.CreateParametersForProcedureCommand">
            <summary>设置 PreparedStatementFactory.CreateParametersForProcedureCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.CreateParametersForTextCommand">
            <summary>设置 PreparedStatementFactory.CreateParametersForTextCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.DiscoverParameterSqlMapSession">
            <summary>设置 PreparedStatementFactory.DiscoverParameter(SqlMapSession session) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.EvaluateParameterMap">
            <summary>设置 PreparedStatementFactory.EvaluateParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.Prepare">
            <summary>设置 PreparedStatementFactory.Prepare() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.StaticConstructor">
            <summary>设置 PreparedStatementFactory.PreparedStatementFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.AllInstances.CreateParametersForProcedureCommand">
            <summary>设置 PreparedStatementFactory.CreateParametersForProcedureCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.AllInstances.CreateParametersForTextCommand">
            <summary>设置 PreparedStatementFactory.CreateParametersForTextCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.AllInstances.DiscoverParameterSqlMapSession">
            <summary>设置 PreparedStatementFactory.DiscoverParameter(SqlMapSession session) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.AllInstances.EvaluateParameterMap">
            <summary>设置 PreparedStatementFactory.EvaluateParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimPreparedStatementFactory.AllInstances.Prepare">
            <summary>设置 PreparedStatementFactory.Prepare() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Procedure 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.#ctor(IBatisNet.DataMapper.Configuration.Statements.Procedure)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.CommandTypeGet">
            <summary>设置 Procedure.get_CommandType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.Constructor">
            <summary>设置 Procedure.Procedure() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.ExtendStatementGet">
            <summary>设置 Procedure.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.ExtendStatementSetString">
            <summary>设置 Procedure.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.InitializeConfigurationScope">
            <summary>设置 Procedure.Initialize(ConfigurationScope configurationScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.AllInstances.CommandTypeGet">
            <summary>设置 Procedure.get_CommandType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.AllInstances.ExtendStatementGet">
            <summary>设置 Procedure.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.AllInstances.ExtendStatementSetString">
            <summary>设置 Procedure.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimProcedure.AllInstances.InitializeConfigurationScope">
            <summary>设置 Procedure.Initialize(ConfigurationScope configurationScope) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Select 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.#ctor(IBatisNet.DataMapper.Configuration.Statements.Select)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.Constructor">
            <summary>设置 Select.Select() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.GenerateGet">
            <summary>设置 Select.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.GenerateSetGenerate">
            <summary>设置 Select.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.AllInstances.GenerateGet">
            <summary>设置 Select.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelect.AllInstances.GenerateSetGenerate">
            <summary>设置 Select.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey">
            <summary>IBatisNet.DataMapper.Configuration.Statements.SelectKey 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.#ctor(IBatisNet.DataMapper.Configuration.Statements.SelectKey)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.Constructor">
            <summary>设置 SelectKey.SelectKey() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.ExtendStatementGet">
            <summary>设置 SelectKey.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.ExtendStatementSetString">
            <summary>设置 SelectKey.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.InitializeConfigurationScope">
            <summary>设置 SelectKey.Initialize(ConfigurationScope configurationScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.PropertyNameGet">
            <summary>设置 SelectKey.get_PropertyName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.PropertyNameSetString">
            <summary>设置 SelectKey.set_PropertyName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.SelectKeyTypeGet">
            <summary>设置 SelectKey.get_SelectKeyType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.SelectKeyTypeSetSelectKeyType">
            <summary>设置 SelectKey.set_SelectKeyType(SelectKeyType value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.isAfterGet">
            <summary>设置 SelectKey.get_isAfter() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.ExtendStatementGet">
            <summary>设置 SelectKey.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.ExtendStatementSetString">
            <summary>设置 SelectKey.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.InitializeConfigurationScope">
            <summary>设置 SelectKey.Initialize(ConfigurationScope configurationScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.PropertyNameGet">
            <summary>设置 SelectKey.get_PropertyName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.PropertyNameSetString">
            <summary>设置 SelectKey.set_PropertyName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.SelectKeyTypeGet">
            <summary>设置 SelectKey.get_SelectKeyType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.SelectKeyTypeSetSelectKeyType">
            <summary>设置 SelectKey.set_SelectKeyType(SelectKeyType value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSelectKey.AllInstances.isAfterGet">
            <summary>设置 SelectKey.get_isAfter() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator">
            <summary>IBatisNet.DataMapper.Configuration.Statements.SqlGenerator 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.#ctor(IBatisNet.DataMapper.Configuration.Statements.SqlGenerator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.BuildDeleteQueryIStatement">
            <summary>设置 SqlGenerator.BuildDeleteQuery(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.BuildInsertQueryIStatement">
            <summary>设置 SqlGenerator.BuildInsertQuery(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.BuildQueryIStatement">
            <summary>设置 SqlGenerator.BuildQuery(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.BuildSelectQueryIStatement">
            <summary>设置 SqlGenerator.BuildSelectQuery(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.BuildUpdateQueryIStatement">
            <summary>设置 SqlGenerator.BuildUpdateQuery(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.Constructor">
            <summary>设置 SqlGenerator.SqlGenerator() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimSqlGenerator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Statement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.#ctor(IBatisNet.DataMapper.Configuration.Statements.Statement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CreateInstanceOfGenericListClassOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0}})">
            <summary>设置 Statement.CreateInstanceOfGenericListClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CacheModelGet">
            <summary>设置 Statement.get_CacheModel() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CacheModelNameGet">
            <summary>设置 Statement.get_CacheModelName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CacheModelNameSetString">
            <summary>设置 Statement.set_CacheModelName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CacheModelSetCacheModel">
            <summary>设置 Statement.set_CacheModel(CacheModel value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.Constructor">
            <summary>设置 Statement.Statement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CreateInstanceOfListClass">
            <summary>设置 Statement.CreateInstanceOfListClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.CreateInstanceOfResultClass">
            <summary>设置 Statement.CreateInstanceOfResultClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ExtendStatementGet">
            <summary>设置 Statement.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ExtendStatementSetString">
            <summary>设置 Statement.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.HasCacheModelGet">
            <summary>设置 Statement.get_HasCacheModel() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.IdGet">
            <summary>设置 Statement.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.IdSetString">
            <summary>设置 Statement.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.InitializeConfigurationScope">
            <summary>设置 Statement.Initialize(ConfigurationScope configurationScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ListClassGet">
            <summary>设置 Statement.get_ListClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ListClassNameGet">
            <summary>设置 Statement.get_ListClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ListClassNameSetString">
            <summary>设置 Statement.set_ListClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ParameterClassGet">
            <summary>设置 Statement.get_ParameterClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ParameterClassNameGet">
            <summary>设置 Statement.get_ParameterClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ParameterClassNameSetString">
            <summary>设置 Statement.set_ParameterClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ParameterMapGet">
            <summary>设置 Statement.get_ParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ParameterMapNameGet">
            <summary>设置 Statement.get_ParameterMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ParameterMapNameSetString">
            <summary>设置 Statement.set_ParameterMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ParameterMapSetParameterMap">
            <summary>设置 Statement.set_ParameterMap(ParameterMap value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.RemapResultsGet">
            <summary>设置 Statement.get_RemapResults() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.RemapResultsSetBoolean">
            <summary>设置 Statement.set_RemapResults(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ResultClassGet">
            <summary>设置 Statement.get_ResultClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ResultClassNameGet">
            <summary>设置 Statement.get_ResultClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ResultClassNameSetString">
            <summary>设置 Statement.set_ResultClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ResultMapGet">
            <summary>设置 Statement.get_ResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ResultMapNameGet">
            <summary>设置 Statement.get_ResultMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.ResultMapNameSetString">
            <summary>设置 Statement.set_ResultMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.SqlGet">
            <summary>设置 Statement.get_Sql() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.SqlSetISql">
            <summary>设置 Statement.set_Sql(ISql value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CreateInstanceOfGenericListClassOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.Configuration.Statements.Statement,System.Collections.Generic.IList{``0}})">
            <summary>设置 Statement.CreateInstanceOfGenericListClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CacheModelGet">
            <summary>设置 Statement.get_CacheModel() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CacheModelNameGet">
            <summary>设置 Statement.get_CacheModelName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CacheModelNameSetString">
            <summary>设置 Statement.set_CacheModelName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CacheModelSetCacheModel">
            <summary>设置 Statement.set_CacheModel(CacheModel value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CreateInstanceOfListClass">
            <summary>设置 Statement.CreateInstanceOfListClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.CreateInstanceOfResultClass">
            <summary>设置 Statement.CreateInstanceOfResultClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ExtendStatementGet">
            <summary>设置 Statement.get_ExtendStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ExtendStatementSetString">
            <summary>设置 Statement.set_ExtendStatement(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.HasCacheModelGet">
            <summary>设置 Statement.get_HasCacheModel() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.IdGet">
            <summary>设置 Statement.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.IdSetString">
            <summary>设置 Statement.set_Id(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.InitializeConfigurationScope">
            <summary>设置 Statement.Initialize(ConfigurationScope configurationScope) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ListClassGet">
            <summary>设置 Statement.get_ListClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ListClassNameGet">
            <summary>设置 Statement.get_ListClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ListClassNameSetString">
            <summary>设置 Statement.set_ListClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ParameterClassGet">
            <summary>设置 Statement.get_ParameterClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ParameterClassNameGet">
            <summary>设置 Statement.get_ParameterClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ParameterClassNameSetString">
            <summary>设置 Statement.set_ParameterClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ParameterMapGet">
            <summary>设置 Statement.get_ParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ParameterMapNameGet">
            <summary>设置 Statement.get_ParameterMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ParameterMapNameSetString">
            <summary>设置 Statement.set_ParameterMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ParameterMapSetParameterMap">
            <summary>设置 Statement.set_ParameterMap(ParameterMap value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.RemapResultsGet">
            <summary>设置 Statement.get_RemapResults() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.RemapResultsSetBoolean">
            <summary>设置 Statement.set_RemapResults(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ResultClassGet">
            <summary>设置 Statement.get_ResultClass() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ResultClassNameGet">
            <summary>设置 Statement.get_ResultClassName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ResultClassNameSetString">
            <summary>设置 Statement.set_ResultClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ResultMapGet">
            <summary>设置 Statement.get_ResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ResultMapNameGet">
            <summary>设置 Statement.get_ResultMapName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.ResultMapNameSetString">
            <summary>设置 Statement.set_ResultMapName(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.SqlGet">
            <summary>设置 Statement.get_Sql() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimStatement.AllInstances.SqlSetISql">
            <summary>设置 Statement.set_Sql(ISql value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Update 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.#ctor(IBatisNet.DataMapper.Configuration.Statements.Update)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.Bind(IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.Constructor">
            <summary>设置 Update.Update() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.GenerateGet">
            <summary>设置 Update.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.GenerateSetGenerate">
            <summary>设置 Update.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.AllInstances.GenerateGet">
            <summary>设置 Update.get_Generate() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.ShimUpdate.AllInstances.GenerateSetGenerate">
            <summary>设置 Update.set_Generate(Generate value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Delete 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubDelete.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.ExtendStatementGet">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.ExtendStatementSetString">
            <summary>设置 Statement.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.InitializeStub">
            <summary>初始化 type StubDelete 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.CommandType">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.ExtendStatement">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubDelete.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Generate 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubGenerate.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.ExtendStatementGet">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.ExtendStatementSetString">
            <summary>设置 Statement.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.InitializeStub">
            <summary>初始化 type StubGenerate 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.CommandType">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.ExtendStatement">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubGenerate.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement">
            <summary>IBatisNet.DataMapper.Configuration.Statements.IStatement 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.#ctor">
            <summary>初始化 type StubIStatement 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.AttachBackingFieldToCacheModel">
            <summary>附加委托以将 StubIStatement.CacheModel 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.AttachBackingFieldToCacheModelName">
            <summary>附加委托以将 StubIStatement.CacheModelName 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubIStatement.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.AttachBackingFieldToId">
            <summary>附加委托以将 StubIStatement.Id 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.AttachBackingFieldToParameterMap">
            <summary>附加委托以将 StubIStatement.ParameterMap 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.AttachBackingFieldToRemapResults">
            <summary>附加委托以将 StubIStatement.RemapResults 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.AttachBackingFieldToSql">
            <summary>附加委托以将 StubIStatement.Sql 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CacheModelGet">
            <summary>设置 IStatement.get_CacheModel() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CacheModelNameGet">
            <summary>设置 IStatement.get_CacheModelName() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CacheModelNameSetString">
            <summary>设置 IStatement.set_CacheModelName(String value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CacheModelSetCacheModel">
            <summary>设置 IStatement.set_CacheModel(CacheModel value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CommandTypeGet">
            <summary>设置 IStatement.get_CommandType() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CreateInstanceOfGenericListClassOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0}})">
            <summary>设置 CreateInstanceOfGenericListClass() 的存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CreateInstanceOfListClass">
            <summary>设置 IStatement.CreateInstanceOfListClass() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.CreateInstanceOfResultClass">
            <summary>设置 IStatement.CreateInstanceOfResultClass() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ExtendStatementGet">
            <summary>设置 IStatement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ExtendStatementSetString">
            <summary>设置 IStatement.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#CreateInstanceOfGenericListClass``1">
            <summary>设置 IStatement.CreateInstanceOfGenericListClass() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#CreateInstanceOfListClass">
            <summary>设置 IStatement.CreateInstanceOfListClass() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#CreateInstanceOfResultClass">
            <summary>设置 IStatement.CreateInstanceOfResultClass() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.IdGet">
            <summary>设置 IStatement.get_Id() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.IdSetString">
            <summary>设置 IStatement.set_Id(String value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ListClassGet">
            <summary>设置 IStatement.get_ListClass() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ParameterClassGet">
            <summary>设置 IStatement.get_ParameterClass() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ParameterMapGet">
            <summary>设置 IStatement.get_ParameterMap() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ParameterMapSetParameterMap">
            <summary>设置 IStatement.set_ParameterMap(ParameterMap value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.RemapResultsGet">
            <summary>设置 IStatement.get_RemapResults() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.RemapResultsSetBoolean">
            <summary>设置 IStatement.set_RemapResults(Boolean value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ResultClassGet">
            <summary>设置 IStatement.get_ResultClass() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ResultMapGet">
            <summary>设置 IStatement.get_ResultMap() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.SqlGet">
            <summary>设置 IStatement.get_Sql() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.SqlSetISql">
            <summary>设置 IStatement.set_Sql(ISql value) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#CacheModel">
            <summary>设置 IStatement.get_CacheModel() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#CacheModelName">
            <summary>设置 IStatement.get_CacheModelName() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#CommandType">
            <summary>设置 IStatement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#ExtendStatement">
            <summary>设置 IStatement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#Id">
            <summary>设置 IStatement.get_Id() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#ListClass">
            <summary>设置 IStatement.get_ListClass() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#ParameterClass">
            <summary>设置 IStatement.get_ParameterClass() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#ParameterMap">
            <summary>设置 IStatement.get_ParameterMap() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#RemapResults">
            <summary>设置 IStatement.get_RemapResults() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#ResultClass">
            <summary>设置 IStatement.get_ResultClass() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#ResultMap">
            <summary>设置 IStatement.get_ResultMap() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubIStatement.ibndm::IBatisNet#DataMapper#Configuration#Statements#IStatement#Sql">
            <summary>设置 IStatement.get_Sql() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Insert 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubInsert.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.ExtendStatementGet">
            <summary>设置 Insert.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.ExtendStatementSetString">
            <summary>设置 Insert.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.InitializeStub">
            <summary>初始化 type StubInsert 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.CommandType">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.ExtendStatement">
            <summary>设置 Insert.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubInsert.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatement">
            <summary>IBatisNet.DataMapper.Configuration.Statements.PreparedStatement 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatement.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatement.InitializeStub">
            <summary>初始化 type StubPreparedStatement 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatementFactory">
            <summary>IBatisNet.DataMapper.Configuration.Statements.PreparedStatementFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatementFactory.#ctor(IBatisNet.Common.IDalSession,IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.DataMapper.Configuration.Statements.IStatement,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatementFactory.InitializeStub">
            <summary>初始化 type StubPreparedStatementFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatementFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatementFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubPreparedStatementFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Procedure 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubProcedure.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.CommandTypeGet">
            <summary>设置 Procedure.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.ExtendStatementGet">
            <summary>设置 Procedure.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.ExtendStatementSetString">
            <summary>设置 Procedure.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.InitializeStub">
            <summary>初始化 type StubProcedure 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.CommandType">
            <summary>设置 Procedure.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.ExtendStatement">
            <summary>设置 Procedure.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubProcedure.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Select 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubSelect.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.ExtendStatementGet">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.ExtendStatementSetString">
            <summary>设置 Statement.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.InitializeStub">
            <summary>初始化 type StubSelect 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.CommandType">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.ExtendStatement">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelect.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey">
            <summary>IBatisNet.DataMapper.Configuration.Statements.SelectKey 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubSelectKey.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.ExtendStatementGet">
            <summary>设置 SelectKey.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.ExtendStatementSetString">
            <summary>设置 SelectKey.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.InitializeStub">
            <summary>初始化 type StubSelectKey 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.CommandType">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.ExtendStatement">
            <summary>设置 SelectKey.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSelectKey.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSqlGenerator">
            <summary>IBatisNet.DataMapper.Configuration.Statements.SqlGenerator 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSqlGenerator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSqlGenerator.InitializeStub">
            <summary>初始化 type StubSqlGenerator 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSqlGenerator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSqlGenerator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubSqlGenerator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Statement 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubStatement.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.ExtendStatementGet">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.ExtendStatementSetString">
            <summary>设置 Statement.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.InitializeStub">
            <summary>初始化 type StubStatement 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.CommandType">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.ExtendStatement">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate">
            <summary>IBatisNet.DataMapper.Configuration.Statements.Update 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.AttachBackingFieldToExtendStatement">
            <summary>附加委托以将 StubUpdate.ExtendStatement 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.CommandTypeGet">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.ExtendStatementGet">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.ExtendStatementSetString">
            <summary>设置 Statement.set_ExtendStatement(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.InitializeStub">
            <summary>初始化 type StubUpdate 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.CommandType">
            <summary>设置 Statement.get_CommandType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.ExtendStatement">
            <summary>设置 Statement.get_ExtendStatement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Configuration.Statements.Fakes.StubUpdate.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.BaseDataExchange 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.#ctor(IBatisNet.DataMapper.DataExchange.BaseDataExchange)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.Bind(IBatisNet.DataMapper.DataExchange.IDataExchange)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.ConstructorDataExchangeFactory">
            <summary>设置 BaseDataExchange.BaseDataExchange(DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.DataExchangeFactoryGet">
            <summary>设置 BaseDataExchange.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimBaseDataExchange.AllInstances.DataExchangeFactoryGet">
            <summary>设置 BaseDataExchange.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.ComplexDataExchange 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.#ctor(IBatisNet.DataMapper.DataExchange.ComplexDataExchange)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.Bind(IBatisNet.DataMapper.DataExchange.IDataExchange)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.ConstructorDataExchangeFactory">
            <summary>设置 ComplexDataExchange.ComplexDataExchange(DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.GetDataParameterPropertyObject">
            <summary>设置 ComplexDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimComplexDataExchange.AllInstances.GetDataParameterPropertyObject">
            <summary>设置 ComplexDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory">
            <summary>IBatisNet.DataMapper.DataExchange.DataExchangeFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.#ctor(IBatisNet.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.AccessorFactoryGet">
            <summary>设置 DataExchangeFactory.get_AccessorFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.ConstructorTypeHandlerFactoryIObjectFactoryAccessorFactory">
            <summary>设置 DataExchangeFactory.DataExchangeFactory(TypeHandlerFactory typeHandlerFactory, IObjectFactory objectFactory, AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.GetDataExchangeForClassType">
            <summary>设置 DataExchangeFactory.GetDataExchangeForClass(Type clazz) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.IsImplementGenericIListInterfaceType">
            <summary>设置 DataExchangeFactory.IsImplementGenericIListInterface(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.ObjectFactoryGet">
            <summary>设置 DataExchangeFactory.get_ObjectFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.TypeHandlerFactoryGet">
            <summary>设置 DataExchangeFactory.get_TypeHandlerFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.AllInstances.AccessorFactoryGet">
            <summary>设置 DataExchangeFactory.get_AccessorFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.AllInstances.GetDataExchangeForClassType">
            <summary>设置 DataExchangeFactory.GetDataExchangeForClass(Type clazz) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.AllInstances.IsImplementGenericIListInterfaceType">
            <summary>设置 DataExchangeFactory.IsImplementGenericIListInterface(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.AllInstances.ObjectFactoryGet">
            <summary>设置 DataExchangeFactory.get_ObjectFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDataExchangeFactory.AllInstances.TypeHandlerFactoryGet">
            <summary>设置 DataExchangeFactory.get_TypeHandlerFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.DictionaryDataExchange 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.#ctor(IBatisNet.DataMapper.DataExchange.DictionaryDataExchange)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.Bind(IBatisNet.DataMapper.DataExchange.IDataExchange)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.ConstructorDataExchangeFactory">
            <summary>设置 DictionaryDataExchange.DictionaryDataExchange(DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.GetDataParameterPropertyObject">
            <summary>设置 DictionaryDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDictionaryDataExchange.AllInstances.GetDataParameterPropertyObject">
            <summary>设置 DictionaryDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.DotNetObjectDataExchange 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.#ctor(IBatisNet.DataMapper.DataExchange.DotNetObjectDataExchange)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.Bind(IBatisNet.DataMapper.DataExchange.IDataExchange)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.ConstructorTypeDataExchangeFactory">
            <summary>设置 DotNetObjectDataExchange.DotNetObjectDataExchange(Type parameterClass, DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.GetDataParameterPropertyObject">
            <summary>设置 DotNetObjectDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimDotNetObjectDataExchange.AllInstances.GetDataParameterPropertyObject">
            <summary>设置 DotNetObjectDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.ListDataExchange 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.#ctor(IBatisNet.DataMapper.DataExchange.ListDataExchange)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.Bind(IBatisNet.DataMapper.DataExchange.IDataExchange)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.ConstructorDataExchangeFactory">
            <summary>设置 ListDataExchange.ListDataExchange(DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.GetDataParameterPropertyObject">
            <summary>设置 ListDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimListDataExchange.AllInstances.GetDataParameterPropertyObject">
            <summary>设置 ListDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.PrimitiveDataExchange 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.#ctor(IBatisNet.DataMapper.DataExchange.PrimitiveDataExchange)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.Bind(IBatisNet.DataMapper.DataExchange.IDataExchange)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.ConstructorDataExchangeFactory">
            <summary>设置 PrimitiveDataExchange.PrimitiveDataExchange(DataExchangeFactory dataExchangeFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.GetDataParameterPropertyObject">
            <summary>设置 PrimitiveDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.ShimPrimitiveDataExchange.AllInstances.GetDataParameterPropertyObject">
            <summary>设置 PrimitiveDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.BaseDataExchange 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.#ctor(IBatisNet.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.GetData(IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>设置 BaseDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.GetDataParameterPropertyObject">
            <summary>设置 BaseDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.InitializeStub">
            <summary>初始化 type StubBaseDataExchange 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.SetData(System.Object@,IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>设置 BaseDataExchange.SetData(Object&amp; target, ParameterProperty mapping, Object dataBaseValue) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.SetData(System.Object@,IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>设置 BaseDataExchange.SetData(Object&amp; target, ResultProperty mapping, Object dataBaseValue) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.SetDataObjectRefParameterPropertyObject">
            <summary>设置 BaseDataExchange.SetData(Object&amp; target, ParameterProperty mapping, Object dataBaseValue) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.SetDataObjectRefResultPropertyObject">
            <summary>设置 BaseDataExchange.SetData(Object&amp; target, ResultProperty mapping, Object dataBaseValue) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.StubBaseDataExchange.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.StubDataExchangeFactory">
            <summary>IBatisNet.DataMapper.DataExchange.DataExchangeFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubDataExchangeFactory.#ctor(IBatisNet.DataMapper.TypeHandlers.TypeHandlerFactory,IBatisNet.Common.Utilities.Objects.IObjectFactory,IBatisNet.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubDataExchangeFactory.InitializeStub">
            <summary>初始化 type StubDataExchangeFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.StubDataExchangeFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.StubDataExchangeFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.DataExchange.Fakes.StubDataExchangeFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange">
            <summary>IBatisNet.DataMapper.DataExchange.IDataExchange 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange.#ctor">
            <summary>初始化 type StubIDataExchange 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange.GetDataParameterPropertyObject">
            <summary>设置 IDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange.ibndm::IBatisNet#DataMapper#DataExchange#IDataExchange#GetData(IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>设置 IDataExchange.GetData(ParameterProperty mapping, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange.ibndm::IBatisNet#DataMapper#DataExchange#IDataExchange#SetData(System.Object@,IBatisNet.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>设置 IDataExchange.SetData(Object&amp; target, ParameterProperty mapping, Object dataBaseValue) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange.ibndm::IBatisNet#DataMapper#DataExchange#IDataExchange#SetData(System.Object@,IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>设置 IDataExchange.SetData(Object&amp; target, ResultProperty mapping, Object dataBaseValue) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange.SetDataObjectRefParameterPropertyObject">
            <summary>设置 IDataExchange.SetData(Object&amp; target, ParameterProperty mapping, Object dataBaseValue) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.DataExchange.Fakes.StubIDataExchange.SetDataObjectRefResultPropertyObject">
            <summary>设置 IDataExchange.SetData(Object&amp; target, ResultProperty mapping, Object dataBaseValue) 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException">
            <summary>IBatisNet.DataMapper.Exceptions.DataMapperException 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.#ctor(IBatisNet.DataMapper.Exceptions.DataMapperException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.Constructor">
            <summary>设置 DataMapperException.DataMapperException() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.ConstructorException">
            <summary>设置 DataMapperException.DataMapperException(Exception ex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 DataMapperException.DataMapperException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.ConstructorString">
            <summary>设置 DataMapperException.DataMapperException(String message) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.ConstructorStringException">
            <summary>设置 DataMapperException.DataMapperException(String message, Exception inner) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Exceptions.Fakes.ShimDataMapperException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException">
            <summary>IBatisNet.DataMapper.Exceptions.DataMapperException 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.#ctor(System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubDataMapperException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubDataMapperException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.InitializeStub">
            <summary>初始化 type StubDataMapperException 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Exceptions.Fakes.StubDataMapperException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs">
            <summary>IBatisNet.DataMapper.ExecuteEventArgs 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.#ctor(IBatisNet.DataMapper.ExecuteEventArgs)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.Constructor">
            <summary>设置 ExecuteEventArgs.ExecuteEventArgs() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.StatementNameGet">
            <summary>设置 ExecuteEventArgs.get_StatementName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.StatementNameSetString">
            <summary>设置 ExecuteEventArgs.set_StatementName(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.AllInstances.StatementNameGet">
            <summary>设置 ExecuteEventArgs.get_StatementName() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimExecuteEventArgs.AllInstances.StatementNameSetString">
            <summary>设置 ExecuteEventArgs.set_StatementName(String value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimMapper">
            <summary>IBatisNet.DataMapper.Mapper 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimMapper.#ctor(IBatisNet.DataMapper.Mapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimMapper.ConfigureObject">
            <summary>设置 Mapper.Configure(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimMapper.Constructor">
            <summary>设置 Mapper.Mapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimMapper.Get">
            <summary>设置 Mapper.Get() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimMapper.InitMapper">
            <summary>设置 Mapper.InitMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimMapper.Instance">
            <summary>设置 Mapper.Instance() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimSqlMapSession">
            <summary>IBatisNet.DataMapper.SqlMapSession 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.#ctor(IBatisNet.DataMapper.SqlMapSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.Bind(IBatisNet.Common.IDalSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BeginTransaction">
            <summary>设置 SqlMapSession.BeginTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BeginTransactionBoolean">
            <summary>设置 SqlMapSession.BeginTransaction(Boolean openConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BeginTransactionBooleanIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(Boolean openConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BeginTransactionIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BeginTransactionString">
            <summary>设置 SqlMapSession.BeginTransaction(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BeginTransactionStringBooleanIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(String connectionString, Boolean openConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.BeginTransactionStringIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(String connectionString, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.CloseConnection">
            <summary>设置 SqlMapSession.CloseConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.CommitTransaction">
            <summary>设置 SqlMapSession.CommitTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.CommitTransactionBoolean">
            <summary>设置 SqlMapSession.CommitTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.Complete">
            <summary>设置 SqlMapSession.Complete() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.ConnectionGet">
            <summary>设置 SqlMapSession.get_Connection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.ConsistentSetBoolean">
            <summary>设置 SqlMapSession.set_Consistent(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.ConstructorISqlMapper">
            <summary>设置 SqlMapSession.SqlMapSession(ISqlMapper sqlMapper) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.CreateCommandCommandType">
            <summary>设置 SqlMapSession.CreateCommand(CommandType commandType) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.CreateDataAdapter">
            <summary>设置 SqlMapSession.CreateDataAdapter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.CreateDataAdapterIDbCommand">
            <summary>设置 SqlMapSession.CreateDataAdapter(IDbCommand command) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.CreateDataParameter">
            <summary>设置 SqlMapSession.CreateDataParameter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.DataSourceGet">
            <summary>设置 SqlMapSession.get_DataSource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.Dispose">
            <summary>设置 SqlMapSession.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.OpenConnection">
            <summary>设置 SqlMapSession.OpenConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.OpenConnectionString">
            <summary>设置 SqlMapSession.OpenConnection(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.RollBackTransaction">
            <summary>设置 SqlMapSession.RollBackTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.RollBackTransactionBoolean">
            <summary>设置 SqlMapSession.RollBackTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.SqlMapperGet">
            <summary>设置 SqlMapSession.get_SqlMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.StaticConstructor">
            <summary>设置 SqlMapSession.SqlMapSession() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.TransactionGet">
            <summary>设置 SqlMapSession.get_Transaction() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.BeginTransaction">
            <summary>设置 SqlMapSession.BeginTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.BeginTransactionBoolean">
            <summary>设置 SqlMapSession.BeginTransaction(Boolean openConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.BeginTransactionBooleanIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(Boolean openConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.BeginTransactionIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.BeginTransactionString">
            <summary>设置 SqlMapSession.BeginTransaction(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.BeginTransactionStringBooleanIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(String connectionString, Boolean openConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.BeginTransactionStringIsolationLevel">
            <summary>设置 SqlMapSession.BeginTransaction(String connectionString, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.CloseConnection">
            <summary>设置 SqlMapSession.CloseConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.CommitTransaction">
            <summary>设置 SqlMapSession.CommitTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.CommitTransactionBoolean">
            <summary>设置 SqlMapSession.CommitTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.Complete">
            <summary>设置 SqlMapSession.Complete() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.ConnectionGet">
            <summary>设置 SqlMapSession.get_Connection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.ConsistentSetBoolean">
            <summary>设置 SqlMapSession.set_Consistent(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.CreateCommandCommandType">
            <summary>设置 SqlMapSession.CreateCommand(CommandType commandType) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.CreateDataAdapter">
            <summary>设置 SqlMapSession.CreateDataAdapter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.CreateDataAdapterIDbCommand">
            <summary>设置 SqlMapSession.CreateDataAdapter(IDbCommand command) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.CreateDataParameter">
            <summary>设置 SqlMapSession.CreateDataParameter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.DataSourceGet">
            <summary>设置 SqlMapSession.get_DataSource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.Dispose">
            <summary>设置 SqlMapSession.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.OpenConnection">
            <summary>设置 SqlMapSession.OpenConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.OpenConnectionString">
            <summary>设置 SqlMapSession.OpenConnection(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.RollBackTransaction">
            <summary>设置 SqlMapSession.RollBackTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.RollBackTransactionBoolean">
            <summary>设置 SqlMapSession.RollBackTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.SqlMapperGet">
            <summary>设置 SqlMapSession.get_SqlMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapSession.AllInstances.TransactionGet">
            <summary>设置 SqlMapSession.get_Transaction() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimSqlMapper">
            <summary>IBatisNet.DataMapper.SqlMapper 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.#ctor(IBatisNet.DataMapper.SqlMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.Bind(IBatisNet.DataMapper.ISqlMapper)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForListOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForListOf1StringObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForListOf1StringObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForObjectOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,``0})">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForObjectOf1StringObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,``0,``0})">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject, !!0 instanceObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryWithRowDelegateOf1StringObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AccessorFactoryGet">
            <summary>设置 SqlMapper.get_AccessorFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AddCacheCacheModel">
            <summary>设置 SqlMapper.AddCache(CacheModel cache) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AddMappedStatementStringIMappedStatement">
            <summary>设置 SqlMapper.AddMappedStatement(String key, IMappedStatement mappedStatement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AddParameterMapParameterMap">
            <summary>设置 SqlMapper.AddParameterMap(ParameterMap parameterMap) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AddResultMapResultMap">
            <summary>设置 SqlMapper.AddResultMap(ResultMap resultMap) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BeginTransaction">
            <summary>设置 SqlMapper.BeginTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BeginTransactionBoolean">
            <summary>设置 SqlMapper.BeginTransaction(Boolean openConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BeginTransactionBooleanIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(Boolean openNewConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BeginTransactionIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BeginTransactionString">
            <summary>设置 SqlMapper.BeginTransaction(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BeginTransactionStringBooleanIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(String connectionString, Boolean openNewConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.BeginTransactionStringIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(String connectionString, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.CacheModelsEnabledSetBoolean">
            <summary>设置 SqlMapper.set_CacheModelsEnabled(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.CloseConnection">
            <summary>设置 SqlMapper.CloseConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.CommitTransaction">
            <summary>设置 SqlMapper.CommitTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.CommitTransactionBoolean">
            <summary>设置 SqlMapper.CommitTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.Configure">
            <summary>设置 SqlMapper.Configure() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ConfigureAndWatchConfigureHandler">
            <summary>设置 SqlMapper.ConfigureAndWatch(ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ConfigureAndWatchStringConfigureHandler">
            <summary>设置 SqlMapper.ConfigureAndWatch(String resource, ConfigureHandler configureDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ConfigureString">
            <summary>设置 SqlMapper.Configure(String resource) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ConfigureXmlDocument">
            <summary>设置 SqlMapper.Configure(XmlDocument document) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ConstructorIObjectFactoryAccessorFactory">
            <summary>设置 SqlMapper.SqlMapper(IObjectFactory objectFactory, AccessorFactory accessorFactory) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.DataExchangeFactoryGet">
            <summary>设置 SqlMapper.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.DataSourceGet">
            <summary>设置 SqlMapper.get_DataSource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.DataSourceSetIDataSource">
            <summary>设置 SqlMapper.set_DataSource(IDataSource value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.DeleteStringObject">
            <summary>设置 SqlMapper.Delete(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.FlushCaches">
            <summary>设置 SqlMapper.FlushCaches() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.GetCacheString">
            <summary>设置 SqlMapper.GetCache(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.GetDataCacheStats">
            <summary>设置 SqlMapper.GetDataCacheStats() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.GetMappedStatementString">
            <summary>设置 SqlMapper.GetMappedStatement(String id) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.GetParameterMapString">
            <summary>设置 SqlMapper.GetParameterMap(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.GetResultMapString">
            <summary>设置 SqlMapper.GetResultMap(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.InsertStringObject">
            <summary>设置 SqlMapper.Insert(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.IsCacheModelsEnabledGet">
            <summary>设置 SqlMapper.get_IsCacheModelsEnabled() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.IsSessionStartedGet">
            <summary>设置 SqlMapper.get_IsSessionStarted() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.LocalSessionGet">
            <summary>设置 SqlMapper.get_LocalSession() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.MappedStatementsGet">
            <summary>设置 SqlMapper.get_MappedStatements() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ObjectFactoryGet">
            <summary>设置 SqlMapper.get_ObjectFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.OpenConnection">
            <summary>设置 SqlMapper.OpenConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.OpenConnectionString">
            <summary>设置 SqlMapper.OpenConnection(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ParameterMapsGet">
            <summary>设置 SqlMapper.get_ParameterMaps() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForDictionaryStringObjectString">
            <summary>设置 SqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForDictionaryStringObjectStringString">
            <summary>设置 SqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForListStringObject">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForListStringObjectIList">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForListStringObjectInt32Int32">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForMapStringObjectString">
            <summary>设置 SqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForMapStringObjectStringString">
            <summary>设置 SqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForMapWithRowDelegateStringObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 SqlMapper.QueryForMapWithRowDelegate(String statementName, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForObjectStringObject">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForObjectStringObjectObject">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryForPaginatedListStringObjectInt32">
            <summary>设置 SqlMapper.QueryForPaginatedList(String statementName, Object parameterObject, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.QueryWithRowDelegateStringObjectSqlMapperRowDelegate">
            <summary>设置 SqlMapper.QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.ResultMapsGet">
            <summary>设置 SqlMapper.get_ResultMaps() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.RollBackTransaction">
            <summary>设置 SqlMapper.RollBackTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.RollBackTransactionBoolean">
            <summary>设置 SqlMapper.RollBackTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.TypeHandlerFactoryGet">
            <summary>设置 SqlMapper.get_TypeHandlerFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.UpdateStringObject">
            <summary>设置 SqlMapper.Update(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForListOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.SqlMapper,System.String,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForListOf1StringObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{IBatisNet.DataMapper.SqlMapper,System.String,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForListOf1StringObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.SqlMapper,System.String,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForObjectOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.SqlMapper,System.String,System.Object,``0})">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForObjectOf1StringObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.SqlMapper,System.String,System.Object,``0,``0})">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject, !!0 instanceObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryWithRowDelegateOf1StringObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.SqlMapper,System.String,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 SqlMapper.QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.AccessorFactoryGet">
            <summary>设置 SqlMapper.get_AccessorFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.AddCacheCacheModel">
            <summary>设置 SqlMapper.AddCache(CacheModel cache) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.AddMappedStatementStringIMappedStatement">
            <summary>设置 SqlMapper.AddMappedStatement(String key, IMappedStatement mappedStatement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.AddParameterMapParameterMap">
            <summary>设置 SqlMapper.AddParameterMap(ParameterMap parameterMap) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.AddResultMapResultMap">
            <summary>设置 SqlMapper.AddResultMap(ResultMap resultMap) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.BeginTransaction">
            <summary>设置 SqlMapper.BeginTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.BeginTransactionBoolean">
            <summary>设置 SqlMapper.BeginTransaction(Boolean openConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.BeginTransactionBooleanIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(Boolean openNewConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.BeginTransactionIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.BeginTransactionString">
            <summary>设置 SqlMapper.BeginTransaction(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.BeginTransactionStringBooleanIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(String connectionString, Boolean openNewConnection, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.BeginTransactionStringIsolationLevel">
            <summary>设置 SqlMapper.BeginTransaction(String connectionString, IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.CacheModelsEnabledSetBoolean">
            <summary>设置 SqlMapper.set_CacheModelsEnabled(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.CloseConnection">
            <summary>设置 SqlMapper.CloseConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.CommitTransaction">
            <summary>设置 SqlMapper.CommitTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.CommitTransactionBoolean">
            <summary>设置 SqlMapper.CommitTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.DataExchangeFactoryGet">
            <summary>设置 SqlMapper.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.DataSourceGet">
            <summary>设置 SqlMapper.get_DataSource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.DataSourceSetIDataSource">
            <summary>设置 SqlMapper.set_DataSource(IDataSource value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.DeleteStringObject">
            <summary>设置 SqlMapper.Delete(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.FlushCaches">
            <summary>设置 SqlMapper.FlushCaches() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.GetCacheString">
            <summary>设置 SqlMapper.GetCache(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.GetDataCacheStats">
            <summary>设置 SqlMapper.GetDataCacheStats() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.GetMappedStatementString">
            <summary>设置 SqlMapper.GetMappedStatement(String id) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.GetParameterMapString">
            <summary>设置 SqlMapper.GetParameterMap(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.GetResultMapString">
            <summary>设置 SqlMapper.GetResultMap(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.InsertStringObject">
            <summary>设置 SqlMapper.Insert(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.IsCacheModelsEnabledGet">
            <summary>设置 SqlMapper.get_IsCacheModelsEnabled() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.IsSessionStartedGet">
            <summary>设置 SqlMapper.get_IsSessionStarted() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.LocalSessionGet">
            <summary>设置 SqlMapper.get_LocalSession() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.MappedStatementsGet">
            <summary>设置 SqlMapper.get_MappedStatements() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.ObjectFactoryGet">
            <summary>设置 SqlMapper.get_ObjectFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.OpenConnection">
            <summary>设置 SqlMapper.OpenConnection() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.OpenConnectionString">
            <summary>设置 SqlMapper.OpenConnection(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.ParameterMapsGet">
            <summary>设置 SqlMapper.get_ParameterMaps() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForDictionaryStringObjectString">
            <summary>设置 SqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForDictionaryStringObjectStringString">
            <summary>设置 SqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForListStringObject">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForListStringObjectIList">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForListStringObjectInt32Int32">
            <summary>设置 SqlMapper.QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForMapStringObjectString">
            <summary>设置 SqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForMapStringObjectStringString">
            <summary>设置 SqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForMapWithRowDelegateStringObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 SqlMapper.QueryForMapWithRowDelegate(String statementName, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForObjectStringObject">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForObjectStringObjectObject">
            <summary>设置 SqlMapper.QueryForObject(String statementName, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryForPaginatedListStringObjectInt32">
            <summary>设置 SqlMapper.QueryForPaginatedList(String statementName, Object parameterObject, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.QueryWithRowDelegateStringObjectSqlMapperRowDelegate">
            <summary>设置 SqlMapper.QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.ResultMapsGet">
            <summary>设置 SqlMapper.get_ResultMaps() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.RollBackTransaction">
            <summary>设置 SqlMapper.RollBackTransaction() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.RollBackTransactionBoolean">
            <summary>设置 SqlMapper.RollBackTransaction(Boolean closeConnection) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.TypeHandlerFactoryGet">
            <summary>设置 SqlMapper.get_TypeHandlerFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.ShimSqlMapper.AllInstances.UpdateStringObject">
            <summary>设置 SqlMapper.Update(String statementName, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.StubExecuteEventArgs">
            <summary>IBatisNet.DataMapper.ExecuteEventArgs 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubExecuteEventArgs.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubExecuteEventArgs.InitializeStub">
            <summary>初始化 type StubExecuteEventArgs 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubExecuteEventArgs.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubExecuteEventArgs.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubExecuteEventArgs.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.StubISqlMapper">
            <summary>IBatisNet.DataMapper.ISqlMapper 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.#ctor">
            <summary>初始化 type StubISqlMapper 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.AttachBackingFieldToDataSource">
            <summary>附加委托以将 StubISqlMapper.DataSource 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.BeginTransaction">
            <summary>设置 ISqlMapper.BeginTransaction() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.BeginTransactionBoolean">
            <summary>设置 ISqlMapper.BeginTransaction(Boolean openConnection) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.BeginTransactionBooleanIsolationLevel">
            <summary>设置 ISqlMapper.BeginTransaction(Boolean openNewConnection, IsolationLevel isolationLevel) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.BeginTransactionIsolationLevel">
            <summary>设置 ISqlMapper.BeginTransaction(IsolationLevel isolationLevel) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.BeginTransactionString">
            <summary>设置 ISqlMapper.BeginTransaction(String connectionString) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.BeginTransactionStringBooleanIsolationLevel">
            <summary>设置 ISqlMapper.BeginTransaction(String connectionString, Boolean openNewConnection, IsolationLevel isolationLevel) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.BeginTransactionStringIsolationLevel">
            <summary>设置 ISqlMapper.BeginTransaction(String connectionString, IsolationLevel isolationLevel) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.CloseConnection">
            <summary>设置 ISqlMapper.CloseConnection() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.CommitTransaction">
            <summary>设置 ISqlMapper.CommitTransaction() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.CommitTransactionBoolean">
            <summary>设置 ISqlMapper.CommitTransaction(Boolean closeConnection) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.DataSourceGet">
            <summary>设置 ISqlMapper.get_DataSource() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.DataSourceSetIDataSource">
            <summary>设置 ISqlMapper.set_DataSource(IDataSource value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.DeleteStringObject">
            <summary>设置 ISqlMapper.Delete(String statementName, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.FlushCaches">
            <summary>设置 ISqlMapper.FlushCaches() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.GetDataCacheStats">
            <summary>设置 ISqlMapper.GetDataCacheStats() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.GetMappedStatementString">
            <summary>设置 ISqlMapper.GetMappedStatement(String id) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#BeginTransaction">
            <summary>设置 ISqlMapper.BeginTransaction() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#BeginTransaction(System.Boolean)">
            <summary>设置 ISqlMapper.BeginTransaction(Boolean openConnection) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#BeginTransaction(System.String)">
            <summary>设置 ISqlMapper.BeginTransaction(String connectionString) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#BeginTransaction(System.Data.IsolationLevel)">
            <summary>设置 ISqlMapper.BeginTransaction(IsolationLevel isolationLevel) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#BeginTransaction(System.Boolean,System.Data.IsolationLevel)">
            <summary>设置 ISqlMapper.BeginTransaction(Boolean openNewConnection, IsolationLevel isolationLevel) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#BeginTransaction(System.String,System.Data.IsolationLevel)">
            <summary>设置 ISqlMapper.BeginTransaction(String connectionString, IsolationLevel isolationLevel) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#BeginTransaction(System.String,System.Boolean,System.Data.IsolationLevel)">
            <summary>设置 ISqlMapper.BeginTransaction(String connectionString, Boolean openNewConnection, IsolationLevel isolationLevel) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#CloseConnection">
            <summary>设置 ISqlMapper.CloseConnection() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#CommitTransaction">
            <summary>设置 ISqlMapper.CommitTransaction() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#CommitTransaction(System.Boolean)">
            <summary>设置 ISqlMapper.CommitTransaction(Boolean closeConnection) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#Delete(System.String,System.Object)">
            <summary>设置 ISqlMapper.Delete(String statementName, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#FlushCaches">
            <summary>设置 ISqlMapper.FlushCaches() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#GetDataCacheStats">
            <summary>设置 ISqlMapper.GetDataCacheStats() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#GetMappedStatement(System.String)">
            <summary>设置 ISqlMapper.GetMappedStatement(String id) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#Insert(System.String,System.Object)">
            <summary>设置 ISqlMapper.Insert(String statementName, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#OpenConnection">
            <summary>设置 ISqlMapper.OpenConnection() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#OpenConnection(System.String)">
            <summary>设置 ISqlMapper.OpenConnection(String connectionString) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForDictionary(System.String,System.Object,System.String)">
            <summary>设置 ISqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForDictionary(System.String,System.Object,System.String,System.String)">
            <summary>设置 ISqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForList(System.String,System.Object)">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForList(System.String,System.Object,System.Int32,System.Int32)">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForList``1(System.String,System.Object)">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForList(System.String,System.Object,System.Collections.IList)">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject, IList resultObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForList``1(System.String,System.Object,System.Collections.Generic.IList{``0})">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForList``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForMap(System.String,System.Object,System.String)">
            <summary>设置 ISqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForMap(System.String,System.Object,System.String,System.String)">
            <summary>设置 ISqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForMapWithRowDelegate(System.String,System.Object,System.String,System.String,IBatisNet.DataMapper.SqlMapper.DictionaryRowDelegate)">
            <summary>设置 ISqlMapper.QueryForMapWithRowDelegate(String statementName, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForObject(System.String,System.Object)">
            <summary>设置 ISqlMapper.QueryForObject(String statementName, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForObject``1(System.String,System.Object)">
            <summary>设置 ISqlMapper.QueryForObject(String statementName, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForObject``1(System.String,System.Object,``0)">
            <summary>设置 ISqlMapper.QueryForObject(String statementName, Object parameterObject, !!0 instanceObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForObject(System.String,System.Object,System.Object)">
            <summary>设置 ISqlMapper.QueryForObject(String statementName, Object parameterObject, Object resultObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryForPaginatedList(System.String,System.Object,System.Int32)">
            <summary>设置 ISqlMapper.QueryForPaginatedList(String statementName, Object parameterObject, Int32 pageSize) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryWithRowDelegate(System.String,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate)">
            <summary>设置 ISqlMapper.QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate rowDelegate) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#QueryWithRowDelegate``1(System.String,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0})">
            <summary>设置 ISqlMapper.QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#RollBackTransaction">
            <summary>设置 ISqlMapper.RollBackTransaction() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#RollBackTransaction(System.Boolean)">
            <summary>设置 ISqlMapper.RollBackTransaction(Boolean closeConnection) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#Update(System.String,System.Object)">
            <summary>设置 ISqlMapper.Update(String statementName, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.InsertStringObject">
            <summary>设置 ISqlMapper.Insert(String statementName, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.IsSessionStartedGet">
            <summary>设置 ISqlMapper.get_IsSessionStarted() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.LocalSessionGet">
            <summary>设置 ISqlMapper.get_LocalSession() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.OpenConnection">
            <summary>设置 ISqlMapper.OpenConnection() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.OpenConnectionString">
            <summary>设置 ISqlMapper.OpenConnection(String connectionString) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForDictionaryStringObjectString">
            <summary>设置 ISqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForDictionaryStringObjectStringString">
            <summary>设置 ISqlMapper.QueryForDictionary(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForListOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 QueryForList(String statementName, Object parameterObject) 的存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForListOf1StringObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 QueryForList(String statementName, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForListOf1StringObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForListStringObject">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForListStringObjectIList">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject, IList resultObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForListStringObjectInt32Int32">
            <summary>设置 ISqlMapper.QueryForList(String statementName, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForMapStringObjectString">
            <summary>设置 ISqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForMapStringObjectStringString">
            <summary>设置 ISqlMapper.QueryForMap(String statementName, Object parameterObject, String keyProperty, String valueProperty) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForMapWithRowDelegateStringObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 ISqlMapper.QueryForMapWithRowDelegate(String statementName, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForObjectOf1StringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,``0})">
            <summary>设置 QueryForObject(String statementName, Object parameterObject) 的存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForObjectOf1StringObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,``0,``0})">
            <summary>设置 QueryForObject(String statementName, Object parameterObject, !!0 instanceObject) 的存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForObjectStringObject">
            <summary>设置 ISqlMapper.QueryForObject(String statementName, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForObjectStringObjectObject">
            <summary>设置 ISqlMapper.QueryForObject(String statementName, Object parameterObject, Object resultObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryForPaginatedListStringObjectInt32">
            <summary>设置 ISqlMapper.QueryForPaginatedList(String statementName, Object parameterObject, Int32 pageSize) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryWithRowDelegateOf1StringObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.QueryWithRowDelegateStringObjectSqlMapperRowDelegate">
            <summary>设置 ISqlMapper.QueryWithRowDelegate(String statementName, Object parameterObject, RowDelegate rowDelegate) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.RollBackTransaction">
            <summary>设置 ISqlMapper.RollBackTransaction() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.RollBackTransactionBoolean">
            <summary>设置 ISqlMapper.RollBackTransaction(Boolean closeConnection) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Fakes.StubISqlMapper.UpdateStringObject">
            <summary>设置 ISqlMapper.Update(String statementName, Object parameterObject) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#DataSource">
            <summary>设置 ISqlMapper.get_DataSource() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#IsSessionStarted">
            <summary>设置 ISqlMapper.get_IsSessionStarted() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubISqlMapper.ibndm::IBatisNet#DataMapper#ISqlMapper#LocalSession">
            <summary>设置 ISqlMapper.get_LocalSession() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.StubMapper">
            <summary>IBatisNet.DataMapper.Mapper 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubMapper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubMapper.InitializeStub">
            <summary>初始化 type StubMapper 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubMapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubMapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubMapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Fakes.StubSqlMapSession">
            <summary>IBatisNet.DataMapper.SqlMapSession 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubSqlMapSession.#ctor(IBatisNet.DataMapper.ISqlMapper)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Fakes.StubSqlMapSession.InitializeStub">
            <summary>初始化 type StubSqlMapSession 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubSqlMapSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubSqlMapSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Fakes.StubSqlMapSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.Constructor">
            <summary>设置 ArgumentStrategyFactory.ArgumentStrategyFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.GetArgumentProperty">
            <summary>设置 ArgumentStrategyFactory.Get(ArgumentProperty mapping) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.StaticConstructor">
            <summary>设置 ArgumentStrategyFactory.ArgumentStrategyFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimArgumentStrategyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.DefaultStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.DefaultStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.Constructor">
            <summary>设置 DefaultStrategy.DefaultStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimDefaultStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.ResultMapStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.ResultMapStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.Constructor">
            <summary>设置 ResultMapStrategy.ResultMapStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimResultMapStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectArrayStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectArrayStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.Constructor">
            <summary>设置 SelectArrayStrategy.SelectArrayStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectArrayStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectGenericListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectGenericListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.Constructor">
            <summary>设置 SelectGenericListStrategy.SelectGenericListStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectGenericListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.Constructor">
            <summary>设置 SelectListStrategy.SelectListStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectObjectStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectObjectStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.Constructor">
            <summary>设置 SelectObjectStrategy.SelectObjectStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectObjectStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.ConstructorResultPropertyIArgumentStrategyIArgumentStrategyIArgumentStrategyIArgumentStrategy">
            <summary>设置 SelectStrategy.SelectStrategy(ResultProperty mapping, IArgumentStrategy selectArrayStrategy, IArgumentStrategy selectGenericListStrategy, IArgumentStrategy selectListStrategy, IArgumentStrategy selectObjectStrategy) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.ShimSelectStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubArgumentStrategyFactory">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubArgumentStrategyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubArgumentStrategyFactory.InitializeStub">
            <summary>初始化 type StubArgumentStrategyFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubArgumentStrategyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubArgumentStrategyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubArgumentStrategyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubIArgumentStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubIArgumentStrategy.#ctor">
            <summary>初始化 type StubIArgumentStrategy 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubIArgumentStrategy.GetValueRequestScopeResultPropertyIDataReaderRefObject">
            <summary>设置 IArgumentStrategy.GetValue(RequestScope request, ResultProperty mapping, IDataReader&amp; reader, Object keys) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubIArgumentStrategy.ibndm::IBatisNet#DataMapper#MappedStatements#ArgumentStrategy#IArgumentStrategy#GetValue(IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>设置 IArgumentStrategy.GetValue(RequestScope request, ResultProperty mapping, IDataReader&amp; reader, Object keys) 的 存根</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubSelectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubSelectStrategy.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubSelectStrategy.InitializeStub">
            <summary>初始化 type StubSelectStrategy 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubSelectStrategy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubSelectStrategy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ArgumentStrategy.Fakes.StubSelectStrategy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.BaseStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.BaseStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.Constructor">
            <summary>设置 BaseStrategy.BaseStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.FillObjectWithReaderAndResultMapRequestScopeIDataReaderResultMapObject">
            <summary>设置 BaseStrategy.FillObjectWithReaderAndResultMap(RequestScope request, IDataReader reader, ResultMap resultMap, Object resultObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimBaseStrategy.AllInstances.FillObjectWithReaderAndResultMapRequestScopeIDataReaderResultMapObject">
            <summary>设置 BaseStrategy.FillObjectWithReaderAndResultMap(RequestScope request, IDataReader reader, ResultMap resultMap, Object resultObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement">
            <summary>IBatisNet.DataMapper.MappedStatements.CachingStatement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.#ctor(IBatisNet.DataMapper.MappedStatements.CachingStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.Bind(IBatisNet.DataMapper.MappedStatements.IMappedStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForListOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForListOf1IDalSessionObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForListOf1IDalSessionObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForObjectOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,``0})">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForObjectOf1IDalSessionObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,``0,``0})">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, !!0 resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForRowDelegateOf1IDalSessionObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ConstructorMappedStatement">
            <summary>设置 CachingStatement.CachingStatement(MappedStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteAddExecuteEventHandler">
            <summary>设置 CachingStatement.add_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteInsertIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForListIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 CachingStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 CachingStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 CachingStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteRemoveExecuteEventHandler">
            <summary>设置 CachingStatement.remove_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ExecuteUpdateIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.GetCacheKeyRequestScope">
            <summary>设置 CachingStatement.GetCacheKey(RequestScope request) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.GetDataCacheHitRatio">
            <summary>设置 CachingStatement.GetDataCacheHitRatio() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.IdGet">
            <summary>设置 CachingStatement.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.PreparedCommandGet">
            <summary>设置 CachingStatement.get_PreparedCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ReaderAutoMapperGet">
            <summary>设置 CachingStatement.get_ReaderAutoMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.ReaderAutoMapperSetReaderAutoMapper">
            <summary>设置 CachingStatement.set_ReaderAutoMapper(ReaderAutoMapper value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.SqlMapGet">
            <summary>设置 CachingStatement.get_SqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.StatementGet">
            <summary>设置 CachingStatement.get_Statement() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForListOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.CachingStatement,IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForListOf1IDalSessionObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{IBatisNet.DataMapper.MappedStatements.CachingStatement,IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForListOf1IDalSessionObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.CachingStatement,IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForObjectOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.CachingStatement,IBatisNet.Common.IDalSession,System.Object,``0})">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForObjectOf1IDalSessionObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.CachingStatement,IBatisNet.Common.IDalSession,System.Object,``0,``0})">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, !!0 resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForRowDelegateOf1IDalSessionObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.CachingStatement,IBatisNet.Common.IDalSession,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 CachingStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteAddExecuteEventHandler">
            <summary>设置 CachingStatement.add_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteInsertIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForListIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 CachingStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 CachingStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 CachingStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 CachingStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 CachingStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteRemoveExecuteEventHandler">
            <summary>设置 CachingStatement.remove_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ExecuteUpdateIDalSessionObject">
            <summary>设置 CachingStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.GetCacheKeyRequestScope">
            <summary>设置 CachingStatement.GetCacheKey(RequestScope request) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.GetDataCacheHitRatio">
            <summary>设置 CachingStatement.GetDataCacheHitRatio() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.IdGet">
            <summary>设置 CachingStatement.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.PreparedCommandGet">
            <summary>设置 CachingStatement.get_PreparedCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ReaderAutoMapperGet">
            <summary>设置 CachingStatement.get_ReaderAutoMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.ReaderAutoMapperSetReaderAutoMapper">
            <summary>设置 CachingStatement.set_ReaderAutoMapper(ReaderAutoMapper value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.SqlMapGet">
            <summary>设置 CachingStatement.get_SqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimCachingStatement.AllInstances.StatementGet">
            <summary>设置 CachingStatement.get_Statement() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement">
            <summary>IBatisNet.DataMapper.MappedStatements.DeleteMappedStatement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.#ctor(IBatisNet.DataMapper.MappedStatements.DeleteMappedStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.Bind(IBatisNet.DataMapper.MappedStatements.IMappedStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ConstructorSqlMapperIStatement">
            <summary>设置 DeleteMappedStatement.DeleteMappedStatement(SqlMapper sqlMap, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteInsertIDalSessionObject">
            <summary>设置 DeleteMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteQueryForListIDalSessionObject">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteInsertIDalSessionObject">
            <summary>设置 DeleteMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObject">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimDeleteMappedStatement.AllInstances.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 DeleteMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement">
            <summary>IBatisNet.DataMapper.MappedStatements.InsertMappedStatement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.#ctor(IBatisNet.DataMapper.MappedStatements.InsertMappedStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.Bind(IBatisNet.DataMapper.MappedStatements.IMappedStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ConstructorSqlMapperIStatement">
            <summary>设置 InsertMappedStatement.InsertMappedStatement(SqlMapper sqlMap, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForListIDalSessionObject">
            <summary>设置 InsertMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 InsertMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 InsertMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 InsertMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 InsertMappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 InsertMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 InsertMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 InsertMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.ExecuteUpdateIDalSessionObject">
            <summary>设置 InsertMappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObject">
            <summary>设置 InsertMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 InsertMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 InsertMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 InsertMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 InsertMappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 InsertMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 InsertMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 InsertMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimInsertMappedStatement.AllInstances.ExecuteUpdateIDalSessionObject">
            <summary>设置 InsertMappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement">
            <summary>IBatisNet.DataMapper.MappedStatements.MappedStatement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.#ctor(IBatisNet.DataMapper.MappedStatements.MappedStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.Bind(IBatisNet.DataMapper.MappedStatements.IMappedStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForListOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForListOf1IDalSessionObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForListOf1IDalSessionObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForObjectOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,``0})">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForObjectOf1IDalSessionObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,``0,``0})">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, !!0 resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForRowDelegateOf1IDalSessionObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.RunQueryForListOf1RequestScopeIDalSessionObjectInt32Int32SqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.RunQueryForList(RequestScope request, IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.RunQueryForObjectOf1RequestScopeIDalSessionObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.Common.IDalSession,System.Object,``0,``0})">
            <summary>设置 MappedStatement.RunQueryForObject(RequestScope request, IDalSession session, Object parameterObject, !!0 resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ConstructorSqlMapperIStatement">
            <summary>设置 MappedStatement.MappedStatement(SqlMapper sqlMap, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteAddExecuteEventHandler">
            <summary>设置 MappedStatement.add_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteInsertIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecutePostSelectRequestScope">
            <summary>设置 MappedStatement.ExecutePostSelect(RequestScope request) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForListIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 MappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 MappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 MappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteRemoveExecuteEventHandler">
            <summary>设置 MappedStatement.remove_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ExecuteUpdateIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.IdGet">
            <summary>设置 MappedStatement.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.PreparedCommandGet">
            <summary>设置 MappedStatement.get_PreparedCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.RaiseExecuteEvent">
            <summary>设置 MappedStatement.RaiseExecuteEvent() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ReaderAutoMapperGet">
            <summary>设置 MappedStatement.get_ReaderAutoMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ReaderAutoMapperSetReaderAutoMapper">
            <summary>设置 MappedStatement.set_ReaderAutoMapper(ReaderAutoMapper value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.RetrieveOutputParametersRequestScopeIDalSessionIDbCommandObject">
            <summary>设置 MappedStatement.RetrieveOutputParameters(RequestScope request, IDalSession session, IDbCommand command, Object result) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.RunQueryForListRequestScopeIDalSessionObjectInt32Int32SqlMapperRowDelegate">
            <summary>设置 MappedStatement.RunQueryForList(RequestScope request, IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.RunQueryForMapRequestScopeIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 MappedStatement.RunQueryForMap(RequestScope request, IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.RunQueryForObjectRequestScopeIDalSessionObjectObject">
            <summary>设置 MappedStatement.RunQueryForObject(RequestScope request, IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.SqlMapGet">
            <summary>设置 MappedStatement.get_SqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.StatementGet">
            <summary>设置 MappedStatement.get_Statement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.StaticConstructor">
            <summary>设置 MappedStatement.MappedStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.ToString">
            <summary>设置 MappedStatement.ToString() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForListOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForListOf1IDalSessionObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForListOf1IDalSessionObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForObjectOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.Common.IDalSession,System.Object,``0})">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForObjectOf1IDalSessionObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.Common.IDalSession,System.Object,``0,``0})">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, !!0 resultObject) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForRowDelegateOf1IDalSessionObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.Common.IDalSession,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.RunQueryForListOf1RequestScopeIDalSessionObjectInt32Int32SqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 MappedStatement.RunQueryForList(RequestScope request, IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.RunQueryForObjectOf1RequestScopeIDalSessionObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.DataMapper.MappedStatements.MappedStatement,IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.Common.IDalSession,System.Object,``0,``0})">
            <summary>设置 MappedStatement.RunQueryForObject(RequestScope request, IDalSession session, Object parameterObject, !!0 resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteAddExecuteEventHandler">
            <summary>设置 MappedStatement.add_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteInsertIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecutePostSelectRequestScope">
            <summary>设置 MappedStatement.ExecutePostSelect(RequestScope request) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 MappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 MappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 MappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 MappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteRemoveExecuteEventHandler">
            <summary>设置 MappedStatement.remove_Execute(ExecuteEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ExecuteUpdateIDalSessionObject">
            <summary>设置 MappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.IdGet">
            <summary>设置 MappedStatement.get_Id() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.PreparedCommandGet">
            <summary>设置 MappedStatement.get_PreparedCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.RaiseExecuteEvent">
            <summary>设置 MappedStatement.RaiseExecuteEvent() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ReaderAutoMapperGet">
            <summary>设置 MappedStatement.get_ReaderAutoMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ReaderAutoMapperSetReaderAutoMapper">
            <summary>设置 MappedStatement.set_ReaderAutoMapper(ReaderAutoMapper value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.RetrieveOutputParametersRequestScopeIDalSessionIDbCommandObject">
            <summary>设置 MappedStatement.RetrieveOutputParameters(RequestScope request, IDalSession session, IDbCommand command, Object result) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.RunQueryForListRequestScopeIDalSessionObjectInt32Int32SqlMapperRowDelegate">
            <summary>设置 MappedStatement.RunQueryForList(RequestScope request, IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.RunQueryForMapRequestScopeIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 MappedStatement.RunQueryForMap(RequestScope request, IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.RunQueryForObjectRequestScopeIDalSessionObjectObject">
            <summary>设置 MappedStatement.RunQueryForObject(RequestScope request, IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.SqlMapGet">
            <summary>设置 MappedStatement.get_SqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.StatementGet">
            <summary>设置 MappedStatement.get_Statement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimMappedStatement.AllInstances.ToString01">
            <summary>设置 MappedStatement.ToString() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList">
            <summary>IBatisNet.DataMapper.MappedStatements.PaginatedList 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.#ctor(IBatisNet.DataMapper.MappedStatements.PaginatedList)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Bind(IBatisNet.Common.Pagination.IPaginatedList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Bind(System.Collections.IEnumerator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AddObject">
            <summary>设置 PaginatedList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Clear">
            <summary>设置 PaginatedList.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.ConstructorIMappedStatementObjectInt32">
            <summary>设置 PaginatedList.PaginatedList(IMappedStatement mappedStatement, Object parameterObject, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.ContainsObject">
            <summary>设置 PaginatedList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.CopyToArrayInt32">
            <summary>设置 PaginatedList.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.CountGet">
            <summary>设置 PaginatedList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.CurrentGet">
            <summary>设置 PaginatedList.get_Current() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.GetEnumerator">
            <summary>设置 PaginatedList.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.GetListInt32Int32">
            <summary>设置 PaginatedList.GetList(Int32 index, Int32 localPageSize) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.GotoPageInt32">
            <summary>设置 PaginatedList.GotoPage(Int32 pageIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IndexOfObject">
            <summary>设置 PaginatedList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.InsertInt32Object">
            <summary>设置 PaginatedList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsEmptyGet">
            <summary>设置 PaginatedList.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsFirstPageGet">
            <summary>设置 PaginatedList.get_IsFirstPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsFixedSizeGet">
            <summary>设置 PaginatedList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsLastPageGet">
            <summary>设置 PaginatedList.get_IsLastPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsMiddlePageGet">
            <summary>设置 PaginatedList.get_IsMiddlePage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsNextPageAvailableGet">
            <summary>设置 PaginatedList.get_IsNextPageAvailable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsPreviousPageAvailableGet">
            <summary>设置 PaginatedList.get_IsPreviousPageAvailable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsReadOnlyGet">
            <summary>设置 PaginatedList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.IsSynchronizedGet">
            <summary>设置 PaginatedList.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.ItemGetInt32">
            <summary>设置 PaginatedList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.ItemSetInt32Object">
            <summary>设置 PaginatedList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.MoveNext">
            <summary>设置 PaginatedList.MoveNext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.NextPage">
            <summary>设置 PaginatedList.NextPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.PageBack">
            <summary>设置 PaginatedList.PageBack() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.PageForward">
            <summary>设置 PaginatedList.PageForward() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.PageIndexGet">
            <summary>设置 PaginatedList.get_PageIndex() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.PageSizeGet">
            <summary>设置 PaginatedList.get_PageSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.PageToInt32">
            <summary>设置 PaginatedList.PageTo(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.PreviousPage">
            <summary>设置 PaginatedList.PreviousPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.RemoveAtInt32">
            <summary>设置 PaginatedList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.RemoveObject">
            <summary>设置 PaginatedList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.Reset">
            <summary>设置 PaginatedList.Reset() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.SafePageToInt32">
            <summary>设置 PaginatedList.SafePageTo(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.SubListIListInt32Int32">
            <summary>设置 PaginatedList.SubList(IList list, Int32 fromIndex, Int32 toIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.SyncRootGet">
            <summary>设置 PaginatedList.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.AddObject">
            <summary>设置 PaginatedList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.Clear">
            <summary>设置 PaginatedList.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.ContainsObject">
            <summary>设置 PaginatedList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.CopyToArrayInt32">
            <summary>设置 PaginatedList.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.CountGet">
            <summary>设置 PaginatedList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.CurrentGet">
            <summary>设置 PaginatedList.get_Current() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.GetEnumerator">
            <summary>设置 PaginatedList.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.GetListInt32Int32">
            <summary>设置 PaginatedList.GetList(Int32 index, Int32 localPageSize) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.GotoPageInt32">
            <summary>设置 PaginatedList.GotoPage(Int32 pageIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IndexOfObject">
            <summary>设置 PaginatedList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.InsertInt32Object">
            <summary>设置 PaginatedList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsEmptyGet">
            <summary>设置 PaginatedList.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsFirstPageGet">
            <summary>设置 PaginatedList.get_IsFirstPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsFixedSizeGet">
            <summary>设置 PaginatedList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsLastPageGet">
            <summary>设置 PaginatedList.get_IsLastPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsMiddlePageGet">
            <summary>设置 PaginatedList.get_IsMiddlePage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsNextPageAvailableGet">
            <summary>设置 PaginatedList.get_IsNextPageAvailable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsPreviousPageAvailableGet">
            <summary>设置 PaginatedList.get_IsPreviousPageAvailable() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsReadOnlyGet">
            <summary>设置 PaginatedList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.IsSynchronizedGet">
            <summary>设置 PaginatedList.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.ItemGetInt32">
            <summary>设置 PaginatedList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.ItemSetInt32Object">
            <summary>设置 PaginatedList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.MoveNext">
            <summary>设置 PaginatedList.MoveNext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.NextPage">
            <summary>设置 PaginatedList.NextPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.PageBack">
            <summary>设置 PaginatedList.PageBack() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.PageForward">
            <summary>设置 PaginatedList.PageForward() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.PageIndexGet">
            <summary>设置 PaginatedList.get_PageIndex() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.PageSizeGet">
            <summary>设置 PaginatedList.get_PageSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.PageToInt32">
            <summary>设置 PaginatedList.PageTo(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.PreviousPage">
            <summary>设置 PaginatedList.PreviousPage() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.RemoveAtInt32">
            <summary>设置 PaginatedList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.RemoveObject">
            <summary>设置 PaginatedList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.Reset">
            <summary>设置 PaginatedList.Reset() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.SafePageToInt32">
            <summary>设置 PaginatedList.SafePageTo(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.SubListIListInt32Int32">
            <summary>设置 PaginatedList.SubList(IList list, Int32 fromIndex, Int32 toIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPaginatedList.AllInstances.SyncRootGet">
            <summary>设置 PaginatedList.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind">
            <summary>IBatisNet.DataMapper.MappedStatements.PostBindind 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.#ctor(IBatisNet.DataMapper.MappedStatements.PostBindind)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.Constructor">
            <summary>设置 PostBindind.PostBindind() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.KeysGet">
            <summary>设置 PostBindind.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.KeysSetObject">
            <summary>设置 PostBindind.set_Keys(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.MethodGet">
            <summary>设置 PostBindind.get_Method() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.MethodSetPostBindindExecuteMethod">
            <summary>设置 PostBindind.set_Method(ExecuteMethod value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.ResultPropertyGet">
            <summary>设置 PostBindind.get_ResultProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.ResultPropertySetResultProperty">
            <summary>设置 PostBindind.set_ResultProperty(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.StatementGet">
            <summary>设置 PostBindind.get_Statement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.StatementSetIMappedStatement">
            <summary>设置 PostBindind.set_Statement(IMappedStatement value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.TargetGet">
            <summary>设置 PostBindind.get_Target() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.TargetSetObject">
            <summary>设置 PostBindind.set_Target(Object value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.KeysGet">
            <summary>设置 PostBindind.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.KeysSetObject">
            <summary>设置 PostBindind.set_Keys(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.MethodGet">
            <summary>设置 PostBindind.get_Method() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.MethodSetPostBindindExecuteMethod">
            <summary>设置 PostBindind.set_Method(ExecuteMethod value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.ResultPropertyGet">
            <summary>设置 PostBindind.get_ResultProperty() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.ResultPropertySetResultProperty">
            <summary>设置 PostBindind.set_ResultProperty(ResultProperty value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.StatementGet">
            <summary>设置 PostBindind.get_Statement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.StatementSetIMappedStatement">
            <summary>设置 PostBindind.set_Statement(IMappedStatement value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.TargetGet">
            <summary>设置 PostBindind.get_Target() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimPostBindind.AllInstances.TargetSetObject">
            <summary>设置 PostBindind.set_Target(Object value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper">
            <summary>IBatisNet.DataMapper.MappedStatements.ReaderAutoMapper 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.#ctor(IBatisNet.DataMapper.MappedStatements.ReaderAutoMapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.AutoMapReaderIDataReaderObjectRef">
            <summary>设置 ReaderAutoMapper.AutoMapReader(IDataReader reader, Object&amp; resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.ConstructorDataExchangeFactoryIDataReaderObjectRef">
            <summary>设置 ReaderAutoMapper.ReaderAutoMapper(DataExchangeFactory dataExchangeFactory, IDataReader reader, Object&amp; resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.StaticConstructor">
            <summary>设置 ReaderAutoMapper.ReaderAutoMapper() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimReaderAutoMapper.AllInstances.AutoMapReaderIDataReaderObjectRef">
            <summary>设置 ReaderAutoMapper.AutoMapReader(IDataReader reader, Object&amp; resultObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement">
            <summary>IBatisNet.DataMapper.MappedStatements.SelectMappedStatement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.#ctor(IBatisNet.DataMapper.MappedStatements.SelectMappedStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.Bind(IBatisNet.DataMapper.MappedStatements.IMappedStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.ConstructorSqlMapperIStatement">
            <summary>设置 SelectMappedStatement.SelectMappedStatement(SqlMapper sqlMap, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.ExecuteInsertIDalSessionObject">
            <summary>设置 SelectMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.ExecuteUpdateIDalSessionObject">
            <summary>设置 SelectMappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.AllInstances.ExecuteInsertIDalSessionObject">
            <summary>设置 SelectMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimSelectMappedStatement.AllInstances.ExecuteUpdateIDalSessionObject">
            <summary>设置 SelectMappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement">
            <summary>IBatisNet.DataMapper.MappedStatements.UpdateMappedStatement 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.#ctor(IBatisNet.DataMapper.MappedStatements.UpdateMappedStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.Bind(IBatisNet.DataMapper.MappedStatements.IMappedStatement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ConstructorSqlMapperIStatement">
            <summary>设置 UpdateMappedStatement.UpdateMappedStatement(SqlMapper sqlMap, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteInsertIDalSessionObject">
            <summary>设置 UpdateMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForListIDalSessionObject">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteInsertIDalSessionObject">
            <summary>设置 UpdateMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObject">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.ShimUpdateMappedStatement.AllInstances.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 UpdateMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.StubBaseStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.BaseStrategy 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubBaseStrategy.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubBaseStrategy.InitializeStub">
            <summary>初始化 type StubBaseStrategy 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubBaseStrategy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubBaseStrategy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubBaseStrategy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement">
            <summary>IBatisNet.DataMapper.MappedStatements.IMappedStatement 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.#ctor">
            <summary>初始化 type StubIMappedStatement 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.AttachBackingFieldToReaderAutoMapper">
            <summary>附加委托以将 StubIMappedStatement.ReaderAutoMapper 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteInsertIDalSessionObject">
            <summary>设置 IMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForListIDalSessionObject">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForListIDalSessionObjectIList">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForListIDalSessionObjectInt32Int32">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForListOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 ExecuteQueryForList(IDalSession session, Object parameterObject) 的存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForListOf1IDalSessionObjectIListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0}})">
            <summary>设置 ExecuteQueryForList(IDalSession session, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForListOf1IDalSessionObjectInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32,System.Collections.Generic.IList{``0}})">
            <summary>设置 ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForMapIDalSessionObjectStringString">
            <summary>设置 IMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForMapWithRowDelegateIDalSessionObjectStringStringSqlMapperDictionaryRowDelegate">
            <summary>设置 IMappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForObjectIDalSessionObject">
            <summary>设置 IMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForObjectIDalSessionObjectObject">
            <summary>设置 IMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForObjectOf1IDalSessionObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,``0})">
            <summary>设置 ExecuteQueryForObject(IDalSession session, Object parameterObject) 的存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForObjectOf1IDalSessionObjectM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,``0,``0})">
            <summary>设置 ExecuteQueryForObject(IDalSession session, Object parameterObject, !!0 resultObject) 的存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForRowDelegateIDalSessionObjectSqlMapperRowDelegate">
            <summary>设置 IMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteQueryForRowDelegateOf1IDalSessionObjectSqlMapperRowDelegateOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{IBatisNet.Common.IDalSession,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0},System.Collections.Generic.IList{``0}})">
            <summary>设置 ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ExecuteUpdateIDalSessionObject">
            <summary>设置 IMappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteInsert(IBatisNet.Common.IDalSession,System.Object)">
            <summary>设置 IMappedStatement.ExecuteInsert(IDalSession session, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForList(IBatisNet.Common.IDalSession,System.Object)">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForList(IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32)">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForList``1(IBatisNet.Common.IDalSession,System.Object)">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForList``1(IBatisNet.Common.IDalSession,System.Object,System.Collections.Generic.IList{``0})">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList`1&lt;!!0&gt; resultObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForList(IBatisNet.Common.IDalSession,System.Object,System.Collections.IList)">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, IList resultObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForList``1(IBatisNet.Common.IDalSession,System.Object,System.Int32,System.Int32)">
            <summary>设置 IMappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForMap(IBatisNet.Common.IDalSession,System.Object,System.String,System.String)">
            <summary>设置 IMappedStatement.ExecuteQueryForMap(IDalSession session, Object parameterObject, String keyProperty, String valueProperty) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForMapWithRowDelegate(IBatisNet.Common.IDalSession,System.Object,System.String,System.String,IBatisNet.DataMapper.SqlMapper.DictionaryRowDelegate)">
            <summary>设置 IMappedStatement.ExecuteQueryForMapWithRowDelegate(IDalSession session, Object parameterObject, String keyProperty, String valueProperty, DictionaryRowDelegate rowDelegate) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForObject(IBatisNet.Common.IDalSession,System.Object)">
            <summary>设置 IMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForObject``1(IBatisNet.Common.IDalSession,System.Object)">
            <summary>设置 IMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForObject(IBatisNet.Common.IDalSession,System.Object,System.Object)">
            <summary>设置 IMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, Object resultObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForObject``1(IBatisNet.Common.IDalSession,System.Object,``0)">
            <summary>设置 IMappedStatement.ExecuteQueryForObject(IDalSession session, Object parameterObject, !!0 resultObject) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForRowDelegate(IBatisNet.Common.IDalSession,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate)">
            <summary>设置 IMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate rowDelegate) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteQueryForRowDelegate``1(IBatisNet.Common.IDalSession,System.Object,IBatisNet.DataMapper.SqlMapper.RowDelegate{``0})">
            <summary>设置 IMappedStatement.ExecuteQueryForRowDelegate(IDalSession session, Object parameterObject, RowDelegate`1&lt;!!0&gt; rowDelegate) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ExecuteUpdate(IBatisNet.Common.IDalSession,System.Object)">
            <summary>设置 IMappedStatement.ExecuteUpdate(IDalSession session, Object parameterObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.IdGet">
            <summary>设置 IMappedStatement.get_Id() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.PreparedCommandGet">
            <summary>设置 IMappedStatement.get_PreparedCommand() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ReaderAutoMapperGet">
            <summary>设置 IMappedStatement.get_ReaderAutoMapper() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ReaderAutoMapperSetReaderAutoMapper">
            <summary>设置 IMappedStatement.set_ReaderAutoMapper(ReaderAutoMapper value) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.SqlMapGet">
            <summary>设置 IMappedStatement.get_SqlMap() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.StatementGet">
            <summary>设置 IMappedStatement.get_Statement() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#Id">
            <summary>设置 IMappedStatement.get_Id() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#PreparedCommand">
            <summary>设置 IMappedStatement.get_PreparedCommand() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#ReaderAutoMapper">
            <summary>设置 IMappedStatement.get_ReaderAutoMapper() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#SqlMap">
            <summary>设置 IMappedStatement.get_SqlMap() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubIMappedStatement.ibndm::IBatisNet#DataMapper#MappedStatements#IMappedStatement#Statement">
            <summary>设置 IMappedStatement.get_Statement() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.Fakes.StubPaginatedList">
            <summary>IBatisNet.DataMapper.MappedStatements.PaginatedList 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubPaginatedList.#ctor(IBatisNet.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.Fakes.StubPaginatedList.InitializeStub">
            <summary>初始化 type StubPaginatedList 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubPaginatedList.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubPaginatedList.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.Fakes.StubPaginatedList.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.ArrayStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.ArrayStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.Constructor">
            <summary>设置 ArrayStrategy.ArrayStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.ExecutePostBindindRequestScope">
            <summary>设置 ArrayStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimArrayStrategy.AllInstances.ExecutePostBindindRequestScope">
            <summary>设置 ArrayStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.GenericListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.GenericListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.Constructor">
            <summary>设置 GenericListStrategy.GenericListStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.ExecutePostBindindRequestScope">
            <summary>设置 GenericListStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimGenericListStrategy.AllInstances.ExecutePostBindindRequestScope">
            <summary>设置 GenericListStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.ListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.ListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.Constructor">
            <summary>设置 ListStrategy.ListStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.ExecutePostBindindRequestScope">
            <summary>设置 ListStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimListStrategy.AllInstances.ExecutePostBindindRequestScope">
            <summary>设置 ListStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.ObjectStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.ObjectStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.Constructor">
            <summary>设置 ObjectStrategy.ObjectStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.ExecutePostBindindRequestScope">
            <summary>设置 ObjectStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimObjectStrategy.AllInstances.ExecutePostBindindRequestScope">
            <summary>设置 ObjectStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.#ctor(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.Constructor">
            <summary>设置 PostSelectStrategyFactory.PostSelectStrategyFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.GetPostBindindExecuteMethod">
            <summary>设置 PostSelectStrategyFactory.Get(ExecuteMethod method) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.StaticConstructor">
            <summary>设置 PostSelectStrategyFactory.PostSelectStrategyFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimPostSelectStrategyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.StrongTypedListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.StrongTypedListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.Constructor">
            <summary>设置 StrongTypedListStrategy.StrongTypedListStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.ExecutePostBindindRequestScope">
            <summary>设置 StrongTypedListStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.ShimStrongTypedListStrategy.AllInstances.ExecutePostBindindRequestScope">
            <summary>设置 StrongTypedListStrategy.Execute(PostBindind postSelect, RequestScope request) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubIPostSelectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubIPostSelectStrategy.#ctor">
            <summary>初始化 type StubIPostSelectStrategy 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubIPostSelectStrategy.ExecutePostBindindRequestScope">
            <summary>设置 IPostSelectStrategy.Execute(PostBindind postSelect, RequestScope request) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubIPostSelectStrategy.ibndm::IBatisNet#DataMapper#MappedStatements#PostSelectStrategy#IPostSelectStrategy#Execute(IBatisNet.DataMapper.MappedStatements.PostBindind,IBatisNet.DataMapper.Scope.RequestScope)">
            <summary>设置 IPostSelectStrategy.Execute(PostBindind postSelect, RequestScope request) 的 存根</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubPostSelectStrategyFactory">
            <summary>IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubPostSelectStrategyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubPostSelectStrategyFactory.InitializeStub">
            <summary>初始化 type StubPostSelectStrategyFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubPostSelectStrategyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubPostSelectStrategyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PostSelectStrategy.Fakes.StubPostSelectStrategyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.Constructor">
            <summary>设置 DefaultStrategy.DefaultStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimDefaultStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.Constructor">
            <summary>设置 PropertyStrategyFactory.PropertyStrategyFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.GetResultProperty">
            <summary>设置 PropertyStrategyFactory.Get(ResultProperty mapping) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.StaticConstructor">
            <summary>设置 PropertyStrategyFactory.PropertyStrategyFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimPropertyStrategyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.Constructor">
            <summary>设置 ResultMapStrategy.ResultMapStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimResultMapStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.Constructor">
            <summary>设置 SelectArrayStrategy.SelectArrayStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectArrayStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.Constructor">
            <summary>设置 SelectGenericListStrategy.SelectGenericListStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectGenericListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.Constructor">
            <summary>设置 SelectListStrategy.SelectListStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.Constructor">
            <summary>设置 SelectObjectStrategy.SelectObjectStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectObjectStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.Bind(IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.ConstructorResultPropertyIPropertyStrategyIPropertyStrategyIPropertyStrategyIPropertyStrategy">
            <summary>设置 SelectStrategy.SelectStrategy(ResultProperty mapping, IPropertyStrategy selectArrayStrategy, IPropertyStrategy selectGenericListStrategy, IPropertyStrategy selectListStrategy, IPropertyStrategy selectObjectStrategy) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.ShimSelectStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubIPropertyStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubIPropertyStrategy.#ctor">
            <summary>初始化 type StubIPropertyStrategy 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubIPropertyStrategy.ibndm::IBatisNet#DataMapper#MappedStatements#PropertyStrategy#IPropertyStrategy#Set(IBatisNet.DataMapper.Scope.RequestScope,IBatisNet.DataMapper.Configuration.ResultMapping.ResultMap,IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>设置 IPropertyStrategy.Set(RequestScope request, ResultMap resultMap, ResultProperty mapping, Object&amp; target, IDataReader reader, Object keys) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubIPropertyStrategy.SetRequestScopeResultMapResultPropertyObjectRefIDataReaderObject">
            <summary>设置 IPropertyStrategy.Set(RequestScope request, ResultMap resultMap, ResultProperty mapping, Object&amp; target, IDataReader reader, Object keys) 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubPropertyStrategyFactory">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubPropertyStrategyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubPropertyStrategyFactory.InitializeStub">
            <summary>初始化 type StubPropertyStrategyFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubPropertyStrategyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubPropertyStrategyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubPropertyStrategyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubSelectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubSelectStrategy.#ctor(IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,IBatisNet.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubSelectStrategy.InitializeStub">
            <summary>初始化 type StubSelectStrategy 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubSelectStrategy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubSelectStrategy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.PropertyStrategy.Fakes.StubSelectStrategy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.AutoMapReaderRequestScopeIDataReaderRefObjectRef">
            <summary>设置 AutoMapStrategy.AutoMapReader(RequestScope request, IDataReader&amp; reader, Object&amp; resultObject) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.Constructor">
            <summary>设置 AutoMapStrategy.AutoMapStrategy() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.StaticConstructor">
            <summary>设置 AutoMapStrategy.AutoMapStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimAutoMapStrategy.AllInstances.AutoMapReaderRequestScopeIDataReaderRefObjectRef">
            <summary>设置 AutoMapStrategy.AutoMapReader(RequestScope request, IDataReader&amp; reader, Object&amp; resultObject) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.DictionaryStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.DictionaryStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.Constructor">
            <summary>设置 DictionaryStrategy.DictionaryStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimDictionaryStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.ListStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.ListStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.Constructor">
            <summary>设置 ListStrategy.ListStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimListStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.ObjectStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.ObjectStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.Constructor">
            <summary>设置 ObjectStrategy.ObjectStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimObjectStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.Constructor">
            <summary>设置 ResultClassStrategy.ResultClassStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultClassStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.Constructor">
            <summary>设置 ResultMapStrategy.ResultMapStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultMapStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.Constructor">
            <summary>设置 ResultStrategyFactory.ResultStrategyFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.GetIStatement">
            <summary>设置 ResultStrategyFactory.Get(IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.StaticConstructor">
            <summary>设置 ResultStrategyFactory.ResultStrategyFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimResultStrategyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.SimpleTypeStrategy 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.#ctor(IBatisNet.DataMapper.MappedStatements.ResultStrategy.SimpleTypeStrategy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.Bind(IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.Constructor">
            <summary>设置 SimpleTypeStrategy.SimpleTypeStrategy() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.ShimSimpleTypeStrategy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.StubIResultStrategy">
            <summary>IBatisNet.DataMapper.MappedStatements.ResultStrategy.IResultStrategy 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.StubIResultStrategy.#ctor">
            <summary>初始化 type StubIResultStrategy 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.StubIResultStrategy.ibndm::IBatisNet#DataMapper#MappedStatements#ResultStrategy#IResultStrategy#Process(IBatisNet.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>设置 IResultStrategy.Process(RequestScope request, IDataReader&amp; reader, Object resultObject) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.MappedStatements.ResultStrategy.Fakes.StubIResultStrategy.ProcessRequestScopeIDataReaderRefObject">
            <summary>设置 IResultStrategy.Process(RequestScope request, IDataReader&amp; reader, Object resultObject) 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder">
            <summary>IBatisNet.DataMapper.Proxy.LazyFactoryBuilder 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.#ctor(IBatisNet.DataMapper.Proxy.LazyFactoryBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.Constructor">
            <summary>设置 LazyFactoryBuilder.LazyFactoryBuilder() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.GetLazyFactoryType">
            <summary>设置 LazyFactoryBuilder.GetLazyFactory(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.RegisterTypeStringILazyFactory">
            <summary>设置 LazyFactoryBuilder.Register(Type type, String memberName, ILazyFactory factory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.AllInstances.GetLazyFactoryType">
            <summary>设置 LazyFactoryBuilder.GetLazyFactory(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyFactoryBuilder.AllInstances.RegisterTypeStringILazyFactory">
            <summary>设置 LazyFactoryBuilder.Register(Type type, String memberName, ILazyFactory factory) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList">
            <summary>IBatisNet.DataMapper.Proxy.LazyList 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.#ctor(IBatisNet.DataMapper.Proxy.LazyList)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AddObject">
            <summary>设置 LazyList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.Clear">
            <summary>设置 LazyList.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.ConstructorIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyList.LazyList(IMappedStatement mappedSatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.ContainsObject">
            <summary>设置 LazyList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.CopyToArrayInt32">
            <summary>设置 LazyList.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.CountGet">
            <summary>设置 LazyList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.GetEnumerator">
            <summary>设置 LazyList.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.IndexOfObject">
            <summary>设置 LazyList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.InsertInt32Object">
            <summary>设置 LazyList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.IsFixedSizeGet">
            <summary>设置 LazyList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.IsReadOnlyGet">
            <summary>设置 LazyList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.IsSynchronizedGet">
            <summary>设置 LazyList.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.ItemGetInt32">
            <summary>设置 LazyList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.ItemSetInt32Object">
            <summary>设置 LazyList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.LoadString">
            <summary>设置 LazyList.Load(String methodName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.RemoveAtInt32">
            <summary>设置 LazyList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.RemoveObject">
            <summary>设置 LazyList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.StaticConstructor">
            <summary>设置 LazyList.LazyList() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.SyncRootGet">
            <summary>设置 LazyList.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.AddObject">
            <summary>设置 LazyList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.Clear">
            <summary>设置 LazyList.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.ContainsObject">
            <summary>设置 LazyList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.CopyToArrayInt32">
            <summary>设置 LazyList.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.CountGet">
            <summary>设置 LazyList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.GetEnumerator">
            <summary>设置 LazyList.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.IndexOfObject">
            <summary>设置 LazyList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.InsertInt32Object">
            <summary>设置 LazyList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.IsFixedSizeGet">
            <summary>设置 LazyList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.IsReadOnlyGet">
            <summary>设置 LazyList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.IsSynchronizedGet">
            <summary>设置 LazyList.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.ItemGetInt32">
            <summary>设置 LazyList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.ItemSetInt32Object">
            <summary>设置 LazyList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.LoadString">
            <summary>设置 LazyList.Load(String methodName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.RemoveAtInt32">
            <summary>设置 LazyList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.RemoveObject">
            <summary>设置 LazyList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyList.AllInstances.SyncRootGet">
            <summary>设置 LazyList.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory">
            <summary>IBatisNet.DataMapper.Proxy.LazyListFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.#ctor(IBatisNet.DataMapper.Proxy.LazyListFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.Bind(IBatisNet.DataMapper.Proxy.ILazyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.Constructor">
            <summary>设置 LazyListFactory.LazyListFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.CreateProxyIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyListFactory.CreateProxy(IMappedStatement mappedStatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListFactory.AllInstances.CreateProxyIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyListFactory.CreateProxy(IMappedStatement mappedStatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1">
            <summary>IBatisNet.DataMapper.Proxy.LazyListGeneric`1 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.#ctor(IBatisNet.DataMapper.Proxy.LazyListGeneric{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Bind(System.Collections.Generic.ICollection{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Bind(System.Collections.Generic.IList{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AddT0">
            <summary>设置 LazyListGeneric`1.Add(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.Clear">
            <summary>设置 LazyListGeneric`1.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.ConstructorIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyListGeneric`1.LazyListGeneric`1(IMappedStatement mappedSatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.ContainsT0">
            <summary>设置 LazyListGeneric`1.Contains(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.CopyToT0ArrayInt32">
            <summary>设置 LazyListGeneric`1.CopyTo(!0[] array, Int32 arrayIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.CountGet">
            <summary>设置 LazyListGeneric`1.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.CountSystemCollectionsICollectionget">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.GetEnumerator">
            <summary>设置 LazyListGeneric`1.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.IndexOfT0">
            <summary>设置 LazyListGeneric`1.IndexOf(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.InsertInt32T0">
            <summary>设置 LazyListGeneric`1.Insert(Int32 index, !0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.IsFixedSizeSystemCollectionsIListget">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.IsReadOnlyGet">
            <summary>设置 LazyListGeneric`1.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.IsReadOnlySystemCollectionsIListget">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.IsSynchronizedSystemCollectionsICollectionget">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.ItemGetInt32">
            <summary>设置 LazyListGeneric`1.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.ItemSetInt32T0">
            <summary>设置 LazyListGeneric`1.set_Item(Int32 index, !0 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.ItemSystemCollectionsIListgetInt32">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.ItemSystemCollectionsIListsetInt32Object">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.LoadString">
            <summary>设置 LazyListGeneric`1.Load(String methodName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.RemoveAtInt32">
            <summary>设置 LazyListGeneric`1.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.RemoveT0">
            <summary>设置 LazyListGeneric`1.Remove(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.StaticConstructor">
            <summary>设置 LazyListGeneric`1.LazyListGeneric`1() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SyncRootSystemCollectionsICollectionget">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsICollectionCopyToArrayInt32">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 LazyListGeneric`1.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIListAddObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIListClear">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIListContainsObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIListIndexOfObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIListInsertInt32Object">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIListRemoveAtInt32">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.SystemCollectionsIListRemoveObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.AddT0">
            <summary>设置 LazyListGeneric`1.Add(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.Clear">
            <summary>设置 LazyListGeneric`1.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.ContainsT0">
            <summary>设置 LazyListGeneric`1.Contains(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.CopyToT0ArrayInt32">
            <summary>设置 LazyListGeneric`1.CopyTo(!0[] array, Int32 arrayIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.CountGet">
            <summary>设置 LazyListGeneric`1.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.CountSystemCollectionsICollectionget">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.GetEnumerator">
            <summary>设置 LazyListGeneric`1.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.IndexOfT0">
            <summary>设置 LazyListGeneric`1.IndexOf(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.InsertInt32T0">
            <summary>设置 LazyListGeneric`1.Insert(Int32 index, !0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.IsFixedSizeSystemCollectionsIListget">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.IsReadOnlyGet">
            <summary>设置 LazyListGeneric`1.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.IsReadOnlySystemCollectionsIListget">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.IsSynchronizedSystemCollectionsICollectionget">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.ItemGetInt32">
            <summary>设置 LazyListGeneric`1.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.ItemSetInt32T0">
            <summary>设置 LazyListGeneric`1.set_Item(Int32 index, !0 value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.ItemSystemCollectionsIListgetInt32">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.ItemSystemCollectionsIListsetInt32Object">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.LoadString">
            <summary>设置 LazyListGeneric`1.Load(String methodName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.RemoveAtInt32">
            <summary>设置 LazyListGeneric`1.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.RemoveT0">
            <summary>设置 LazyListGeneric`1.Remove(!0 item) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SyncRootSystemCollectionsICollectionget">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsICollectionCopyToArrayInt32">
            <summary>设置 LazyListGeneric`1.System.Collections.ICollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 LazyListGeneric`1.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIListAddObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIListClear">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Clear() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIListContainsObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIListIndexOfObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIListInsertInt32Object">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIListRemoveAtInt32">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGeneric`1.AllInstances.SystemCollectionsIListRemoveObject">
            <summary>设置 LazyListGeneric`1.System.Collections.IList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory">
            <summary>IBatisNet.DataMapper.Proxy.LazyListGenericFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.#ctor(IBatisNet.DataMapper.Proxy.LazyListGenericFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.Bind(IBatisNet.DataMapper.Proxy.ILazyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.Constructor">
            <summary>设置 LazyListGenericFactory.LazyListGenericFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.CreateProxyIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyListGenericFactory.CreateProxy(IMappedStatement mappedStatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyListGenericFactory.AllInstances.CreateProxyIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyListGenericFactory.CreateProxy(IMappedStatement mappedStatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory">
            <summary>IBatisNet.DataMapper.Proxy.LazyLoadProxyFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.#ctor(IBatisNet.DataMapper.Proxy.LazyLoadProxyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.Bind(IBatisNet.DataMapper.Proxy.ILazyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.Constructor">
            <summary>设置 LazyLoadProxyFactory.LazyLoadProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.CreateProxyIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyLoadProxyFactory.CreateProxy(IMappedStatement selectStatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.GetTypeReturnedByStatemetIMappedStatementBoolean">
            <summary>设置 LazyLoadProxyFactory.GetTypeReturnedByStatemet(IMappedStatement mappedStatement, Boolean isIList) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.StaticConstructor">
            <summary>设置 LazyLoadProxyFactory.LazyLoadProxyFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.ShimLazyLoadProxyFactory.AllInstances.CreateProxyIMappedStatementObjectObjectISetAccessor">
            <summary>设置 LazyLoadProxyFactory.CreateProxy(IMappedStatement selectStatement, Object param, Object target, ISetAccessor setAccessor) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.StubILazyFactory">
            <summary>IBatisNet.DataMapper.Proxy.ILazyFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubILazyFactory.#ctor">
            <summary>初始化 type StubILazyFactory 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Proxy.Fakes.StubILazyFactory.CreateProxyIMappedStatementObjectObjectISetAccessor">
            <summary>设置 ILazyFactory.CreateProxy(IMappedStatement mappedStatement, Object param, Object target, ISetAccessor setAccessor) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubILazyFactory.ibndm::IBatisNet#DataMapper#Proxy#ILazyFactory#CreateProxy(IBatisNet.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,IBatisNet.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>设置 ILazyFactory.CreateProxy(IMappedStatement mappedStatement, Object param, Object target, ISetAccessor setAccessor) 的 存根</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.StubLazyFactoryBuilder">
            <summary>IBatisNet.DataMapper.Proxy.LazyFactoryBuilder 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyFactoryBuilder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyFactoryBuilder.InitializeStub">
            <summary>初始化 type StubLazyFactoryBuilder 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyFactoryBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyFactoryBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyFactoryBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.StubLazyList">
            <summary>IBatisNet.DataMapper.Proxy.LazyList 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyList.#ctor(IBatisNet.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,IBatisNet.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyList.InitializeStub">
            <summary>初始化 type StubLazyList 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyList.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyList.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyList.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListFactory">
            <summary>IBatisNet.DataMapper.Proxy.LazyListFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListFactory.InitializeStub">
            <summary>初始化 type StubLazyListFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGeneric`1">
            <summary>IBatisNet.DataMapper.Proxy.LazyListGeneric`1 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGeneric`1.#ctor(IBatisNet.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,IBatisNet.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGeneric`1.InitializeStub">
            <summary>初始化 type StubLazyListGeneric 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGeneric`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGeneric`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGeneric`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGenericFactory">
            <summary>IBatisNet.DataMapper.Proxy.LazyListGenericFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGenericFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGenericFactory.InitializeStub">
            <summary>初始化 type StubLazyListGenericFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGenericFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGenericFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyListGenericFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Proxy.Fakes.StubLazyLoadProxyFactory">
            <summary>IBatisNet.DataMapper.Proxy.LazyLoadProxyFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyLoadProxyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Proxy.Fakes.StubLazyLoadProxyFactory.InitializeStub">
            <summary>初始化 type StubLazyLoadProxyFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyLoadProxyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyLoadProxyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Proxy.Fakes.StubLazyLoadProxyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope">
            <summary>IBatisNet.DataMapper.Scope.ConfigurationScope 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.#ctor(IBatisNet.DataMapper.Scope.ConfigurationScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.Bind(IBatisNet.DataMapper.Scope.IScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.CacheModelFlushOnExecuteStatementsGet">
            <summary>设置 ConfigurationScope.get_CacheModelFlushOnExecuteStatements() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.CacheModelFlushOnExecuteStatementsSetHybridDictionary">
            <summary>设置 ConfigurationScope.set_CacheModelFlushOnExecuteStatements(HybridDictionary value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.Constructor">
            <summary>设置 ConfigurationScope.ConfigurationScope() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.DataExchangeFactoryGet">
            <summary>设置 ConfigurationScope.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.DataSourceGet">
            <summary>设置 ConfigurationScope.get_DataSource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.DataSourceSetDataSource">
            <summary>设置 ConfigurationScope.set_DataSource(DataSource value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.ErrorContextGet">
            <summary>设置 ConfigurationScope.get_ErrorContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.IsCacheModelsEnabledGet">
            <summary>设置 ConfigurationScope.get_IsCacheModelsEnabled() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.IsCacheModelsEnabledSetBoolean">
            <summary>设置 ConfigurationScope.set_IsCacheModelsEnabled(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.IsCallFromDaoGet">
            <summary>设置 ConfigurationScope.get_IsCallFromDao() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.IsCallFromDaoSetBoolean">
            <summary>设置 ConfigurationScope.set_IsCallFromDao(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.IsXmlValidGet">
            <summary>设置 ConfigurationScope.get_IsXmlValid() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.IsXmlValidSetBoolean">
            <summary>设置 ConfigurationScope.set_IsXmlValid(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.NodeContextGet">
            <summary>设置 ConfigurationScope.get_NodeContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.NodeContextSetXmlNode">
            <summary>设置 ConfigurationScope.set_NodeContext(XmlNode value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.PropertiesGet">
            <summary>设置 ConfigurationScope.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.ProvidersGet">
            <summary>设置 ConfigurationScope.get_Providers() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.ResolveTypeHandlerTypeStringStringStringBoolean">
            <summary>设置 ConfigurationScope.ResolveTypeHandler(Type clazz, String memberName, String clrType, String dbType, Boolean forSetter) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapConfigDocumentGet">
            <summary>设置 ConfigurationScope.get_SqlMapConfigDocument() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapConfigDocumentSetXmlDocument">
            <summary>设置 ConfigurationScope.set_SqlMapConfigDocument(XmlDocument value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapDocumentGet">
            <summary>设置 ConfigurationScope.get_SqlMapDocument() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapDocumentSetXmlDocument">
            <summary>设置 ConfigurationScope.set_SqlMapDocument(XmlDocument value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapNamespaceGet">
            <summary>设置 ConfigurationScope.get_SqlMapNamespace() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapNamespaceSetString">
            <summary>设置 ConfigurationScope.set_SqlMapNamespace(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapperGet">
            <summary>设置 ConfigurationScope.get_SqlMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.SqlMapperSetSqlMapper">
            <summary>设置 ConfigurationScope.set_SqlMapper(SqlMapper value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.UseConfigFileWatcherGet">
            <summary>设置 ConfigurationScope.get_UseConfigFileWatcher() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.UseConfigFileWatcherSetBoolean">
            <summary>设置 ConfigurationScope.set_UseConfigFileWatcher(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.UseReflectionOptimizerGet">
            <summary>设置 ConfigurationScope.get_UseReflectionOptimizer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.UseReflectionOptimizerSetBoolean">
            <summary>设置 ConfigurationScope.set_UseReflectionOptimizer(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.UseStatementNamespacesGet">
            <summary>设置 ConfigurationScope.get_UseStatementNamespaces() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.UseStatementNamespacesSetBoolean">
            <summary>设置 ConfigurationScope.set_UseStatementNamespaces(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.ValidateSqlMapGet">
            <summary>设置 ConfigurationScope.get_ValidateSqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.ValidateSqlMapSetBoolean">
            <summary>设置 ConfigurationScope.set_ValidateSqlMap(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.XmlNamespaceManagerGet">
            <summary>设置 ConfigurationScope.get_XmlNamespaceManager() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.XmlNamespaceManagerSetXmlNamespaceManager">
            <summary>设置 ConfigurationScope.set_XmlNamespaceManager(XmlNamespaceManager value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.CacheModelFlushOnExecuteStatementsGet">
            <summary>设置 ConfigurationScope.get_CacheModelFlushOnExecuteStatements() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.CacheModelFlushOnExecuteStatementsSetHybridDictionary">
            <summary>设置 ConfigurationScope.set_CacheModelFlushOnExecuteStatements(HybridDictionary value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.DataExchangeFactoryGet">
            <summary>设置 ConfigurationScope.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.DataSourceGet">
            <summary>设置 ConfigurationScope.get_DataSource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.DataSourceSetDataSource">
            <summary>设置 ConfigurationScope.set_DataSource(DataSource value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.ErrorContextGet">
            <summary>设置 ConfigurationScope.get_ErrorContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.IsCacheModelsEnabledGet">
            <summary>设置 ConfigurationScope.get_IsCacheModelsEnabled() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.IsCacheModelsEnabledSetBoolean">
            <summary>设置 ConfigurationScope.set_IsCacheModelsEnabled(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.IsCallFromDaoGet">
            <summary>设置 ConfigurationScope.get_IsCallFromDao() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.IsCallFromDaoSetBoolean">
            <summary>设置 ConfigurationScope.set_IsCallFromDao(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.IsXmlValidGet">
            <summary>设置 ConfigurationScope.get_IsXmlValid() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.IsXmlValidSetBoolean">
            <summary>设置 ConfigurationScope.set_IsXmlValid(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.NodeContextGet">
            <summary>设置 ConfigurationScope.get_NodeContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.NodeContextSetXmlNode">
            <summary>设置 ConfigurationScope.set_NodeContext(XmlNode value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.PropertiesGet">
            <summary>设置 ConfigurationScope.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.ProvidersGet">
            <summary>设置 ConfigurationScope.get_Providers() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.ResolveTypeHandlerTypeStringStringStringBoolean">
            <summary>设置 ConfigurationScope.ResolveTypeHandler(Type clazz, String memberName, String clrType, String dbType, Boolean forSetter) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapConfigDocumentGet">
            <summary>设置 ConfigurationScope.get_SqlMapConfigDocument() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapConfigDocumentSetXmlDocument">
            <summary>设置 ConfigurationScope.set_SqlMapConfigDocument(XmlDocument value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapDocumentGet">
            <summary>设置 ConfigurationScope.get_SqlMapDocument() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapDocumentSetXmlDocument">
            <summary>设置 ConfigurationScope.set_SqlMapDocument(XmlDocument value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapNamespaceGet">
            <summary>设置 ConfigurationScope.get_SqlMapNamespace() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapNamespaceSetString">
            <summary>设置 ConfigurationScope.set_SqlMapNamespace(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapperGet">
            <summary>设置 ConfigurationScope.get_SqlMapper() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.SqlMapperSetSqlMapper">
            <summary>设置 ConfigurationScope.set_SqlMapper(SqlMapper value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.UseConfigFileWatcherGet">
            <summary>设置 ConfigurationScope.get_UseConfigFileWatcher() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.UseConfigFileWatcherSetBoolean">
            <summary>设置 ConfigurationScope.set_UseConfigFileWatcher(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.UseReflectionOptimizerGet">
            <summary>设置 ConfigurationScope.get_UseReflectionOptimizer() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.UseReflectionOptimizerSetBoolean">
            <summary>设置 ConfigurationScope.set_UseReflectionOptimizer(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.UseStatementNamespacesGet">
            <summary>设置 ConfigurationScope.get_UseStatementNamespaces() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.UseStatementNamespacesSetBoolean">
            <summary>设置 ConfigurationScope.set_UseStatementNamespaces(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.ValidateSqlMapGet">
            <summary>设置 ConfigurationScope.get_ValidateSqlMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.ValidateSqlMapSetBoolean">
            <summary>设置 ConfigurationScope.set_ValidateSqlMap(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.XmlNamespaceManagerGet">
            <summary>设置 ConfigurationScope.get_XmlNamespaceManager() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimConfigurationScope.AllInstances.XmlNamespaceManagerSetXmlNamespaceManager">
            <summary>设置 ConfigurationScope.set_XmlNamespaceManager(XmlNamespaceManager value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext">
            <summary>IBatisNet.DataMapper.Scope.ErrorContext 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.#ctor(IBatisNet.DataMapper.Scope.ErrorContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.ActivityGet">
            <summary>设置 ErrorContext.get_Activity() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.ActivitySetString">
            <summary>设置 ErrorContext.set_Activity(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.Constructor">
            <summary>设置 ErrorContext.ErrorContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.MoreInfoGet">
            <summary>设置 ErrorContext.get_MoreInfo() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.MoreInfoSetString">
            <summary>设置 ErrorContext.set_MoreInfo(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.ObjectIdGet">
            <summary>设置 ErrorContext.get_ObjectId() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.ObjectIdSetString">
            <summary>设置 ErrorContext.set_ObjectId(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.Reset">
            <summary>设置 ErrorContext.Reset() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.ResourceGet">
            <summary>设置 ErrorContext.get_Resource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.ResourceSetString">
            <summary>设置 ErrorContext.set_Resource(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.ToString">
            <summary>设置 ErrorContext.ToString() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.ActivityGet">
            <summary>设置 ErrorContext.get_Activity() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.ActivitySetString">
            <summary>设置 ErrorContext.set_Activity(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.MoreInfoGet">
            <summary>设置 ErrorContext.get_MoreInfo() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.MoreInfoSetString">
            <summary>设置 ErrorContext.set_MoreInfo(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.ObjectIdGet">
            <summary>设置 ErrorContext.get_ObjectId() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.ObjectIdSetString">
            <summary>设置 ErrorContext.set_ObjectId(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.Reset">
            <summary>设置 ErrorContext.Reset() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.ResourceGet">
            <summary>设置 ErrorContext.get_Resource() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.ResourceSetString">
            <summary>设置 ErrorContext.set_Resource(String value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimErrorContext.AllInstances.ToString01">
            <summary>设置 ErrorContext.ToString() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope">
            <summary>IBatisNet.DataMapper.Scope.RequestScope 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.#ctor(IBatisNet.DataMapper.Scope.RequestScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.Bind(IBatisNet.DataMapper.Scope.IScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.ConstructorDataExchangeFactoryIDalSessionIStatement">
            <summary>设置 RequestScope.RequestScope(DataExchangeFactory dataExchangeFactory, IDalSession session, IStatement statement) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.DataExchangeFactoryGet">
            <summary>设置 RequestScope.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.EqualsObject">
            <summary>设置 RequestScope.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.ErrorContextGet">
            <summary>设置 RequestScope.get_ErrorContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.GetHashCode">
            <summary>设置 RequestScope.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.GetNextId">
            <summary>设置 RequestScope.GetNextId() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.IDbCommandGet">
            <summary>设置 RequestScope.get_IDbCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.IDbCommandSetIDbCommand">
            <summary>设置 RequestScope.set_IDbCommand(IDbCommand value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.IsRowDataFoundGet">
            <summary>设置 RequestScope.get_IsRowDataFound() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.IsRowDataFoundSetBoolean">
            <summary>设置 RequestScope.set_IsRowDataFound(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.MappedStatementGet">
            <summary>设置 RequestScope.get_MappedStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.MappedStatementSetIMappedStatement">
            <summary>设置 RequestScope.set_MappedStatement(IMappedStatement value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.ParameterMapGet">
            <summary>设置 RequestScope.get_ParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.ParameterMapSetParameterMap">
            <summary>设置 RequestScope.set_ParameterMap(ParameterMap value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.PreparedStatementGet">
            <summary>设置 RequestScope.get_PreparedStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.PreparedStatementSetPreparedStatement">
            <summary>设置 RequestScope.set_PreparedStatement(PreparedStatement value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.QueueSelectGet">
            <summary>设置 RequestScope.get_QueueSelect() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.QueueSelectSetQueue">
            <summary>设置 RequestScope.set_QueueSelect(Queue value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.ResultMapGet">
            <summary>设置 RequestScope.get_ResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.SessionGet">
            <summary>设置 RequestScope.get_Session() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.StatementGet">
            <summary>设置 RequestScope.get_Statement() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.DataExchangeFactoryGet">
            <summary>设置 RequestScope.get_DataExchangeFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.EqualsObject">
            <summary>设置 RequestScope.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.ErrorContextGet">
            <summary>设置 RequestScope.get_ErrorContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.GetHashCode01">
            <summary>设置 RequestScope.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.IDbCommandGet">
            <summary>设置 RequestScope.get_IDbCommand() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.IDbCommandSetIDbCommand">
            <summary>设置 RequestScope.set_IDbCommand(IDbCommand value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.IsRowDataFoundGet">
            <summary>设置 RequestScope.get_IsRowDataFound() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.IsRowDataFoundSetBoolean">
            <summary>设置 RequestScope.set_IsRowDataFound(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.MappedStatementGet">
            <summary>设置 RequestScope.get_MappedStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.MappedStatementSetIMappedStatement">
            <summary>设置 RequestScope.set_MappedStatement(IMappedStatement value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.ParameterMapGet">
            <summary>设置 RequestScope.get_ParameterMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.ParameterMapSetParameterMap">
            <summary>设置 RequestScope.set_ParameterMap(ParameterMap value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.PreparedStatementGet">
            <summary>设置 RequestScope.get_PreparedStatement() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.PreparedStatementSetPreparedStatement">
            <summary>设置 RequestScope.set_PreparedStatement(PreparedStatement value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.QueueSelectGet">
            <summary>设置 RequestScope.get_QueueSelect() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.QueueSelectSetQueue">
            <summary>设置 RequestScope.set_QueueSelect(Queue value) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.ResultMapGet">
            <summary>设置 RequestScope.get_ResultMap() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.SessionGet">
            <summary>设置 RequestScope.get_Session() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.ShimRequestScope.AllInstances.StatementGet">
            <summary>设置 RequestScope.get_Statement() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.StubConfigurationScope">
            <summary>IBatisNet.DataMapper.Scope.ConfigurationScope 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubConfigurationScope.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubConfigurationScope.InitializeStub">
            <summary>初始化 type StubConfigurationScope 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubConfigurationScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubConfigurationScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubConfigurationScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext">
            <summary>IBatisNet.DataMapper.Scope.ErrorContext 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext.InitializeStub">
            <summary>初始化 type StubErrorContext 的新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext.ToString">
            <summary>设置 ErrorContext.ToString() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext.ToString01">
            <summary>设置 ErrorContext.ToString() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubErrorContext.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.StubIScope">
            <summary>IBatisNet.DataMapper.Scope.IScope 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubIScope.#ctor">
            <summary>初始化 type StubIScope 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Scope.Fakes.StubIScope.DataExchangeFactoryGet">
            <summary>设置 IScope.get_DataExchangeFactory() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Scope.Fakes.StubIScope.ErrorContextGet">
            <summary>设置 IScope.get_ErrorContext() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubIScope.ibndm::IBatisNet#DataMapper#Scope#IScope#DataExchangeFactory">
            <summary>设置 IScope.get_DataExchangeFactory() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubIScope.ibndm::IBatisNet#DataMapper#Scope#IScope#ErrorContext">
            <summary>设置 IScope.get_ErrorContext() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope">
            <summary>IBatisNet.DataMapper.Scope.RequestScope 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.#ctor(IBatisNet.DataMapper.DataExchange.DataExchangeFactory,IBatisNet.Common.IDalSession,IBatisNet.DataMapper.Configuration.Statements.IStatement)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.Equals(System.Object)">
            <summary>设置 RequestScope.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.EqualsObject">
            <summary>设置 RequestScope.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.GetHashCode">
            <summary>设置 RequestScope.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.GetHashCode01">
            <summary>设置 RequestScope.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.InitializeStub">
            <summary>初始化 type StubRequestScope 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.Scope.Fakes.StubRequestScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore">
            <summary>IBatisNet.DataMapper.SessionStore.AbstractSessionStore 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore.#ctor(IBatisNet.DataMapper.SessionStore.AbstractSessionStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore.Bind(IBatisNet.DataMapper.SessionStore.ISessionStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore.ConstructorString">
            <summary>设置 AbstractSessionStore.AbstractSessionStore(String sqlMapperId) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimAbstractSessionStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore">
            <summary>IBatisNet.DataMapper.SessionStore.CallContextSessionStore 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.#ctor(IBatisNet.DataMapper.SessionStore.CallContextSessionStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.Bind(IBatisNet.DataMapper.SessionStore.ISessionStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.ConstructorString">
            <summary>设置 CallContextSessionStore.CallContextSessionStore(String sqlMapperId) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.Dispose">
            <summary>设置 CallContextSessionStore.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.LocalSessionGet">
            <summary>设置 CallContextSessionStore.get_LocalSession() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.StoreSqlMapSession">
            <summary>设置 CallContextSessionStore.Store(SqlMapSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.AllInstances.Dispose">
            <summary>设置 CallContextSessionStore.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.AllInstances.LocalSessionGet">
            <summary>设置 CallContextSessionStore.get_LocalSession() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimCallContextSessionStore.AllInstances.StoreSqlMapSession">
            <summary>设置 CallContextSessionStore.Store(SqlMapSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory">
            <summary>IBatisNet.DataMapper.SessionStore.SessionStoreFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.#ctor(IBatisNet.DataMapper.SessionStore.SessionStoreFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.Constructor">
            <summary>设置 SessionStoreFactory.SessionStoreFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.GetSessionStoreString">
            <summary>设置 SessionStoreFactory.GetSessionStore(String sqlMapperId) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimSessionStoreFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore">
            <summary>IBatisNet.DataMapper.SessionStore.WebSessionStore 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.#ctor(IBatisNet.DataMapper.SessionStore.WebSessionStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.Bind(IBatisNet.DataMapper.SessionStore.ISessionStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.ConstructorString">
            <summary>设置 WebSessionStore.WebSessionStore(String sqlMapperId) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.Dispose">
            <summary>设置 WebSessionStore.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.LocalSessionGet">
            <summary>设置 WebSessionStore.get_LocalSession() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.ObtainSessionContext">
            <summary>设置 WebSessionStore.ObtainSessionContext() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.StoreSqlMapSession">
            <summary>设置 WebSessionStore.Store(SqlMapSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.AllInstances.Dispose">
            <summary>设置 WebSessionStore.Dispose() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.AllInstances.LocalSessionGet">
            <summary>设置 WebSessionStore.get_LocalSession() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.ShimWebSessionStore.AllInstances.StoreSqlMapSession">
            <summary>设置 WebSessionStore.Store(SqlMapSession session) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore">
            <summary>IBatisNet.DataMapper.SessionStore.AbstractSessionStore 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.Dispose">
            <summary>设置 AbstractSessionStore.Dispose() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.Dispose01">
            <summary>设置 AbstractSessionStore.Dispose() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.InitializeStub">
            <summary>初始化 type StubAbstractSessionStore 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.LocalSessionGet">
            <summary>设置 AbstractSessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.Store(IBatisNet.DataMapper.SqlMapSession)">
            <summary>设置 AbstractSessionStore.Store(SqlMapSession session) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.StoreSqlMapSession">
            <summary>设置 AbstractSessionStore.Store(SqlMapSession session) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubAbstractSessionStore.LocalSession">
            <summary>设置 AbstractSessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore">
            <summary>IBatisNet.DataMapper.SessionStore.CallContextSessionStore 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.Dispose">
            <summary>设置 CallContextSessionStore.Dispose() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.Dispose01">
            <summary>设置 CallContextSessionStore.Dispose() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.InitializeStub">
            <summary>初始化 type StubCallContextSessionStore 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.LocalSessionGet">
            <summary>设置 CallContextSessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.Store(IBatisNet.DataMapper.SqlMapSession)">
            <summary>设置 CallContextSessionStore.Store(SqlMapSession session) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.StoreSqlMapSession">
            <summary>设置 CallContextSessionStore.Store(SqlMapSession session) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubCallContextSessionStore.LocalSession">
            <summary>设置 CallContextSessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore">
            <summary>IBatisNet.DataMapper.SessionStore.ISessionStore 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore.#ctor">
            <summary>初始化 type StubISessionStore 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore.Dispose">
            <summary>设置 ISessionStore.Dispose() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore.ibndm::IBatisNet#DataMapper#SessionStore#ISessionStore#Dispose">
            <summary>设置 ISessionStore.Dispose() 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore.ibndm::IBatisNet#DataMapper#SessionStore#ISessionStore#Store(IBatisNet.DataMapper.SqlMapSession)">
            <summary>设置 ISessionStore.Store(SqlMapSession session) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore.LocalSessionGet">
            <summary>设置 ISessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore.StoreSqlMapSession">
            <summary>设置 ISessionStore.Store(SqlMapSession session) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubISessionStore.ibndm::IBatisNet#DataMapper#SessionStore#ISessionStore#LocalSession">
            <summary>设置 ISessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.StubSessionStoreFactory">
            <summary>IBatisNet.DataMapper.SessionStore.SessionStoreFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubSessionStoreFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubSessionStoreFactory.InitializeStub">
            <summary>初始化 type StubSessionStoreFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubSessionStoreFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubSessionStoreFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubSessionStoreFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore">
            <summary>IBatisNet.DataMapper.SessionStore.WebSessionStore 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.Dispose">
            <summary>设置 WebSessionStore.Dispose() 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.Dispose01">
            <summary>设置 WebSessionStore.Dispose() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.InitializeStub">
            <summary>初始化 type StubWebSessionStore 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.LocalSessionGet">
            <summary>设置 WebSessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.Store(IBatisNet.DataMapper.SqlMapSession)">
            <summary>设置 WebSessionStore.Store(SqlMapSession session) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.StoreSqlMapSession">
            <summary>设置 WebSessionStore.Store(SqlMapSession session) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.SessionStore.Fakes.StubWebSessionStore.LocalSession">
            <summary>设置 WebSessionStore.get_LocalSession() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl">
            <summary>IBatisNet.DataMapper.TypeHandlers.ParameterSetterImpl 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.#ctor(IBatisNet.DataMapper.TypeHandlers.ParameterSetterImpl)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.Bind(IBatisNet.DataMapper.TypeHandlers.IParameterSetter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.ConstructorIDataParameter">
            <summary>设置 ParameterSetterImpl.ParameterSetterImpl(IDataParameter dataParameter) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.DataParameterGet">
            <summary>设置 ParameterSetterImpl.get_DataParameter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.ValueSetObject">
            <summary>设置 ParameterSetterImpl.set_Value(Object value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.AllInstances.DataParameterGet">
            <summary>设置 ParameterSetterImpl.get_DataParameter() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimParameterSetterImpl.AllInstances.ValueSetObject">
            <summary>设置 ParameterSetterImpl.set_Value(Object value) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl">
            <summary>IBatisNet.DataMapper.TypeHandlers.ResultGetterImpl 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.#ctor(IBatisNet.DataMapper.TypeHandlers.ResultGetterImpl)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.Bind(IBatisNet.DataMapper.TypeHandlers.IResultGetter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.ConstructorIDataReaderInt32">
            <summary>设置 ResultGetterImpl.ResultGetterImpl(IDataReader dataReader, Int32 columnIndex) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.ConstructorIDataReaderString">
            <summary>设置 ResultGetterImpl.ResultGetterImpl(IDataReader dataReader, String columnName) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.ConstructorObject">
            <summary>设置 ResultGetterImpl.ResultGetterImpl(Object outputValue) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.DataReaderGet">
            <summary>设置 ResultGetterImpl.get_DataReader() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.ValueGet">
            <summary>设置 ResultGetterImpl.get_Value() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.AllInstances.DataReaderGet">
            <summary>设置 ResultGetterImpl.get_DataReader() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimResultGetterImpl.AllInstances.ValueGet">
            <summary>设置 ResultGetterImpl.get_Value() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory">
            <summary>IBatisNet.DataMapper.TypeHandlers.TypeHandlerFactory 的填充码类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.#ctor(IBatisNet.DataMapper.TypeHandlers.TypeHandlerFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AddTypeAliasStringTypeAlias">
            <summary>设置 TypeHandlerFactory.AddTypeAlias(String key, TypeAlias typeAlias) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.Constructor">
            <summary>设置 TypeHandlerFactory.TypeHandlerFactory() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.GetPrivateTypeHandlerTypeString">
            <summary>设置 TypeHandlerFactory.GetPrivateTypeHandler(Type type, String dbType) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.GetTypeAliasString">
            <summary>设置 TypeHandlerFactory.GetTypeAlias(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.GetTypeHandlerType">
            <summary>设置 TypeHandlerFactory.GetTypeHandler(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.GetTypeHandlerTypeString">
            <summary>设置 TypeHandlerFactory.GetTypeHandler(Type type, String dbType) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.GetTypeString">
            <summary>设置 TypeHandlerFactory.GetType(String className) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.GetUnkownTypeHandler">
            <summary>设置 TypeHandlerFactory.GetUnkownTypeHandler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.IsSimpleTypeType">
            <summary>设置 TypeHandlerFactory.IsSimpleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.RegisterTypeITypeHandler">
            <summary>设置 TypeHandlerFactory.Register(Type type, ITypeHandler handler) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.RegisterTypeStringITypeHandler">
            <summary>设置 TypeHandlerFactory.Register(Type type, String dbType, ITypeHandler handler) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.StaticConstructor">
            <summary>设置 TypeHandlerFactory.TypeHandlerFactory() 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.AddTypeAliasStringTypeAlias">
            <summary>设置 TypeHandlerFactory.AddTypeAlias(String key, TypeAlias typeAlias) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.GetPrivateTypeHandlerTypeString">
            <summary>设置 TypeHandlerFactory.GetPrivateTypeHandler(Type type, String dbType) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.GetTypeAliasString">
            <summary>设置 TypeHandlerFactory.GetTypeAlias(String name) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.GetTypeHandlerType">
            <summary>设置 TypeHandlerFactory.GetTypeHandler(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.GetTypeHandlerTypeString">
            <summary>设置 TypeHandlerFactory.GetTypeHandler(Type type, String dbType) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.GetTypeString">
            <summary>设置 TypeHandlerFactory.GetType(String className) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.GetUnkownTypeHandler">
            <summary>设置 TypeHandlerFactory.GetUnkownTypeHandler() 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.IsSimpleTypeType">
            <summary>设置 TypeHandlerFactory.IsSimpleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.RegisterTypeITypeHandler">
            <summary>设置 TypeHandlerFactory.Register(Type type, ITypeHandler handler) 的 填充码</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.ShimTypeHandlerFactory.AllInstances.RegisterTypeStringITypeHandler">
            <summary>设置 TypeHandlerFactory.Register(Type type, String dbType, ITypeHandler handler) 的 填充码</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIParameterSetter">
            <summary>IBatisNet.DataMapper.TypeHandlers.IParameterSetter 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIParameterSetter.#ctor">
            <summary>初始化 type StubIParameterSetter 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIParameterSetter.DataParameterGet">
            <summary>设置 IParameterSetter.get_DataParameter() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIParameterSetter.ValueSetObject">
            <summary>设置 IParameterSetter.set_Value(Object value) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIParameterSetter.ibndm::IBatisNet#DataMapper#TypeHandlers#IParameterSetter#DataParameter">
            <summary>设置 IParameterSetter.get_DataParameter() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIParameterSetter.ibndm::IBatisNet#DataMapper#TypeHandlers#IParameterSetter#Value">
            <summary>设置 IParameterSetter.set_Value(Object value) 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIResultGetter">
            <summary>IBatisNet.DataMapper.TypeHandlers.IResultGetter 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIResultGetter.#ctor">
            <summary>初始化 type StubIResultGetter 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIResultGetter.DataReaderGet">
            <summary>设置 IResultGetter.get_DataReader() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIResultGetter.ValueGet">
            <summary>设置 IResultGetter.get_Value() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIResultGetter.ibndm::IBatisNet#DataMapper#TypeHandlers#IResultGetter#DataReader">
            <summary>设置 IResultGetter.get_DataReader() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubIResultGetter.ibndm::IBatisNet#DataMapper#TypeHandlers#IResultGetter#Value">
            <summary>设置 IResultGetter.get_Value() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler">
            <summary>IBatisNet.DataMapper.TypeHandlers.ITypeHandler 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.#ctor">
            <summary>初始化 type StubITypeHandler 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.EqualsObjectString">
            <summary>设置 ITypeHandler.Equals(Object obj, String str) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.GetDataBaseValueObjectType">
            <summary>设置 ITypeHandler.GetDataBaseValue(Object outputValue, Type parameterType) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.GetValueByIndexResultPropertyIDataReader">
            <summary>设置 ITypeHandler.GetValueByIndex(ResultProperty mapping, IDataReader dataReader) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.GetValueByNameResultPropertyIDataReader">
            <summary>设置 ITypeHandler.GetValueByName(ResultProperty mapping, IDataReader dataReader) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#Equals(System.Object,System.String)">
            <summary>设置 ITypeHandler.Equals(Object obj, String str) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#GetDataBaseValue(System.Object,System.Type)">
            <summary>设置 ITypeHandler.GetDataBaseValue(Object outputValue, Type parameterType) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#GetValueByIndex(IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>设置 ITypeHandler.GetValueByIndex(ResultProperty mapping, IDataReader dataReader) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#GetValueByName(IBatisNet.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>设置 ITypeHandler.GetValueByName(ResultProperty mapping, IDataReader dataReader) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>设置 ITypeHandler.SetParameter(IDataParameter dataParameter, Object parameterValue, String dbType) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#ValueOf(System.Type,System.String)">
            <summary>设置 ITypeHandler.ValueOf(Type type, String s) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.IsSimpleTypeGet">
            <summary>设置 ITypeHandler.get_IsSimpleType() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.NullValueGet">
            <summary>设置 ITypeHandler.get_NullValue() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.SetParameterIDataParameterObjectString">
            <summary>设置 ITypeHandler.SetParameter(IDataParameter dataParameter, Object parameterValue, String dbType) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ValueOfTypeString">
            <summary>设置 ITypeHandler.ValueOf(Type type, String s) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#IsSimpleType">
            <summary>设置 ITypeHandler.get_IsSimpleType() 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandler.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandler#NullValue">
            <summary>设置 ITypeHandler.get_NullValue() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback">
            <summary>IBatisNet.DataMapper.TypeHandlers.ITypeHandlerCallback 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.#ctor">
            <summary>初始化 type StubITypeHandlerCallback 的新实例</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.GetResultIResultGetter">
            <summary>设置 ITypeHandlerCallback.GetResult(IResultGetter getter) 的 stub</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandlerCallback#GetResult(IBatisNet.DataMapper.TypeHandlers.IResultGetter)">
            <summary>设置 ITypeHandlerCallback.GetResult(IResultGetter getter) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandlerCallback#SetParameter(IBatisNet.DataMapper.TypeHandlers.IParameterSetter,System.Object)">
            <summary>设置 ITypeHandlerCallback.SetParameter(IParameterSetter setter, Object parameter) 的 存根</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandlerCallback#ValueOf(System.String)">
            <summary>设置 ITypeHandlerCallback.ValueOf(String s) 的 存根</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.NullValueGet">
            <summary>设置 ITypeHandlerCallback.get_NullValue() 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.SetParameterIParameterSetterObject">
            <summary>设置 ITypeHandlerCallback.SetParameter(IParameterSetter setter, Object parameter) 的 stub</summary>
        </member>
        <member name="F:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.ValueOfString">
            <summary>设置 ITypeHandlerCallback.ValueOf(String s) 的 stub</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubITypeHandlerCallback.ibndm::IBatisNet#DataMapper#TypeHandlers#ITypeHandlerCallback#NullValue">
            <summary>设置 ITypeHandlerCallback.get_NullValue() 的 stub</summary>
        </member>
        <member name="T:IBatisNet.DataMapper.TypeHandlers.Fakes.StubTypeHandlerFactory">
            <summary>IBatisNet.DataMapper.TypeHandlers.TypeHandlerFactory 的存根类型</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubTypeHandlerFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:IBatisNet.DataMapper.TypeHandlers.Fakes.StubTypeHandlerFactory.InitializeStub">
            <summary>初始化 type StubTypeHandlerFactory 的新实例</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubTypeHandlerFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubTypeHandlerFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:IBatisNet.DataMapper.TypeHandlers.Fakes.StubTypeHandlerFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.IBatisNetDataMapperDelegates">
            <summary>包含用于 IBatisNet.DataMapper 的存根和填充码的自定义委托</summary>
        </member>
    </members>
</doc>
