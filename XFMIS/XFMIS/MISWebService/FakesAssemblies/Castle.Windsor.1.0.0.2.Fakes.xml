<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Windsor.1.0.0.2.Fakes</name>
    </assembly>
    <members>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter">
            <summary>Castle.Windsor.Adapters.ComponentModel.ContainerAdapter 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.#ctor(Castle.Windsor.Adapters.ComponentModel.ContainerAdapter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Bind(Castle.Windsor.IContainerAccessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Bind(Castle.Windsor.Adapters.ComponentModel.IContainerAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Bind(System.ComponentModel.IComponent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Bind(System.ComponentModel.IContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Bind(System.ComponentModel.Design.IServiceContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Bind(System.IServiceProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.Constructor">
            <summary>设置 ContainerAdapter.ContainerAdapter() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.ConstructorIServiceProvider">
            <summary>设置 ContainerAdapter.ContainerAdapter(IServiceProvider parentProvider) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.ConstructorIWindsorContainer">
            <summary>设置 ContainerAdapter.ContainerAdapter(IWindsorContainer container) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.ConstructorIWindsorContainerIServiceProvider">
            <summary>设置 ContainerAdapter.ContainerAdapter(IWindsorContainer container, IServiceProvider parentProvider) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.CreateDefaultWindsorContainer">
            <summary>设置 ContainerAdapter.CreateDefaultWindsorContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.InternalDisposeContainer">
            <summary>设置 ContainerAdapter.InternalDisposeContainer() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.AllInstances.CreateDefaultWindsorContainer">
            <summary>设置 ContainerAdapter.CreateDefaultWindsorContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerAdapter.AllInstances.InternalDisposeContainer">
            <summary>设置 ContainerAdapter.InternalDisposeContainer() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper">
            <summary>Castle.Windsor.Adapters.ComponentModel.ContainerWrapper 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.#ctor(Castle.Windsor.Adapters.ComponentModel.ContainerWrapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Bind(Castle.Windsor.IContainerAccessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Bind(Castle.Windsor.Adapters.ComponentModel.IContainerAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Bind(System.ComponentModel.IComponent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Bind(System.ComponentModel.IContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Bind(System.ComponentModel.Design.IServiceContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Bind(System.IServiceProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AddIComponent">
            <summary>设置 ContainerWrapper.Add(IComponent component) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AddIComponentString">
            <summary>设置 ContainerWrapper.Add(IComponent component, String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AddServiceTypeObject">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AddServiceTypeObjectBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AddServiceTypeServiceCreatorCallback">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AddServiceTypeServiceCreatorCallbackBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.ComponentsGet">
            <summary>设置 ContainerWrapper.get_Components() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.ConstructorIWindsorContainer">
            <summary>设置 ContainerWrapper.ContainerWrapper(IWindsorContainer container) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.ConstructorIWindsorContainerIServiceProvider">
            <summary>设置 ContainerWrapper.ContainerWrapper(IWindsorContainer container, IServiceProvider parentProvider) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.ContainerGet">
            <summary>设置 ContainerWrapper.get_Container() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.CreateDefaultWindsorContainer">
            <summary>设置 ContainerWrapper.CreateDefaultWindsorContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.CreateSiteIComponentString">
            <summary>设置 ContainerWrapper.CreateSite(IComponent component, String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.Dispose">
            <summary>设置 ContainerWrapper.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.DisposeBoolean">
            <summary>设置 ContainerWrapper.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.DisposeComponent">
            <summary>设置 ContainerWrapper.DisposeComponent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.DisposeContainer">
            <summary>设置 ContainerWrapper.DisposeContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.DisposedAddEventHandler">
            <summary>设置 ContainerWrapper.add_Disposed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.DisposedRemoveEventHandler">
            <summary>设置 ContainerWrapper.remove_Disposed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.GetServiceNameType">
            <summary>设置 ContainerWrapper.GetServiceName(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.GetServiceType">
            <summary>设置 ContainerWrapper.GetService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.HasServiceType">
            <summary>设置 ContainerWrapper.HasService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.InternalDisposeContainer">
            <summary>设置 ContainerWrapper.InternalDisposeContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.IsIntrinsicServiceType">
            <summary>设置 ContainerWrapper.IsIntrinsicService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.KernelGet">
            <summary>设置 ContainerWrapper.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.OnComponentUnregisteredStringIHandler">
            <summary>设置 ContainerWrapper.OnComponentUnregistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.ParentServicesGet">
            <summary>设置 ContainerWrapper.get_ParentServices() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.RaiseDisposed">
            <summary>设置 ContainerWrapper.RaiseDisposed() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.RegisterAdapterWithKernel">
            <summary>设置 ContainerWrapper.RegisterAdapterWithKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.RemoveIComponent">
            <summary>设置 ContainerWrapper.Remove(IComponent component) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.RemoveIComponentBoolean">
            <summary>设置 ContainerWrapper.Remove(IComponent component, Boolean fromKernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.RemoveServiceType">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.RemoveServiceTypeBoolean">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType, Boolean promote) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.SiteGet">
            <summary>设置 ContainerWrapper.get_Site() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.SiteSetISite">
            <summary>设置 ContainerWrapper.set_Site(ISite value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.AddIComponent">
            <summary>设置 ContainerWrapper.Add(IComponent component) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.AddIComponentString">
            <summary>设置 ContainerWrapper.Add(IComponent component, String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.AddServiceTypeObject">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.AddServiceTypeObjectBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.AddServiceTypeServiceCreatorCallback">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.AddServiceTypeServiceCreatorCallbackBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.ComponentsGet">
            <summary>设置 ContainerWrapper.get_Components() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.ContainerGet">
            <summary>设置 ContainerWrapper.get_Container() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.CreateDefaultWindsorContainer">
            <summary>设置 ContainerWrapper.CreateDefaultWindsorContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.CreateSiteIComponentString">
            <summary>设置 ContainerWrapper.CreateSite(IComponent component, String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.Dispose">
            <summary>设置 ContainerWrapper.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.DisposeBoolean">
            <summary>设置 ContainerWrapper.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.DisposeComponent">
            <summary>设置 ContainerWrapper.DisposeComponent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.DisposeContainer">
            <summary>设置 ContainerWrapper.DisposeContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.DisposedAddEventHandler">
            <summary>设置 ContainerWrapper.add_Disposed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.DisposedRemoveEventHandler">
            <summary>设置 ContainerWrapper.remove_Disposed(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.GetServiceNameType">
            <summary>设置 ContainerWrapper.GetServiceName(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.GetServiceType">
            <summary>设置 ContainerWrapper.GetService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.HasServiceType">
            <summary>设置 ContainerWrapper.HasService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.InternalDisposeContainer">
            <summary>设置 ContainerWrapper.InternalDisposeContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.IsIntrinsicServiceType">
            <summary>设置 ContainerWrapper.IsIntrinsicService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.KernelGet">
            <summary>设置 ContainerWrapper.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.OnComponentUnregisteredStringIHandler">
            <summary>设置 ContainerWrapper.OnComponentUnregistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.ParentServicesGet">
            <summary>设置 ContainerWrapper.get_ParentServices() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.RaiseDisposed">
            <summary>设置 ContainerWrapper.RaiseDisposed() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.RegisterAdapterWithKernel">
            <summary>设置 ContainerWrapper.RegisterAdapterWithKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.RemoveIComponent">
            <summary>设置 ContainerWrapper.Remove(IComponent component) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.RemoveIComponentBoolean">
            <summary>设置 ContainerWrapper.Remove(IComponent component, Boolean fromKernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.RemoveServiceType">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.RemoveServiceTypeBoolean">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType, Boolean promote) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.SiteGet">
            <summary>设置 ContainerWrapper.get_Site() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.ShimContainerWrapper.AllInstances.SiteSetISite">
            <summary>设置 ContainerWrapper.set_Site(ISite value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter">
            <summary>Castle.Windsor.Adapters.ComponentModel.ContainerAdapter 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.#ctor(System.IServiceProvider)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.#ctor(Castle.Windsor.IWindsorContainer,System.IServiceProvider)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.Add(System.ComponentModel.IComponent)">
            <summary>设置 ContainerWrapper.Add(IComponent component) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.Add(System.ComponentModel.IComponent,System.String)">
            <summary>设置 ContainerWrapper.Add(IComponent component, String name) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddIComponent">
            <summary>设置 ContainerWrapper.Add(IComponent component) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddIComponentString">
            <summary>设置 ContainerWrapper.Add(IComponent component, String name) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddService(System.Type,System.Object)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddService(System.Type,System.Object,System.Boolean)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddServiceTypeObject">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddServiceTypeObjectBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddServiceTypeServiceCreatorCallback">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AddServiceTypeServiceCreatorCallbackBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.AttachBackingFieldToSite">
            <summary>附加委托以将 StubContainerAdapter.Site 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.ComponentsGet">
            <summary>设置 ContainerWrapper.get_Components() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.CreateDefaultWindsorContainer">
            <summary>设置 ContainerAdapter.CreateDefaultWindsorContainer() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.CreateDefaultWindsorContainer01">
            <summary>设置 ContainerAdapter.CreateDefaultWindsorContainer() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.CreateSite(System.ComponentModel.IComponent,System.String)">
            <summary>设置 ContainerWrapper.CreateSite(IComponent component, String name) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.CreateSiteIComponentString">
            <summary>设置 ContainerWrapper.CreateSite(IComponent component, String name) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.Dispose(System.Boolean)">
            <summary>设置 ContainerWrapper.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.DisposeBoolean">
            <summary>设置 ContainerWrapper.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.GetService(System.Type)">
            <summary>设置 ContainerWrapper.GetService(Type serviceType) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.GetServiceType">
            <summary>设置 ContainerWrapper.GetService(Type serviceType) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.InitializeStub">
            <summary>初始化 type StubContainerAdapter 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.InternalDisposeContainer">
            <summary>设置 ContainerAdapter.InternalDisposeContainer() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.InternalDisposeContainer01">
            <summary>设置 ContainerAdapter.InternalDisposeContainer() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.Remove(System.ComponentModel.IComponent)">
            <summary>设置 ContainerWrapper.Remove(IComponent component) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.RemoveIComponent">
            <summary>设置 ContainerWrapper.Remove(IComponent component) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.RemoveService(System.Type)">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.RemoveService(System.Type,System.Boolean)">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType, Boolean promote) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.RemoveServiceType">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.RemoveServiceTypeBoolean">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType, Boolean promote) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.SiteGet">
            <summary>设置 ContainerWrapper.get_Site() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.SiteSetISite">
            <summary>设置 ContainerWrapper.set_Site(ISite value) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.Components">
            <summary>设置 ContainerWrapper.get_Components() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerAdapter.Site">
            <summary>设置 ContainerWrapper.get_Site() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper">
            <summary>Castle.Windsor.Adapters.ComponentModel.ContainerWrapper 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.#ctor(Castle.Windsor.IWindsorContainer,System.IServiceProvider)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.Add(System.ComponentModel.IComponent)">
            <summary>设置 ContainerWrapper.Add(IComponent component) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.Add(System.ComponentModel.IComponent,System.String)">
            <summary>设置 ContainerWrapper.Add(IComponent component, String name) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddIComponent">
            <summary>设置 ContainerWrapper.Add(IComponent component) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddIComponentString">
            <summary>设置 ContainerWrapper.Add(IComponent component, String name) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddService(System.Type,System.Object)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddService(System.Type,System.Object,System.Boolean)">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddServiceTypeObject">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddServiceTypeObjectBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddServiceTypeServiceCreatorCallback">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AddServiceTypeServiceCreatorCallbackBoolean">
            <summary>设置 ContainerWrapper.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.AttachBackingFieldToSite">
            <summary>附加委托以将 StubContainerWrapper.Site 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.ComponentsGet">
            <summary>设置 ContainerWrapper.get_Components() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.CreateDefaultWindsorContainer">
            <summary>设置 ContainerWrapper.CreateDefaultWindsorContainer() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.CreateDefaultWindsorContainer01">
            <summary>设置 ContainerWrapper.CreateDefaultWindsorContainer() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.CreateSite(System.ComponentModel.IComponent,System.String)">
            <summary>设置 ContainerWrapper.CreateSite(IComponent component, String name) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.CreateSiteIComponentString">
            <summary>设置 ContainerWrapper.CreateSite(IComponent component, String name) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.Dispose(System.Boolean)">
            <summary>设置 ContainerWrapper.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.DisposeBoolean">
            <summary>设置 ContainerWrapper.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.GetService(System.Type)">
            <summary>设置 ContainerWrapper.GetService(Type serviceType) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.GetServiceType">
            <summary>设置 ContainerWrapper.GetService(Type serviceType) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.InitializeStub">
            <summary>初始化 type StubContainerWrapper 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.InternalDisposeContainer">
            <summary>设置 ContainerWrapper.InternalDisposeContainer() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.InternalDisposeContainer01">
            <summary>设置 ContainerWrapper.InternalDisposeContainer() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.Remove(System.ComponentModel.IComponent)">
            <summary>设置 ContainerWrapper.Remove(IComponent component) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.RemoveIComponent">
            <summary>设置 ContainerWrapper.Remove(IComponent component) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.RemoveService(System.Type)">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.RemoveService(System.Type,System.Boolean)">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType, Boolean promote) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.RemoveServiceType">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.RemoveServiceTypeBoolean">
            <summary>设置 ContainerWrapper.RemoveService(Type serviceType, Boolean promote) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.SiteGet">
            <summary>设置 ContainerWrapper.get_Site() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.SiteSetISite">
            <summary>设置 ContainerWrapper.set_Site(ISite value) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.Components">
            <summary>设置 ContainerWrapper.get_Components() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubContainerWrapper.Site">
            <summary>设置 ContainerWrapper.get_Site() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter">
            <summary>Castle.Windsor.Adapters.ComponentModel.IContainerAdapter 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.#ctor">
            <summary>初始化 type StubIContainerAdapter 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.AddIComponent">
            <summary>设置 IContainer.Add(IComponent component) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.AddIComponentString">
            <summary>设置 IContainer.Add(IComponent component, String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.AddServiceTypeObject">
            <summary>设置 IServiceContainer.AddService(Type serviceType, Object serviceInstance) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.AddServiceTypeObjectBoolean">
            <summary>设置 IServiceContainer.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.AddServiceTypeServiceCreatorCallback">
            <summary>设置 IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.AddServiceTypeServiceCreatorCallbackBoolean">
            <summary>设置 IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.AttachBackingFieldToSite">
            <summary>附加委托以将 StubIContainerAdapter.Site 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.ComponentsGet">
            <summary>设置 IContainer.get_Components() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.ContainerGet">
            <summary>设置 IContainerAccessor.get_Container() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.GetServiceType">
            <summary>设置 IServiceProvider.GetService(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.RemoveIComponent">
            <summary>设置 IContainer.Remove(IComponent component) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.RemoveServiceType">
            <summary>设置 IServiceContainer.RemoveService(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.RemoveServiceTypeBoolean">
            <summary>设置 IServiceContainer.RemoveService(Type serviceType, Boolean promote) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.SiteGet">
            <summary>设置 IComponent.get_Site() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.SiteSetISite">
            <summary>设置 IComponent.set_Site(ISite value) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>设置 IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.Object)">
            <summary>设置 IServiceContainer.AddService(Type serviceType, Object serviceInstance) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>设置 IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback, Boolean promote) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.Object,System.Boolean)">
            <summary>设置 IServiceContainer.AddService(Type serviceType, Object serviceInstance, Boolean promote) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#Design#IServiceContainer#RemoveService(System.Type)">
            <summary>设置 IServiceContainer.RemoveService(Type serviceType) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#Design#IServiceContainer#RemoveService(System.Type,System.Boolean)">
            <summary>设置 IServiceContainer.RemoveService(Type serviceType, Boolean promote) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#IContainer#Add(System.ComponentModel.IComponent)">
            <summary>设置 IContainer.Add(IComponent component) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#IContainer#Add(System.ComponentModel.IComponent,System.String)">
            <summary>设置 IContainer.Add(IComponent component, String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#IContainer#Remove(System.ComponentModel.IComponent)">
            <summary>设置 IContainer.Remove(IComponent component) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#IServiceProvider#GetService(System.Type)">
            <summary>设置 IServiceProvider.GetService(Type serviceType) 的 存根</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#IContainer#Components">
            <summary>设置 IContainer.get_Components() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.cw::Castle#Windsor#IContainerAccessor#Container">
            <summary>设置 IContainerAccessor.get_Container() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapter.global::System#ComponentModel#IComponent#Site">
            <summary>设置 IComponent.get_Site() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite">
            <summary>Castle.Windsor.Adapters.ComponentModel.IContainerAdapterSite 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.#ctor">
            <summary>初始化 type StubIContainerAdapterSite 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.AttachBackingFieldToName">
            <summary>附加委托以将 StubIContainerAdapterSite.Name 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.ComponentGet">
            <summary>设置 ISite.get_Component() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.ContainerGet">
            <summary>设置 ISite.get_Container() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.DesignModeGet">
            <summary>设置 ISite.get_DesignMode() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.EffectiveNameGet">
            <summary>设置 IContainerAdapterSite.get_EffectiveName() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.GetServiceType">
            <summary>设置 IServiceProvider.GetService(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.NameGet">
            <summary>设置 ISite.get_Name() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.NameSetString">
            <summary>设置 ISite.set_Name(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.global::System#IServiceProvider#GetService(System.Type)">
            <summary>设置 IServiceProvider.GetService(Type serviceType) 的 存根</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.global::System#ComponentModel#ISite#Component">
            <summary>设置 ISite.get_Component() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.global::System#ComponentModel#ISite#Container">
            <summary>设置 ISite.get_Container() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.global::System#ComponentModel#ISite#DesignMode">
            <summary>设置 ISite.get_DesignMode() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.cw::Castle#Windsor#Adapters#ComponentModel#IContainerAdapterSite#EffectiveName">
            <summary>设置 IContainerAdapterSite.get_EffectiveName() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Adapters.ComponentModel.Fakes.StubIContainerAdapterSite.global::System#ComponentModel#ISite#Name">
            <summary>设置 ISite.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler">
            <summary>Castle.Windsor.Configuration.AppDomain.CastleSectionHandler 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.#ctor(Castle.Windsor.Configuration.AppDomain.CastleSectionHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.Bind(System.Configuration.IConfigurationSectionHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.Constructor">
            <summary>设置 CastleSectionHandler.CastleSectionHandler() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.CreateObjectObjectXmlNode">
            <summary>设置 CastleSectionHandler.Create(Object parent, Object configContext, XmlNode section) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.ShimCastleSectionHandler.AllInstances.CreateObjectObjectXmlNode">
            <summary>设置 CastleSectionHandler.Create(Object parent, Object configContext, XmlNode section) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler">
            <summary>Castle.Windsor.Configuration.AppDomain.CastleSectionHandler 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.InitializeStub">
            <summary>初始化 type StubCastleSectionHandler 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.AppDomain.Fakes.StubCastleSectionHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore">
            <summary>Castle.Windsor.Configuration.CascadeConfigurationStore 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.#ctor(Castle.Windsor.Configuration.CascadeConfigurationStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.Bind(Castle.MicroKernel.IConfigurationStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.ConstructorIConfigurationInterpreterIConfigurationInterpreter">
            <summary>设置 CascadeConfigurationStore.CascadeConfigurationStore(IConfigurationInterpreter parent, IConfigurationInterpreter child) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Fakes.ShimCascadeConfigurationStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore">
            <summary>Castle.Windsor.Configuration.CascadeConfigurationStore 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.InitializeLifetimeService01">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.InitializeStub">
            <summary>初始化 type StubCascadeConfigurationStore 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.Terminate01">
            <summary>设置 AbstractSubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.StubCascadeConfigurationStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter">
            <summary>Castle.Windsor.Configuration.IConfigurationInterpreter 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.#ctor">
            <summary>初始化 type StubIConfigurationInterpreter 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.cw::Castle#Windsor#Configuration#IConfigurationInterpreter#ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.IConfigurationStore)">
            <summary>设置 IConfigurationInterpreter.ProcessResource(IResource resource, IConfigurationStore store) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.ProcessResourceIResourceIConfigurationStore">
            <summary>设置 IConfigurationInterpreter.ProcessResource(IResource resource, IConfigurationStore store) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.SourceGet">
            <summary>设置 IConfigurationInterpreter.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Fakes.StubIConfigurationInterpreter.cw::Castle#Windsor#Configuration#IConfigurationInterpreter#Source">
            <summary>设置 IConfigurationInterpreter.get_Source() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter">
            <summary>Castle.Windsor.Configuration.Interpreters.AbstractInterpreter 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.#ctor(Castle.Windsor.Configuration.Interpreters.AbstractInterpreter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.Bind(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddComponentConfigIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddComponentConfig(IConfiguration component, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddComponentConfigStringIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddComponentConfig(String id, IConfiguration component, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddFacilityConfigIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddFacilityConfig(IConfiguration facility, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AddFacilityConfigStringIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddFacilityConfig(String id, IConfiguration facility, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AssertValidIdString">
            <summary>设置 AbstractInterpreter.AssertValidId(String id) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.Constructor">
            <summary>设置 AbstractInterpreter.AbstractInterpreter() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.ConstructorIResource">
            <summary>设置 AbstractInterpreter.AbstractInterpreter(IResource source) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.ConstructorString">
            <summary>设置 AbstractInterpreter.AbstractInterpreter(String filename) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.CurrentResourceGet">
            <summary>设置 AbstractInterpreter.get_CurrentResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.PopResource">
            <summary>设置 AbstractInterpreter.PopResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.ProcessIncludeStringIConfigurationStore">
            <summary>设置 AbstractInterpreter.ProcessInclude(String uri, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.PushResourceIResource">
            <summary>设置 AbstractInterpreter.PushResource(IResource resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.SourceGet">
            <summary>设置 AbstractInterpreter.get_Source() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.StaticConstructor">
            <summary>设置 AbstractInterpreter.AbstractInterpreter() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.AddComponentConfigIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddComponentConfig(IConfiguration component, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.AddComponentConfigStringIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddComponentConfig(String id, IConfiguration component, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.AddFacilityConfigIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddFacilityConfig(IConfiguration facility, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.AddFacilityConfigStringIConfigurationIConfigurationStore">
            <summary>设置 AbstractInterpreter.AddFacilityConfig(String id, IConfiguration facility, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.AssertValidIdString">
            <summary>设置 AbstractInterpreter.AssertValidId(String id) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.CurrentResourceGet">
            <summary>设置 AbstractInterpreter.get_CurrentResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.PopResource">
            <summary>设置 AbstractInterpreter.PopResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.ProcessIncludeStringIConfigurationStore">
            <summary>设置 AbstractInterpreter.ProcessInclude(String uri, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.PushResourceIResource">
            <summary>设置 AbstractInterpreter.PushResource(IResource resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimAbstractInterpreter.AllInstances.SourceGet">
            <summary>设置 AbstractInterpreter.get_Source() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlInterpreter 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.#ctor(Castle.Windsor.Configuration.Interpreters.XmlInterpreter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.Bind(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AssertNodeNameXmlNodeString">
            <summary>设置 XmlInterpreter.AssertNodeName(XmlNode node, String expectedName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AssertRequiredAttributeIConfigurationStringString">
            <summary>设置 XmlInterpreter.AssertRequiredAttribute(IConfiguration config, String attrName, String parentName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.Constructor">
            <summary>设置 XmlInterpreter.XmlInterpreter() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.ConstructorIResource">
            <summary>设置 XmlInterpreter.XmlInterpreter(IResource source) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.ConstructorString">
            <summary>设置 XmlInterpreter.XmlInterpreter(String filename) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeComponentXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeComponent(XmlNode node, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeComponentsXmlNodeListIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeComponents(XmlNodeList nodes, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeElementXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeElement(XmlNode node, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeFacilitiesXmlNodeListIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeFacilities(XmlNodeList nodes, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeFacilityXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeFacility(XmlNode node, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.DeserializeXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.Deserialize(XmlNode section, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.GetAttributeValueXmlNodeString">
            <summary>设置 XmlInterpreter.GetAttributeValue(XmlNode node, String attName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.GetConfigValueString">
            <summary>设置 XmlInterpreter.GetConfigValue(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.GetDeserializedNodeXmlNode">
            <summary>设置 XmlInterpreter.GetDeserializedNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.GetRequiredAttributeValueXmlNodeString">
            <summary>设置 XmlInterpreter.GetRequiredAttributeValue(XmlNode node, String attName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.IsTextNodeXmlNode">
            <summary>设置 XmlInterpreter.IsTextNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.KernelGet">
            <summary>设置 XmlInterpreter.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.KernelSetIKernel">
            <summary>设置 XmlInterpreter.set_Kernel(IKernel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.ProcessResourceIResourceIConfigurationStore">
            <summary>设置 XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.AssertNodeNameXmlNodeString">
            <summary>设置 XmlInterpreter.AssertNodeName(XmlNode node, String expectedName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.AssertRequiredAttributeIConfigurationStringString">
            <summary>设置 XmlInterpreter.AssertRequiredAttribute(IConfiguration config, String attrName, String parentName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.DeserializeComponentXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeComponent(XmlNode node, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.DeserializeComponentsXmlNodeListIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeComponents(XmlNodeList nodes, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.DeserializeElementXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeElement(XmlNode node, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.DeserializeFacilitiesXmlNodeListIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeFacilities(XmlNodeList nodes, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.DeserializeFacilityXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.DeserializeFacility(XmlNode node, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.DeserializeXmlNodeIConfigurationStore">
            <summary>设置 XmlInterpreter.Deserialize(XmlNode section, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.GetAttributeValueXmlNodeString">
            <summary>设置 XmlInterpreter.GetAttributeValue(XmlNode node, String attName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.GetConfigValueString">
            <summary>设置 XmlInterpreter.GetConfigValue(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.GetDeserializedNodeXmlNode">
            <summary>设置 XmlInterpreter.GetDeserializedNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.GetRequiredAttributeValueXmlNodeString">
            <summary>设置 XmlInterpreter.GetRequiredAttributeValue(XmlNode node, String attName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.IsTextNodeXmlNode">
            <summary>设置 XmlInterpreter.IsTextNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.KernelGet">
            <summary>设置 XmlInterpreter.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.KernelSetIKernel">
            <summary>设置 XmlInterpreter.set_Kernel(IKernel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.ShimXmlInterpreter.AllInstances.ProcessResourceIResourceIConfigurationStore">
            <summary>设置 XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter">
            <summary>Castle.Windsor.Configuration.Interpreters.AbstractInterpreter 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.#ctor(Castle.Core.Resource.IResource)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.InitializeStub">
            <summary>初始化 type StubAbstractInterpreter 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.IConfigurationStore)">
            <summary>设置 AbstractInterpreter.ProcessResource(IResource resource, IConfigurationStore store) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.ProcessResourceIResourceIConfigurationStore">
            <summary>设置 AbstractInterpreter.ProcessResource(IResource resource, IConfigurationStore store) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubAbstractInterpreter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlInterpreter 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.#ctor(Castle.Core.Resource.IResource)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.InitializeStub">
            <summary>初始化 type StubXmlInterpreter 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.IConfigurationStore)">
            <summary>设置 XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.ProcessResourceIResourceIConfigurationStore">
            <summary>设置 XmlInterpreter.ProcessResource(IResource source, IConfigurationStore store) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.Fakes.StubXmlInterpreter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractStatementElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractStatementElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.Constructor">
            <summary>设置 AbstractStatementElementProcessor.AbstractStatementElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.ProcessStatementXmlElementIXmlProcessorEngine">
            <summary>设置 AbstractStatementElementProcessor.ProcessStatement(XmlElement element, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.StaticConstructor">
            <summary>设置 AbstractStatementElementProcessor.AbstractStatementElementProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractStatementElementProcessor.AllInstances.ProcessStatementXmlElementIXmlProcessorEngine">
            <summary>设置 AbstractStatementElementProcessor.ProcessStatement(XmlElement element, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AppendChildXmlNodeString">
            <summary>设置 AbstractXmlNodeProcessor.AppendChild(XmlNode element, String text) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AppendChildXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNode child) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AppendChildXmlNodeXmlNodeList">
            <summary>设置 AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNodeList nodes) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.Constructor">
            <summary>设置 AbstractXmlNodeProcessor.AbstractXmlNodeProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.CreateFragmentXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.CreateFragment(XmlNode parentNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.CreateTextXmlNodeString">
            <summary>设置 AbstractXmlNodeProcessor.CreateText(XmlNode node, String content) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.GetNodeAsElementXmlElementXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.GetNodeAsElement(XmlElement element, XmlNode child) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.GetRequiredAttributeXmlElementString">
            <summary>设置 AbstractXmlNodeProcessor.GetRequiredAttribute(XmlElement element, String attribute) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.ImportNodeXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.ImportNode(XmlNode targetElement, XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.IsTextNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IsTextNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.MoveChildNodesXmlDocumentFragmentXmlElement">
            <summary>设置 AbstractXmlNodeProcessor.MoveChildNodes(XmlDocumentFragment fragment, XmlElement element) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.RemoveItSelfXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.RemoveItSelf(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.ReplaceItselfXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.ReplaceItself(XmlNode newNode, XmlNode oldNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.ReplaceNodeXmlNodeXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.ReplaceNode(XmlNode element, XmlNode newNode, XmlNode oldNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.StaticConstructor">
            <summary>设置 AbstractXmlNodeProcessor.AbstractXmlNodeProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AppendChildXmlNodeString">
            <summary>设置 AbstractXmlNodeProcessor.AppendChild(XmlNode element, String text) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AppendChildXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNode child) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.AppendChildXmlNodeXmlNodeList">
            <summary>设置 AbstractXmlNodeProcessor.AppendChild(XmlNode element, XmlNodeList nodes) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.CreateFragmentXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.CreateFragment(XmlNode parentNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.CreateTextXmlNodeString">
            <summary>设置 AbstractXmlNodeProcessor.CreateText(XmlNode node, String content) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.GetNodeAsElementXmlElementXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.GetNodeAsElement(XmlElement element, XmlNode child) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.GetRequiredAttributeXmlElementString">
            <summary>设置 AbstractXmlNodeProcessor.GetRequiredAttribute(XmlElement element, String attribute) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.ImportNodeXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.ImportNode(XmlNode targetElement, XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.IsTextNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IsTextNode(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.MoveChildNodesXmlDocumentFragmentXmlElement">
            <summary>设置 AbstractXmlNodeProcessor.MoveChildNodes(XmlDocumentFragment fragment, XmlElement element) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.RemoveItSelfXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.RemoveItSelf(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.ReplaceItselfXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.ReplaceItself(XmlNode newNode, XmlNode oldNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAbstractXmlNodeProcessor.AllInstances.ReplaceNodeXmlNodeXmlNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.ReplaceNode(XmlNode element, XmlNode newNode, XmlNode oldNode) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AttributesElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AttributesElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AppendElementAsAttributeXmlNodeXmlElement">
            <summary>设置 AttributesElementProcessor.AppendElementAsAttribute(XmlNode parentElement, XmlElement element) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.Constructor">
            <summary>设置 AttributesElementProcessor.AttributesElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.NameGet">
            <summary>设置 AttributesElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances.AppendElementAsAttributeXmlNodeXmlElement">
            <summary>设置 AttributesElementProcessor.AppendElementAsAttribute(XmlNode parentElement, XmlElement element) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances.NameGet">
            <summary>设置 AttributesElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimAttributesElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.ChooseElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.ChooseElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.Constructor">
            <summary>设置 ChooseElementProcessor.ChooseElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.NameGet">
            <summary>设置 ChooseElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.StaticConstructor">
            <summary>设置 ChooseElementProcessor.ChooseElementProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.AllInstances.NameGet">
            <summary>设置 ChooseElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimChooseElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.Constructor">
            <summary>设置 DefaultElementProcessor.DefaultElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.NameGet">
            <summary>设置 DefaultElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.ProcessAttributesXmlElementIXmlProcessorEngine">
            <summary>设置 DefaultElementProcessor.ProcessAttributes(XmlElement element, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.ProcessIncludeAttributeXmlElementIXmlProcessorEngine">
            <summary>设置 DefaultElementProcessor.ProcessIncludeAttribute(XmlElement element, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.StaticConstructor">
            <summary>设置 DefaultElementProcessor.DefaultElementProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances.NameGet">
            <summary>设置 DefaultElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances.ProcessAttributesXmlElementIXmlProcessorEngine">
            <summary>设置 DefaultElementProcessor.ProcessAttributes(XmlElement element, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultElementProcessor.AllInstances.ProcessIncludeAttributeXmlElementIXmlProcessorEngine">
            <summary>设置 DefaultElementProcessor.ProcessIncludeAttribute(XmlElement element, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AcceptNodeTypesGet">
            <summary>设置 DefaultTextNodeProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.Constructor">
            <summary>设置 DefaultTextNodeProcessor.DefaultTextNodeProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.IsRequiredPropertyString">
            <summary>设置 DefaultTextNodeProcessor.IsRequiredProperty(String propRef) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.MoveAttributesXmlElementXmlElement">
            <summary>设置 DefaultTextNodeProcessor.MoveAttributes(XmlElement targetElement, XmlElement srcElement) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.NameGet">
            <summary>设置 DefaultTextNodeProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.ProcessStringXmlNodeStringIXmlProcessorEngine">
            <summary>设置 DefaultTextNodeProcessor.ProcessString(XmlNode node, String value, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.StaticConstructor">
            <summary>设置 DefaultTextNodeProcessor.DefaultTextNodeProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>设置 DefaultTextNodeProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.IsRequiredPropertyString">
            <summary>设置 DefaultTextNodeProcessor.IsRequiredProperty(String propRef) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.MoveAttributesXmlElementXmlElement">
            <summary>设置 DefaultTextNodeProcessor.MoveAttributes(XmlElement targetElement, XmlElement srcElement) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.NameGet">
            <summary>设置 DefaultTextNodeProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefaultTextNodeProcessor.AllInstances.ProcessStringXmlNodeStringIXmlProcessorEngine">
            <summary>设置 DefaultTextNodeProcessor.ProcessString(XmlNode node, String value, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefineElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefineElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.Constructor">
            <summary>设置 DefineElementProcessor.DefineElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.NameGet">
            <summary>设置 DefineElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>设置 DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.StaticConstructor">
            <summary>设置 DefineElementProcessor.DefineElementProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances.NameGet">
            <summary>设置 DefineElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefineElementProcessor.AllInstances.ProcessStringIXmlProcessorEngine">
            <summary>设置 DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefinedProcessingInstructionProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefinedProcessingInstructionProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>设置 DefinedProcessingInstructionProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.Constructor">
            <summary>设置 DefinedProcessingInstructionProcessor.DefinedProcessingInstructionProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.NameGet">
            <summary>设置 DefinedProcessingInstructionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.StaticConstructor">
            <summary>设置 DefinedProcessingInstructionProcessor.DefinedProcessingInstructionProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>设置 DefinedProcessingInstructionProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances.NameGet">
            <summary>设置 DefinedProcessingInstructionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimDefinedProcessingInstructionProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.Constructor">
            <summary>设置 IfElementProcessor.IfElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.NameGet">
            <summary>设置 IfElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.AllInstances.NameGet">
            <summary>设置 IfElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfProcessingInstructionProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfProcessingInstructionProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>设置 IfProcessingInstructionProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AssertDataXmlProcessingInstructionBoolean">
            <summary>设置 IfProcessingInstructionProcessor.AssertData(XmlProcessingInstruction pi, Boolean requireData) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.Constructor">
            <summary>设置 IfProcessingInstructionProcessor.IfProcessingInstructionProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.NameGet">
            <summary>设置 IfProcessingInstructionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.StaticConstructor">
            <summary>设置 IfProcessingInstructionProcessor.IfProcessingInstructionProcessor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>设置 IfProcessingInstructionProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.AssertDataXmlProcessingInstructionBoolean">
            <summary>设置 IfProcessingInstructionProcessor.AssertData(XmlProcessingInstruction pi, Boolean requireData) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.NameGet">
            <summary>设置 IfProcessingInstructionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIfProcessingInstructionProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IncludeElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IncludeElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AcceptXmlNode">
            <summary>设置 IncludeElementProcessor.Accept(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.Constructor">
            <summary>设置 IncludeElementProcessor.IncludeElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.NameGet">
            <summary>设置 IncludeElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.ProcessIncludeXmlElementStringIXmlProcessorEngine">
            <summary>设置 IncludeElementProcessor.ProcessInclude(XmlElement element, String includeUri, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.AcceptXmlNode">
            <summary>设置 IncludeElementProcessor.Accept(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.NameGet">
            <summary>设置 IncludeElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimIncludeElementProcessor.AllInstances.ProcessIncludeXmlElementStringIXmlProcessorEngine">
            <summary>设置 IncludeElementProcessor.ProcessInclude(XmlElement element, String includeUri, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.PropertiesElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.PropertiesElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.Constructor">
            <summary>设置 PropertiesElementProcessor.PropertiesElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.NameGet">
            <summary>设置 PropertiesElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.AllInstances.NameGet">
            <summary>设置 PropertiesElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimPropertiesElementProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefElementProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefElementProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.Constructor">
            <summary>设置 UndefElementProcessor.UndefElementProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.NameGet">
            <summary>设置 UndefElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>设置 UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.AllInstances.NameGet">
            <summary>设置 UndefElementProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefElementProcessor.AllInstances.ProcessStringIXmlProcessorEngine">
            <summary>设置 UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefProcessingInstructionProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefProcessingInstructionProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>设置 UndefProcessingInstructionProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.Constructor">
            <summary>设置 UndefProcessingInstructionProcessor.UndefProcessingInstructionProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.NameGet">
            <summary>设置 UndefProcessingInstructionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances.AcceptNodeTypesGet">
            <summary>设置 UndefProcessingInstructionProcessor.get_AcceptNodeTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances.NameGet">
            <summary>设置 UndefProcessingInstructionProcessor.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.ShimUndefProcessingInstructionProcessor.AllInstances.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractStatementElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.InitializeStub">
            <summary>初始化 type StubAbstractStatementElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.NameGet">
            <summary>设置 AbstractXmlNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractStatementElementProcessor.Name">
            <summary>设置 AbstractXmlNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AbstractXmlNodeProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.InitializeStub">
            <summary>初始化 type StubAbstractXmlNodeProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.NameGet">
            <summary>设置 AbstractXmlNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 AbstractXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAbstractXmlNodeProcessor.Name">
            <summary>设置 AbstractXmlNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.AttributesElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.InitializeStub">
            <summary>初始化 type StubAttributesElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.NameGet">
            <summary>设置 AttributesElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 AttributesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubAttributesElementProcessor.Name">
            <summary>设置 AttributesElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.ChooseElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.InitializeStub">
            <summary>初始化 type StubChooseElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.NameGet">
            <summary>设置 ChooseElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 ChooseElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubChooseElementProcessor.Name">
            <summary>设置 ChooseElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.InitializeStub">
            <summary>初始化 type StubDefaultElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.NameGet">
            <summary>设置 DefaultElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefaultElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultElementProcessor.Name">
            <summary>设置 DefaultElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefaultTextNodeProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.AcceptNodeTypesGet">
            <summary>设置 DefaultTextNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.InitializeStub">
            <summary>初始化 type StubDefaultTextNodeProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.NameGet">
            <summary>设置 DefaultTextNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefaultTextNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.AcceptNodeTypes">
            <summary>设置 DefaultTextNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefaultTextNodeProcessor.Name">
            <summary>设置 DefaultTextNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefineElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.InitializeStub">
            <summary>初始化 type StubDefineElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.NameGet">
            <summary>设置 DefineElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Process(System.String,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>设置 DefineElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefineElementProcessor.Name">
            <summary>设置 DefineElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.DefinedProcessingInstructionProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>设置 DefinedProcessingInstructionProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.InitializeStub">
            <summary>初始化 type StubDefinedProcessingInstructionProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.NameGet">
            <summary>设置 DefinedProcessingInstructionProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefinedProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.AcceptNodeTypes">
            <summary>设置 DefinedProcessingInstructionProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubDefinedProcessingInstructionProcessor.Name">
            <summary>设置 DefinedProcessingInstructionProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.InitializeStub">
            <summary>初始化 type StubIfElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.NameGet">
            <summary>设置 IfElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IfElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfElementProcessor.Name">
            <summary>设置 IfElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IfProcessingInstructionProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>设置 IfProcessingInstructionProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.InitializeStub">
            <summary>初始化 type StubIfProcessingInstructionProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.NameGet">
            <summary>设置 IfProcessingInstructionProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IfProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.AcceptNodeTypes">
            <summary>设置 IfProcessingInstructionProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIfProcessingInstructionProcessor.Name">
            <summary>设置 IfProcessingInstructionProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.IncludeElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 IncludeElementProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.AcceptXmlNode">
            <summary>设置 IncludeElementProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.InitializeStub">
            <summary>初始化 type StubIncludeElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.NameGet">
            <summary>设置 IncludeElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IncludeElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubIncludeElementProcessor.Name">
            <summary>设置 IncludeElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.PropertiesElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.InitializeStub">
            <summary>初始化 type StubPropertiesElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.NameGet">
            <summary>设置 PropertiesElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 PropertiesElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubPropertiesElementProcessor.Name">
            <summary>设置 PropertiesElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefElementProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.AcceptNodeTypesGet">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.InitializeStub">
            <summary>初始化 type StubUndefElementProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.NameGet">
            <summary>设置 UndefElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Process(System.String,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 DefineElementProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.ProcessStringIXmlProcessorEngine">
            <summary>设置 UndefElementProcessor.Process(String flag, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.AcceptNodeTypes">
            <summary>设置 AbstractXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefElementProcessor.Name">
            <summary>设置 UndefElementProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.UndefProcessingInstructionProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.Accept(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.AcceptNodeTypesGet">
            <summary>设置 UndefProcessingInstructionProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.AcceptXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.IgnoreNode(System.Xml.XmlNode)">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.IgnoreNodeXmlNode">
            <summary>设置 AbstractXmlNodeProcessor.IgnoreNode(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.InitializeStub">
            <summary>初始化 type StubUndefProcessingInstructionProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.NameGet">
            <summary>设置 UndefProcessingInstructionProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 UndefProcessingInstructionProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.AcceptNodeTypes">
            <summary>设置 UndefProcessingInstructionProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.ElementProcessors.Fakes.StubUndefProcessingInstructionProcessor.Name">
            <summary>设置 UndefProcessingInstructionProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ConfigurationProcessingException 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.ConfigurationProcessingException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ConfigurationProcessingException.ConfigurationProcessingException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.ConstructorString">
            <summary>设置 ConfigurationProcessingException.ConfigurationProcessingException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.ConstructorStringException">
            <summary>设置 ConfigurationProcessingException.ConfigurationProcessingException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimConfigurationProcessingException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AddFlagString">
            <summary>设置 DefaultXmlProcessorEngine.AddFlag(String flag) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AddNodeProcessorType">
            <summary>设置 DefaultXmlProcessorEngine.AddNodeProcessor(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AddPropertyXmlElement">
            <summary>设置 DefaultXmlProcessorEngine.AddProperty(XmlElement content) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.Constructor">
            <summary>设置 DefaultXmlProcessorEngine.DefaultXmlProcessorEngine() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.ConstructorIResourceSubSystem">
            <summary>设置 DefaultXmlProcessorEngine.DefaultXmlProcessorEngine(IResourceSubSystem resourceSubSystem) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.DispatchProcessAllIXmlProcessorNodeList">
            <summary>设置 DefaultXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.DispatchProcessCurrentIXmlProcessorNodeList">
            <summary>设置 DefaultXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetCanonicalFlagNameString">
            <summary>设置 DefaultXmlProcessorEngine.GetCanonicalFlagName(String flag) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetProcessorXmlNode">
            <summary>设置 DefaultXmlProcessorEngine.GetProcessor(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetPropertyString">
            <summary>设置 DefaultXmlProcessorEngine.GetProperty(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.GetResourceString">
            <summary>设置 DefaultXmlProcessorEngine.GetResource(String uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.HasFlagString">
            <summary>设置 DefaultXmlProcessorEngine.HasFlag(String flag) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.HasPropertyString">
            <summary>设置 DefaultXmlProcessorEngine.HasProperty(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.HasSpecialProcessorXmlNode">
            <summary>设置 DefaultXmlProcessorEngine.HasSpecialProcessor(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.PopResource">
            <summary>设置 DefaultXmlProcessorEngine.PopResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.PushResourceIResource">
            <summary>设置 DefaultXmlProcessorEngine.PushResource(IResource resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.RegisterProcessorXmlNodeTypeIXmlNodeProcessor">
            <summary>设置 DefaultXmlProcessorEngine.RegisterProcessor(XmlNodeType type, IXmlNodeProcessor processor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.RemoveFlagString">
            <summary>设置 DefaultXmlProcessorEngine.RemoveFlag(String flag) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.AddFlagString">
            <summary>设置 DefaultXmlProcessorEngine.AddFlag(String flag) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.AddNodeProcessorType">
            <summary>设置 DefaultXmlProcessorEngine.AddNodeProcessor(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.AddPropertyXmlElement">
            <summary>设置 DefaultXmlProcessorEngine.AddProperty(XmlElement content) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.DispatchProcessAllIXmlProcessorNodeList">
            <summary>设置 DefaultXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.DispatchProcessCurrentIXmlProcessorNodeList">
            <summary>设置 DefaultXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetCanonicalFlagNameString">
            <summary>设置 DefaultXmlProcessorEngine.GetCanonicalFlagName(String flag) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetProcessorXmlNode">
            <summary>设置 DefaultXmlProcessorEngine.GetProcessor(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetPropertyString">
            <summary>设置 DefaultXmlProcessorEngine.GetProperty(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.GetResourceString">
            <summary>设置 DefaultXmlProcessorEngine.GetResource(String uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.HasFlagString">
            <summary>设置 DefaultXmlProcessorEngine.HasFlag(String flag) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.HasPropertyString">
            <summary>设置 DefaultXmlProcessorEngine.HasProperty(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.HasSpecialProcessorXmlNode">
            <summary>设置 DefaultXmlProcessorEngine.HasSpecialProcessor(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.PopResource">
            <summary>设置 DefaultXmlProcessorEngine.PopResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.PushResourceIResource">
            <summary>设置 DefaultXmlProcessorEngine.PushResource(IResource resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.RegisterProcessorXmlNodeTypeIXmlNodeProcessor">
            <summary>设置 DefaultXmlProcessorEngine.RegisterProcessor(XmlNodeType type, IXmlNodeProcessor processor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorEngine.AllInstances.RemoveFlagString">
            <summary>设置 DefaultXmlProcessorEngine.RemoveFlag(String flag) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorNodeList 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorNodeList)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.Bind(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CloneNodeListXmlNodeList">
            <summary>设置 DefaultXmlProcessorNodeList.CloneNodeList(XmlNodeList nodeList) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.ConstructorArrayList">
            <summary>设置 DefaultXmlProcessorNodeList.DefaultXmlProcessorNodeList(ArrayList nodes) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.ConstructorXmlNode">
            <summary>设置 DefaultXmlProcessorNodeList.DefaultXmlProcessorNodeList(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.ConstructorXmlNodeList">
            <summary>设置 DefaultXmlProcessorNodeList.DefaultXmlProcessorNodeList(XmlNodeList nodes) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CountGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CurrentGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_Current() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CurrentPositionGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_CurrentPosition() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.CurrentPositionSetInt32">
            <summary>设置 DefaultXmlProcessorNodeList.set_CurrentPosition(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.HasCurrentGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_HasCurrent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.MoveNext">
            <summary>设置 DefaultXmlProcessorNodeList.MoveNext() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CloneNodeListXmlNodeList">
            <summary>设置 DefaultXmlProcessorNodeList.CloneNodeList(XmlNodeList nodeList) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CountGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CurrentGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_Current() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CurrentPositionGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_CurrentPosition() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.CurrentPositionSetInt32">
            <summary>设置 DefaultXmlProcessorNodeList.set_CurrentPosition(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.HasCurrentGet">
            <summary>设置 DefaultXmlProcessorNodeList.get_HasCurrent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimDefaultXmlProcessorNodeList.AllInstances.MoveNext">
            <summary>设置 DefaultXmlProcessorNodeList.MoveNext() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AddElementProcessorType">
            <summary>设置 XmlProcessor.AddElementProcessor(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.Constructor">
            <summary>设置 XmlProcessor.XmlProcessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.ConstructorIResourceSubSystem">
            <summary>设置 XmlProcessor.XmlProcessor(IResourceSubSystem resourceSubSystem) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.ProcessIResource">
            <summary>设置 XmlProcessor.Process(IResource resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.ProcessXmlNode">
            <summary>设置 XmlProcessor.Process(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.RegisterProcessors">
            <summary>设置 XmlProcessor.RegisterProcessors() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.AddElementProcessorType">
            <summary>设置 XmlProcessor.AddElementProcessor(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.ProcessIResource">
            <summary>设置 XmlProcessor.Process(IResource resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.ProcessXmlNode">
            <summary>设置 XmlProcessor.Process(XmlNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessor.AllInstances.RegisterProcessors">
            <summary>设置 XmlProcessor.RegisterProcessors() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessorException 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.#ctor(Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessorException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 XmlProcessorException.XmlProcessorException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.ConstructorStringException">
            <summary>设置 XmlProcessorException.XmlProcessorException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.ConstructorStringObjectArray">
            <summary>设置 XmlProcessorException.XmlProcessorException(String message, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.ShimXmlProcessorException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.ConfigurationProcessingException 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubConfigurationProcessingException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubConfigurationProcessingException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.InitializeStub">
            <summary>初始化 type StubConfigurationProcessingException 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubConfigurationProcessingException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorEngine 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.#ctor(Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.InitializeStub">
            <summary>初始化 type StubDefaultXmlProcessorEngine 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.DefaultXmlProcessorNodeList 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.#ctor(System.Xml.XmlNode)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.#ctor(System.Xml.XmlNodeList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.#ctor(System.Collections.ArrayList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.InitializeStub">
            <summary>初始化 type StubDefaultXmlProcessorNodeList 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubDefaultXmlProcessorNodeList.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlNodeProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.#ctor">
            <summary>初始化 type StubIXmlNodeProcessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.AcceptNodeTypesGet">
            <summary>设置 IXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.AcceptXmlNode">
            <summary>设置 IXmlNodeProcessor.Accept(XmlNode node) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#Accept(System.Xml.XmlNode)">
            <summary>设置 IXmlNodeProcessor.Accept(XmlNode node) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#Process(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList,Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine)">
            <summary>设置 IXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.NameGet">
            <summary>设置 IXmlNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.ProcessIXmlProcessorNodeListIXmlProcessorEngine">
            <summary>设置 IXmlNodeProcessor.Process(IXmlProcessorNodeList nodeList, IXmlProcessorEngine engine) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#AcceptNodeTypes">
            <summary>设置 IXmlNodeProcessor.get_AcceptNodeTypes() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlNodeProcessor.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlNodeProcessor#Name">
            <summary>设置 IXmlNodeProcessor.get_Name() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorEngine 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.#ctor">
            <summary>初始化 type StubIXmlProcessorEngine 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.AddFlagString">
            <summary>设置 IXmlProcessorEngine.AddFlag(String flag) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.AddNodeProcessorType">
            <summary>设置 IXmlProcessorEngine.AddNodeProcessor(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.AddPropertyXmlElement">
            <summary>设置 IXmlProcessorEngine.AddProperty(XmlElement element) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#AddFlag(System.String)">
            <summary>设置 IXmlProcessorEngine.AddFlag(String flag) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#AddNodeProcessor(System.Type)">
            <summary>设置 IXmlProcessorEngine.AddNodeProcessor(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#AddProperty(System.Xml.XmlElement)">
            <summary>设置 IXmlProcessorEngine.AddProperty(XmlElement element) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#DispatchProcessAll(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>设置 IXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#DispatchProcessCurrent(Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList)">
            <summary>设置 IXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#GetProperty(System.String)">
            <summary>设置 IXmlProcessorEngine.GetProperty(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#GetResource(System.String)">
            <summary>设置 IXmlProcessorEngine.GetResource(String uri) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#HasFlag(System.String)">
            <summary>设置 IXmlProcessorEngine.HasFlag(String flag) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#HasProperty(System.String)">
            <summary>设置 IXmlProcessorEngine.HasProperty(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#HasSpecialProcessor(System.Xml.XmlNode)">
            <summary>设置 IXmlProcessorEngine.HasSpecialProcessor(XmlNode node) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#PopResource">
            <summary>设置 IXmlProcessorEngine.PopResource() 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#PushResource(Castle.Core.Resource.IResource)">
            <summary>设置 IXmlProcessorEngine.PushResource(IResource resource) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorEngine#RemoveFlag(System.String)">
            <summary>设置 IXmlProcessorEngine.RemoveFlag(String flag) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.DispatchProcessAllIXmlProcessorNodeList">
            <summary>设置 IXmlProcessorEngine.DispatchProcessAll(IXmlProcessorNodeList nodeList) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.DispatchProcessCurrentIXmlProcessorNodeList">
            <summary>设置 IXmlProcessorEngine.DispatchProcessCurrent(IXmlProcessorNodeList nodeList) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.GetPropertyString">
            <summary>设置 IXmlProcessorEngine.GetProperty(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.GetResourceString">
            <summary>设置 IXmlProcessorEngine.GetResource(String uri) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.HasFlagString">
            <summary>设置 IXmlProcessorEngine.HasFlag(String flag) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.HasPropertyString">
            <summary>设置 IXmlProcessorEngine.HasProperty(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.HasSpecialProcessorXmlNode">
            <summary>设置 IXmlProcessorEngine.HasSpecialProcessor(XmlNode node) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.PopResource">
            <summary>设置 IXmlProcessorEngine.PopResource() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.PushResourceIResource">
            <summary>设置 IXmlProcessorEngine.PushResource(IResource resource) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorEngine.RemoveFlagString">
            <summary>设置 IXmlProcessorEngine.RemoveFlag(String flag) 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.IXmlProcessorNodeList 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.#ctor">
            <summary>初始化 type StubIXmlProcessorNodeList 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.AttachBackingFieldToCurrentPosition">
            <summary>附加委托以将 StubIXmlProcessorNodeList.CurrentPosition 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#MoveNext">
            <summary>设置 IXmlProcessorNodeList.MoveNext() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CountGet">
            <summary>设置 IXmlProcessorNodeList.get_Count() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CurrentGet">
            <summary>设置 IXmlProcessorNodeList.get_Current() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CurrentPositionGet">
            <summary>设置 IXmlProcessorNodeList.get_CurrentPosition() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.CurrentPositionSetInt32">
            <summary>设置 IXmlProcessorNodeList.set_CurrentPosition(Int32 value) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.HasCurrentGet">
            <summary>设置 IXmlProcessorNodeList.get_HasCurrent() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.MoveNext">
            <summary>设置 IXmlProcessorNodeList.MoveNext() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#Count">
            <summary>设置 IXmlProcessorNodeList.get_Count() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#Current">
            <summary>设置 IXmlProcessorNodeList.get_Current() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#CurrentPosition">
            <summary>设置 IXmlProcessorNodeList.get_CurrentPosition() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubIXmlProcessorNodeList.cw::Castle#Windsor#Configuration#Interpreters#XmlProcessor#IXmlProcessorNodeList#HasCurrent">
            <summary>设置 IXmlProcessorNodeList.get_HasCurrent() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.#ctor(Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.InitializeStub">
            <summary>初始化 type StubXmlProcessor 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.RegisterProcessors">
            <summary>设置 XmlProcessor.RegisterProcessors() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.RegisterProcessors01">
            <summary>设置 XmlProcessor.RegisterProcessors() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException">
            <summary>Castle.Windsor.Configuration.Interpreters.XmlProcessor.XmlProcessorException 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubXmlProcessorException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubXmlProcessorException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.InitializeStub">
            <summary>初始化 type StubXmlProcessorException 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.XmlProcessor.Fakes.StubXmlProcessorException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimAsyncInitializationContainer">
            <summary>Castle.Windsor.AsyncInitializationContainer 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.#ctor(Castle.Windsor.AsyncInitializationContainer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.Bind(Castle.Windsor.IWindsorContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AddChildContainerIWindsorContainer">
            <summary>设置 AsyncInitializationContainer.AddChildContainer(IWindsorContainer childContainer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AddComponentStringType">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AddComponentStringTypeType">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type serviceType, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AddFacilityStringIFacility">
            <summary>设置 AsyncInitializationContainer.AddFacility(String key, IFacility facility) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ConstructorIConfigurationInterpreter">
            <summary>设置 AsyncInitializationContainer.AsyncInitializationContainer(IConfigurationInterpreter interpreter) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ConstructorIConfigurationStore">
            <summary>设置 AsyncInitializationContainer.AsyncInitializationContainer(IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ConstructorIKernelIComponentsInstaller">
            <summary>设置 AsyncInitializationContainer.AsyncInitializationContainer(IKernel kernel, IComponentsInstaller installer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ConstructorString">
            <summary>设置 AsyncInitializationContainer.AsyncInitializationContainer(String xmlFile) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.Dispose">
            <summary>设置 AsyncInitializationContainer.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.InstallerThreadExec">
            <summary>设置 AsyncInitializationContainer.InstallerThreadExec() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.IsInstallerThreadGet">
            <summary>设置 AsyncInitializationContainer.get_IsInstallerThread() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ItemGetString">
            <summary>设置 AsyncInitializationContainer.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ItemGetType">
            <summary>设置 AsyncInitializationContainer.get_Item(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.KernelGet">
            <summary>设置 AsyncInitializationContainer.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ParentGet">
            <summary>设置 AsyncInitializationContainer.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ParentSetIWindsorContainer">
            <summary>设置 AsyncInitializationContainer.set_Parent(IWindsorContainer value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ReleaseObject">
            <summary>设置 AsyncInitializationContainer.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ResolveString">
            <summary>设置 AsyncInitializationContainer.Resolve(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.ResolveType">
            <summary>设置 AsyncInitializationContainer.Resolve(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.RunInstaller">
            <summary>设置 AsyncInitializationContainer.RunInstaller() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.AddChildContainerIWindsorContainer">
            <summary>设置 AsyncInitializationContainer.AddChildContainer(IWindsorContainer childContainer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.AddComponentStringType">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.AddComponentStringTypeType">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type serviceType, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.AddFacilityStringIFacility">
            <summary>设置 AsyncInitializationContainer.AddFacility(String key, IFacility facility) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.Dispose">
            <summary>设置 AsyncInitializationContainer.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.InstallerThreadExec">
            <summary>设置 AsyncInitializationContainer.InstallerThreadExec() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.IsInstallerThreadGet">
            <summary>设置 AsyncInitializationContainer.get_IsInstallerThread() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.ItemGetString">
            <summary>设置 AsyncInitializationContainer.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.ItemGetType">
            <summary>设置 AsyncInitializationContainer.get_Item(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.KernelGet">
            <summary>设置 AsyncInitializationContainer.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.ParentGet">
            <summary>设置 AsyncInitializationContainer.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.ParentSetIWindsorContainer">
            <summary>设置 AsyncInitializationContainer.set_Parent(IWindsorContainer value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.ReleaseObject">
            <summary>设置 AsyncInitializationContainer.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.ResolveString">
            <summary>设置 AsyncInitializationContainer.Resolve(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.ResolveType">
            <summary>设置 AsyncInitializationContainer.Resolve(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimAsyncInitializationContainer.AllInstances.RunInstaller">
            <summary>设置 AsyncInitializationContainer.RunInstaller() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimInitializationException">
            <summary>Castle.Windsor.InitializationException 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimInitializationException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimInitializationException.#ctor(Castle.Windsor.InitializationException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimInitializationException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimInitializationException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimInitializationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimInitializationException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimInitializationException.Constructor">
            <summary>设置 InitializationException.InitializationException() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimInitializationException.ConstructorException">
            <summary>设置 InitializationException.InitializationException(Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimInitializationException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 InitializationException.InitializationException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimInitializationException.ConstructorString">
            <summary>设置 InitializationException.InitializationException(String message) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimInitializationException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimWindsorContainer">
            <summary>Castle.Windsor.WindsorContainer 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.#ctor(Castle.Windsor.WindsorContainer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.Bind(Castle.Windsor.IWindsorContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 WindsorContainer.Resolve() 的 填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 WindsorContainer.Resolve(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddChildContainerIWindsorContainer">
            <summary>设置 WindsorContainer.AddChildContainer(IWindsorContainer childContainer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentStringType">
            <summary>设置 WindsorContainer.AddComponent(String key, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentStringTypeType">
            <summary>设置 WindsorContainer.AddComponent(String key, Type serviceType, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithLifestyleStringTypeLifestyleType">
            <summary>设置 WindsorContainer.AddComponentWithLifestyle(String key, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithLifestyleStringTypeTypeLifestyleType">
            <summary>设置 WindsorContainer.AddComponentWithLifestyle(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AddFacilityStringIFacility">
            <summary>设置 WindsorContainer.AddFacility(String key, IFacility facility) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.Constructor">
            <summary>设置 WindsorContainer.WindsorContainer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIConfigurationInterpreter">
            <summary>设置 WindsorContainer.WindsorContainer(IConfigurationInterpreter interpreter) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIConfigurationInterpreterIConfigurationInterpreter">
            <summary>设置 WindsorContainer.WindsorContainer(IConfigurationInterpreter parent, IConfigurationInterpreter child) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIConfigurationStore">
            <summary>设置 WindsorContainer.WindsorContainer(IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIKernelIComponentsInstaller">
            <summary>设置 WindsorContainer.WindsorContainer(IKernel kernel, IComponentsInstaller installer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIProxyFactory">
            <summary>设置 WindsorContainer.WindsorContainer(IProxyFactory proxyFactory) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorIWindsorContainerIConfigurationInterpreter">
            <summary>设置 WindsorContainer.WindsorContainer(IWindsorContainer parent, IConfigurationInterpreter interpreter) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorString">
            <summary>设置 WindsorContainer.WindsorContainer(String xmlFile) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ConstructorStringString">
            <summary>设置 WindsorContainer.WindsorContainer(String parentXmlFile, String childXmlFile) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.Dispose">
            <summary>设置 WindsorContainer.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.InstallerGet">
            <summary>设置 WindsorContainer.get_Installer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ItemGetString">
            <summary>设置 WindsorContainer.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ItemGetType">
            <summary>设置 WindsorContainer.get_Item(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.KernelGet">
            <summary>设置 WindsorContainer.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ParentGet">
            <summary>设置 WindsorContainer.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ParentSetIWindsorContainer">
            <summary>设置 WindsorContainer.set_Parent(IWindsorContainer value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ReleaseObject">
            <summary>设置 WindsorContainer.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.RemoveChildContainerIWindsorContainer">
            <summary>设置 WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveString">
            <summary>设置 WindsorContainer.Resolve(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveStringType">
            <summary>设置 WindsorContainer.Resolve(String key, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.ResolveType">
            <summary>设置 WindsorContainer.Resolve(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.RunInstaller">
            <summary>设置 WindsorContainer.RunInstaller() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,``0})">
            <summary>设置 WindsorContainer.Resolve() 的 填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.Windsor.WindsorContainer,System.String,``0})">
            <summary>设置 WindsorContainer.Resolve(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddChildContainerIWindsorContainer">
            <summary>设置 WindsorContainer.AddChildContainer(IWindsorContainer childContainer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentStringType">
            <summary>设置 WindsorContainer.AddComponent(String key, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentStringTypeType">
            <summary>设置 WindsorContainer.AddComponent(String key, Type serviceType, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithLifestyleStringTypeLifestyleType">
            <summary>设置 WindsorContainer.AddComponentWithLifestyle(String key, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithLifestyleStringTypeTypeLifestyleType">
            <summary>设置 WindsorContainer.AddComponentWithLifestyle(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.AddFacilityStringIFacility">
            <summary>设置 WindsorContainer.AddFacility(String key, IFacility facility) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.Dispose">
            <summary>设置 WindsorContainer.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.InstallerGet">
            <summary>设置 WindsorContainer.get_Installer() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ItemGetString">
            <summary>设置 WindsorContainer.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ItemGetType">
            <summary>设置 WindsorContainer.get_Item(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.KernelGet">
            <summary>设置 WindsorContainer.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ParentGet">
            <summary>设置 WindsorContainer.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ParentSetIWindsorContainer">
            <summary>设置 WindsorContainer.set_Parent(IWindsorContainer value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ReleaseObject">
            <summary>设置 WindsorContainer.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.RemoveChildContainerIWindsorContainer">
            <summary>设置 WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveString">
            <summary>设置 WindsorContainer.Resolve(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveStringType">
            <summary>设置 WindsorContainer.Resolve(String key, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.ResolveType">
            <summary>设置 WindsorContainer.Resolve(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.ShimWindsorContainer.AllInstances.RunInstaller">
            <summary>设置 WindsorContainer.RunInstaller() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubAsyncInitializationContainer">
            <summary>Castle.Windsor.AsyncInitializationContainer 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.#ctor(Castle.MicroKernel.IConfigurationStore)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.#ctor(Castle.MicroKernel.IKernel,Castle.Windsor.IComponentsInstaller)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>设置 AsyncInitializationContainer.AddChildContainer(IWindsorContainer childContainer) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddChildContainerIWindsorContainer">
            <summary>设置 AsyncInitializationContainer.AddChildContainer(IWindsorContainer childContainer) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponent(System.String,System.Type)">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type classType) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type serviceType, Type classType) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponentStringType">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type classType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponentStringTypeType">
            <summary>设置 AsyncInitializationContainer.AddComponent(String key, Type serviceType, Type classType) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponentWithProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponentWithProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>设置 AsyncInitializationContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>设置 AsyncInitializationContainer.AddFacility(String key, IFacility facility) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AddFacilityStringIFacility">
            <summary>设置 AsyncInitializationContainer.AddFacility(String key, IFacility facility) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.AttachBackingFieldToParent">
            <summary>附加委托以将 StubAsyncInitializationContainer.Parent 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Dispose">
            <summary>设置 AsyncInitializationContainer.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Dispose01">
            <summary>设置 AsyncInitializationContainer.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.InitializeStub">
            <summary>初始化 type StubAsyncInitializationContainer 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ItemGetString">
            <summary>设置 AsyncInitializationContainer.get_Item(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ItemGetType">
            <summary>设置 AsyncInitializationContainer.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.KernelGet">
            <summary>设置 AsyncInitializationContainer.get_Kernel() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ParentGet">
            <summary>设置 AsyncInitializationContainer.get_Parent() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ParentSetIWindsorContainer">
            <summary>设置 AsyncInitializationContainer.set_Parent(IWindsorContainer value) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Release(System.Object)">
            <summary>设置 AsyncInitializationContainer.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ReleaseObject">
            <summary>设置 AsyncInitializationContainer.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>设置 WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.RemoveChildContainerIWindsorContainer">
            <summary>设置 WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Resolve``1(System.String)">
            <summary>设置 WindsorContainer.Resolve(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Resolve(System.String)">
            <summary>设置 AsyncInitializationContainer.Resolve(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Resolve(System.Type)">
            <summary>设置 AsyncInitializationContainer.Resolve(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Resolve(System.String,System.Type)">
            <summary>设置 WindsorContainer.Resolve(String key, Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 Resolve(String key) 的存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ResolveString">
            <summary>设置 AsyncInitializationContainer.Resolve(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ResolveStringType">
            <summary>设置 WindsorContainer.Resolve(String key, Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.ResolveType">
            <summary>设置 AsyncInitializationContainer.Resolve(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubAsyncInitializationContainer.RunInstaller">
            <summary>设置 AsyncInitializationContainer.RunInstaller() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubAsyncInitializationContainer.RunInstaller01">
            <summary>设置 AsyncInitializationContainer.RunInstaller() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubAsyncInitializationContainer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubAsyncInitializationContainer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubAsyncInitializationContainer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Item(System.String)">
            <summary>设置 AsyncInitializationContainer.get_Item(String key) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Item(System.Type)">
            <summary>设置 AsyncInitializationContainer.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Kernel">
            <summary>设置 AsyncInitializationContainer.get_Kernel() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubAsyncInitializationContainer.Parent">
            <summary>设置 AsyncInitializationContainer.get_Parent() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubIComponentsInstaller">
            <summary>Castle.Windsor.IComponentsInstaller 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIComponentsInstaller.#ctor">
            <summary>初始化 type StubIComponentsInstaller 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIComponentsInstaller.cw::Castle#Windsor#IComponentsInstaller#SetUp(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.IConfigurationStore)">
            <summary>设置 IComponentsInstaller.SetUp(IWindsorContainer container, IConfigurationStore store) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIComponentsInstaller.SetUpIWindsorContainerIConfigurationStore">
            <summary>设置 IComponentsInstaller.SetUp(IWindsorContainer container, IConfigurationStore store) 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubIContainerAccessor">
            <summary>Castle.Windsor.IContainerAccessor 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIContainerAccessor.#ctor">
            <summary>初始化 type StubIContainerAccessor 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIContainerAccessor.ContainerGet">
            <summary>设置 IContainerAccessor.get_Container() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIContainerAccessor.cw::Castle#Windsor#IContainerAccessor#Container">
            <summary>设置 IContainerAccessor.get_Container() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubIWindsorContainer">
            <summary>Castle.Windsor.IWindsorContainer 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.#ctor">
            <summary>初始化 type StubIWindsorContainer 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddChildContainerIWindsorContainer">
            <summary>设置 IWindsorContainer.AddChildContainer(IWindsorContainer childContainer) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentStringType">
            <summary>设置 IWindsorContainer.AddComponent(String key, Type classType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentStringTypeType">
            <summary>设置 IWindsorContainer.AddComponent(String key, Type serviceType, Type classType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithLifestyleStringTypeLifestyleType">
            <summary>设置 IWindsorContainer.AddComponentWithLifestyle(String key, Type classType, LifestyleType lifestyle) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithLifestyleStringTypeTypeLifestyleType">
            <summary>设置 IWindsorContainer.AddComponentWithLifestyle(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>设置 IWindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>设置 IWindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.AddFacilityStringIFacility">
            <summary>设置 IWindsorContainer.AddFacility(String key, IFacility facility) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.AttachBackingFieldToParent">
            <summary>附加委托以将 StubIWindsorContainer.Parent 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>设置 IWindsorContainer.AddChildContainer(IWindsorContainer childContainer) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent(System.String,System.Type)">
            <summary>设置 IWindsorContainer.AddComponent(String key, Type classType) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponent(System.String,System.Type,System.Type)">
            <summary>设置 IWindsorContainer.AddComponent(String key, Type serviceType, Type classType) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithLifestyle(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>设置 IWindsorContainer.AddComponentWithLifestyle(String key, Type classType, LifestyleType lifestyle) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithLifestyle(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>设置 IWindsorContainer.AddComponentWithLifestyle(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>设置 IWindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddComponentWithProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>设置 IWindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>设置 IWindsorContainer.AddFacility(String key, IFacility facility) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Release(System.Object)">
            <summary>设置 IWindsorContainer.Release(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>设置 IWindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.String)">
            <summary>设置 IWindsorContainer.Resolve(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.Type)">
            <summary>设置 IWindsorContainer.Resolve(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1">
            <summary>设置 IWindsorContainer.Resolve() 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve``1(System.String)">
            <summary>设置 IWindsorContainer.Resolve(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Resolve(System.String,System.Type)">
            <summary>设置 IWindsorContainer.Resolve(String key, Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ItemGetString">
            <summary>设置 IWindsorContainer.get_Item(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ItemGetType">
            <summary>设置 IWindsorContainer.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.KernelGet">
            <summary>设置 IWindsorContainer.get_Kernel() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ParentGet">
            <summary>设置 IWindsorContainer.get_Parent() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ParentSetIWindsorContainer">
            <summary>设置 IWindsorContainer.set_Parent(IWindsorContainer value) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ReleaseObject">
            <summary>设置 IWindsorContainer.Release(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.RemoveChildContainerIWindsorContainer">
            <summary>设置 IWindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 Resolve() 的存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 Resolve(String key) 的存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveString">
            <summary>设置 IWindsorContainer.Resolve(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveStringType">
            <summary>设置 IWindsorContainer.Resolve(String key, Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubIWindsorContainer.ResolveType">
            <summary>设置 IWindsorContainer.Resolve(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubIWindsorContainer.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.Castle#Windsor#IWindsorContainer#Item(System.String)">
            <summary>设置 IWindsorContainer.get_Item(String key) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.Castle#Windsor#IWindsorContainer#Item(System.Type)">
            <summary>设置 IWindsorContainer.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Kernel">
            <summary>设置 IWindsorContainer.get_Kernel() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubIWindsorContainer.cw::Castle#Windsor#IWindsorContainer#Parent">
            <summary>设置 IWindsorContainer.get_Parent() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubInitializationException">
            <summary>Castle.Windsor.InitializationException 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.#ctor(System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubInitializationException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubInitializationException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.InitializeStub">
            <summary>初始化 type StubInitializationException 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubInitializationException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubInitializationException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubInitializationException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Fakes.StubWindsorContainer">
            <summary>Castle.Windsor.WindsorContainer 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.MicroKernel.IConfigurationStore)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.MicroKernel.IProxyFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.MicroKernel.IKernel,Castle.Windsor.IComponentsInstaller)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.Windsor.IWindsorContainer,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>设置 WindsorContainer.AddChildContainer(IWindsorContainer childContainer) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddChildContainerIWindsorContainer">
            <summary>设置 WindsorContainer.AddChildContainer(IWindsorContainer childContainer) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponent(System.String,System.Type)">
            <summary>设置 WindsorContainer.AddComponent(String key, Type classType) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>设置 WindsorContainer.AddComponent(String key, Type serviceType, Type classType) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentStringType">
            <summary>设置 WindsorContainer.AddComponent(String key, Type classType) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentStringTypeType">
            <summary>设置 WindsorContainer.AddComponent(String key, Type serviceType, Type classType) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithPropertiesStringTypeIDictionary">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddComponentWithPropertiesStringTypeTypeIDictionary">
            <summary>设置 WindsorContainer.AddComponentWithProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>设置 WindsorContainer.AddFacility(String key, IFacility facility) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.AddFacilityStringIFacility">
            <summary>设置 WindsorContainer.AddFacility(String key, IFacility facility) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.AttachBackingFieldToParent">
            <summary>附加委托以将 StubWindsorContainer.Parent 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Dispose">
            <summary>设置 WindsorContainer.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.Dispose01">
            <summary>设置 WindsorContainer.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.InitializeStub">
            <summary>初始化 type StubWindsorContainer 的新实例</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ItemGetString">
            <summary>设置 WindsorContainer.get_Item(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ItemGetType">
            <summary>设置 WindsorContainer.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.KernelGet">
            <summary>设置 WindsorContainer.get_Kernel() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ParentGet">
            <summary>设置 WindsorContainer.get_Parent() 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ParentSetIWindsorContainer">
            <summary>设置 WindsorContainer.set_Parent(IWindsorContainer value) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Release(System.Object)">
            <summary>设置 WindsorContainer.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ReleaseObject">
            <summary>设置 WindsorContainer.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>设置 WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.RemoveChildContainerIWindsorContainer">
            <summary>设置 WindsorContainer.RemoveChildContainer(IWindsorContainer childContainer) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.Type)">
            <summary>设置 WindsorContainer.Resolve(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve``1(System.String)">
            <summary>设置 WindsorContainer.Resolve(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.String)">
            <summary>设置 WindsorContainer.Resolve(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.Resolve(System.String,System.Type)">
            <summary>设置 WindsorContainer.Resolve(String key, Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 Resolve(String key) 的存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveString">
            <summary>设置 WindsorContainer.Resolve(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveStringType">
            <summary>设置 WindsorContainer.Resolve(String key, Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.ResolveType">
            <summary>设置 WindsorContainer.Resolve(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Fakes.StubWindsorContainer.RunInstaller">
            <summary>设置 WindsorContainer.RunInstaller() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Fakes.StubWindsorContainer.RunInstaller01">
            <summary>设置 WindsorContainer.RunInstaller() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Item(System.String)">
            <summary>设置 WindsorContainer.get_Item(String key) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Item(System.Type)">
            <summary>设置 WindsorContainer.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Kernel">
            <summary>设置 WindsorContainer.get_Kernel() 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Fakes.StubWindsorContainer.Parent">
            <summary>设置 WindsorContainer.get_Parent() 的 stub</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller">
            <summary>Castle.Windsor.Installer.DefaultComponentInstaller 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.#ctor(Castle.Windsor.Installer.DefaultComponentInstaller)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.Bind(Castle.Windsor.IComponentsInstaller)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.Constructor">
            <summary>设置 DefaultComponentInstaller.DefaultComponentInstaller() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.InstantiateFacilityType">
            <summary>设置 DefaultComponentInstaller.InstantiateFacility(Type facilityType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.ObtainTypeString">
            <summary>设置 DefaultComponentInstaller.ObtainType(String typeName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpComponentsIConfigurationArrayIWindsorContainer">
            <summary>设置 DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpFacilitiesIConfigurationArrayIWindsorContainer">
            <summary>设置 DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.SetUpIWindsorContainerIConfigurationStore">
            <summary>设置 DefaultComponentInstaller.SetUp(IWindsorContainer container, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.InstantiateFacilityType">
            <summary>设置 DefaultComponentInstaller.InstantiateFacility(Type facilityType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.ObtainTypeString">
            <summary>设置 DefaultComponentInstaller.ObtainType(String typeName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.SetUpComponentsIConfigurationArrayIWindsorContainer">
            <summary>设置 DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.SetUpFacilitiesIConfigurationArrayIWindsorContainer">
            <summary>设置 DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.ShimDefaultComponentInstaller.AllInstances.SetUpIWindsorContainerIConfigurationStore">
            <summary>设置 DefaultComponentInstaller.SetUp(IWindsorContainer container, IConfigurationStore store) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller">
            <summary>Castle.Windsor.Installer.DefaultComponentInstaller 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.InitializeStub">
            <summary>初始化 type StubDefaultComponentInstaller 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpComponents(Castle.Core.Configuration.IConfiguration[],Castle.Windsor.IWindsorContainer)">
            <summary>设置 DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpComponentsIConfigurationArrayIWindsorContainer">
            <summary>设置 DefaultComponentInstaller.SetUpComponents(IConfiguration[] configurations, IWindsorContainer container) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpFacilities(Castle.Core.Configuration.IConfiguration[],Castle.Windsor.IWindsorContainer)">
            <summary>设置 DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.SetUpFacilitiesIConfigurationArrayIWindsorContainer">
            <summary>设置 DefaultComponentInstaller.SetUpFacilities(IConfiguration[] configurations, IWindsorContainer container) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Installer.Fakes.StubDefaultComponentInstaller.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory">
            <summary>Castle.Windsor.Proxy.AbstractProxyFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.#ctor(Castle.Windsor.Proxy.AbstractProxyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.Constructor">
            <summary>设置 AbstractProxyFactory.AbstractProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.ObtainInterceptorsIKernelComponentModel">
            <summary>设置 AbstractProxyFactory.ObtainInterceptors(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.SetOnBehalfAwareIOnBehalfAwareComponentModel">
            <summary>设置 AbstractProxyFactory.SetOnBehalfAware(IOnBehalfAware onBehalfAware, ComponentModel target) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances.ObtainInterceptorsIKernelComponentModel">
            <summary>设置 AbstractProxyFactory.ObtainInterceptors(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimAbstractProxyFactory.AllInstances.SetOnBehalfAwareIOnBehalfAwareComponentModel">
            <summary>设置 AbstractProxyFactory.SetOnBehalfAware(IOnBehalfAware onBehalfAware, ComponentModel target) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy">
            <summary>Castle.Windsor.Proxy.ComponentRealProxy 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.#ctor(Castle.Windsor.Proxy.ComponentRealProxy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.ConstructorMarshalByRefObjectTypeIMethodInterceptorArray">
            <summary>设置 ComponentRealProxy.ComponentRealProxy(MarshalByRefObject target, Type classToProxy, IMethodInterceptor[] interceptors) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.InvokeIMessage">
            <summary>设置 ComponentRealProxy.Invoke(IMessage msg) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimComponentRealProxy.AllInstances.InvokeIMessage">
            <summary>设置 ComponentRealProxy.Invoke(IMessage msg) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation">
            <summary>Castle.Windsor.Proxy.DefaultMethodInvocation 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.#ctor(Castle.Windsor.Proxy.DefaultMethodInvocation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.Bind(Castle.Core.Interceptor.IMethodInvocation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.Bind(Castle.DynamicProxy.IInvocation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.ConstructorICallableObjectMethodInfoObject">
            <summary>设置 DefaultMethodInvocation.DefaultMethodInvocation(ICallable callable, Object proxy, MethodInfo method, Object fieldTarget) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.CurrentIndexGet">
            <summary>设置 DefaultMethodInvocation.get_CurrentIndex() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.CurrentIndexSetInt32">
            <summary>设置 DefaultMethodInvocation.set_CurrentIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.InterceptorChainSetIMethodInterceptorArray">
            <summary>设置 DefaultMethodInvocation.set_InterceptorChain(IMethodInterceptor[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.IsInitializedGet">
            <summary>设置 DefaultMethodInvocation.get_IsInitialized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.ProceedObjectArray">
            <summary>设置 DefaultMethodInvocation.Proceed(Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.Reset">
            <summary>设置 DefaultMethodInvocation.Reset() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.AllInstances.CurrentIndexGet">
            <summary>设置 DefaultMethodInvocation.get_CurrentIndex() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.AllInstances.CurrentIndexSetInt32">
            <summary>设置 DefaultMethodInvocation.set_CurrentIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.AllInstances.InterceptorChainSetIMethodInterceptorArray">
            <summary>设置 DefaultMethodInvocation.set_InterceptorChain(IMethodInterceptor[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.AllInstances.IsInitializedGet">
            <summary>设置 DefaultMethodInvocation.get_IsInitialized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.AllInstances.ProceedObjectArray">
            <summary>设置 DefaultMethodInvocation.Proceed(Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultMethodInvocation.AllInstances.Reset">
            <summary>设置 DefaultMethodInvocation.Reset() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory">
            <summary>Castle.Windsor.Proxy.DefaultProxyFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.#ctor(Castle.Windsor.Proxy.DefaultProxyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CollectInterfacesTypeType">
            <summary>设置 DefaultProxyFactory.CollectInterfaces(Type service, Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Constructor">
            <summary>设置 DefaultProxyFactory.DefaultProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 DefaultProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CustomizeContextGeneratorContextIKernelComponentModelObjectArray">
            <summary>设置 DefaultProxyFactory.CustomizeContext(GeneratorContext context, IKernel kernel, ComponentModel model, Object[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.CustomizeProxyObjectGeneratorContextIKernelComponentModel">
            <summary>设置 DefaultProxyFactory.CustomizeProxy(Object proxy, GeneratorContext context, IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.EmptyTypeFilterTypeObject">
            <summary>设置 DefaultProxyFactory.EmptyTypeFilter(Type type, Object criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.Init">
            <summary>设置 DefaultProxyFactory.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.OnDeserializationObject">
            <summary>设置 DefaultProxyFactory.OnDeserialization(Object sender) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CollectInterfacesTypeType">
            <summary>设置 DefaultProxyFactory.CollectInterfaces(Type service, Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CreateIKernelComponentModelObjectArray">
            <summary>设置 DefaultProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CustomizeContextGeneratorContextIKernelComponentModelObjectArray">
            <summary>设置 DefaultProxyFactory.CustomizeContext(GeneratorContext context, IKernel kernel, ComponentModel model, Object[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.CustomizeProxyObjectGeneratorContextIKernelComponentModel">
            <summary>设置 DefaultProxyFactory.CustomizeProxy(Object proxy, GeneratorContext context, IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.EmptyTypeFilterTypeObject">
            <summary>设置 DefaultProxyFactory.EmptyTypeFilter(Type type, Object criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.Init">
            <summary>设置 DefaultProxyFactory.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimDefaultProxyFactory.AllInstances.OnDeserializationObject">
            <summary>设置 DefaultProxyFactory.OnDeserialization(Object sender) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain">
            <summary>Castle.Windsor.Proxy.InterceptorChain 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.#ctor(Castle.Windsor.Proxy.InterceptorChain)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.Bind(Castle.Core.Interceptor.IMethodInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.Bind(Castle.DynamicProxy.IInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.ConstructorIMethodInterceptorArray">
            <summary>设置 InterceptorChain.InterceptorChain(IMethodInterceptor[] interceptors) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.InterceptIInvocationObjectArray">
            <summary>设置 InterceptorChain.Intercept(IInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.InterceptIMethodInvocationObjectArray">
            <summary>设置 InterceptorChain.Intercept(IMethodInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.AllInstances.InterceptIInvocationObjectArray">
            <summary>设置 InterceptorChain.Intercept(IInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimInterceptorChain.AllInstances.InterceptIMethodInvocationObjectArray">
            <summary>设置 InterceptorChain.Intercept(IMethodInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation">
            <summary>Castle.Windsor.Proxy.MessageProxyInvocation 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.#ctor(Castle.Windsor.Proxy.MessageProxyInvocation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.Bind(Castle.Core.Interceptor.IMethodInvocation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.ConstructorMarshalByRefObjectIMethodCallMessageIMethodInterceptorArray">
            <summary>设置 MessageProxyInvocation.MessageProxyInvocation(MarshalByRefObject target, IMethodCallMessage methodCall, IMethodInterceptor[] interceptorChain) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.CurrentIndexGet">
            <summary>设置 MessageProxyInvocation.get_CurrentIndex() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.CurrentIndexSetInt32">
            <summary>设置 MessageProxyInvocation.set_CurrentIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.InvocationTargetGet">
            <summary>设置 MessageProxyInvocation.get_InvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.InvocationTargetSetObject">
            <summary>设置 MessageProxyInvocation.set_InvocationTarget(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.MethodGet">
            <summary>设置 MessageProxyInvocation.get_Method() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.MethodInvocationTargetGet">
            <summary>设置 MessageProxyInvocation.get_MethodInvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.ProceedObjectArray">
            <summary>设置 MessageProxyInvocation.Proceed(Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.ProxyGet">
            <summary>设置 MessageProxyInvocation.get_Proxy() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.CurrentIndexGet">
            <summary>设置 MessageProxyInvocation.get_CurrentIndex() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.CurrentIndexSetInt32">
            <summary>设置 MessageProxyInvocation.set_CurrentIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.InvocationTargetGet">
            <summary>设置 MessageProxyInvocation.get_InvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.InvocationTargetSetObject">
            <summary>设置 MessageProxyInvocation.set_InvocationTarget(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.MethodGet">
            <summary>设置 MessageProxyInvocation.get_Method() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.MethodInvocationTargetGet">
            <summary>设置 MessageProxyInvocation.get_MethodInvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.ProceedObjectArray">
            <summary>设置 MessageProxyInvocation.Proceed(Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimMessageProxyInvocation.AllInstances.ProxyGet">
            <summary>设置 MessageProxyInvocation.get_Proxy() 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory">
            <summary>Castle.Windsor.Proxy.ProxySmartFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.#ctor(Castle.Windsor.Proxy.ProxySmartFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.Constructor">
            <summary>设置 ProxySmartFactory.ProxySmartFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 ProxySmartFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimProxySmartFactory.AllInstances.CreateIKernelComponentModelObjectArray">
            <summary>设置 ProxySmartFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory">
            <summary>Castle.Windsor.Proxy.RealProxyProxyFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.#ctor(Castle.Windsor.Proxy.RealProxyProxyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.Constructor">
            <summary>设置 RealProxyProxyFactory.RealProxyProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 RealProxyProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.ShimRealProxyProxyFactory.AllInstances.CreateIKernelComponentModelObjectArray">
            <summary>设置 RealProxyProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory">
            <summary>Castle.Windsor.Proxy.AbstractProxyFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>设置 AbstractProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 AbstractProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.InitializeStub">
            <summary>初始化 type StubAbstractProxyFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubAbstractProxyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy">
            <summary>Castle.Windsor.Proxy.ComponentRealProxy 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.#ctor(System.MarshalByRefObject,System.Type,Castle.Core.Interceptor.IMethodInterceptor[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.CreateObjRef(System.Type)">
            <summary>设置 RealProxy.CreateObjRef(Type requestedType) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.CreateObjRefType">
            <summary>设置 RealProxy.CreateObjRef(Type requestedType) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.GetCOMIUnknown(System.Boolean)">
            <summary>设置 RealProxy.GetCOMIUnknown(Boolean fIsMarshalled) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.GetCOMIUnknownBoolean">
            <summary>设置 RealProxy.GetCOMIUnknown(Boolean fIsMarshalled) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 RealProxy.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 RealProxy.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.GetTransparentProxy">
            <summary>设置 RealProxy.GetTransparentProxy() 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.GetTransparentProxy01">
            <summary>设置 RealProxy.GetTransparentProxy() 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.InitializeStub">
            <summary>初始化 type StubComponentRealProxy 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>设置 ComponentRealProxy.Invoke(IMessage msg) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.InvokeIMessage">
            <summary>设置 ComponentRealProxy.Invoke(IMessage msg) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.SetCOMIUnknown(System.IntPtr)">
            <summary>设置 RealProxy.SetCOMIUnknown(IntPtr i) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.SetCOMIUnknownIntPtr">
            <summary>设置 RealProxy.SetCOMIUnknown(IntPtr i) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.SupportsInterface(System.Guid@)">
            <summary>设置 RealProxy.SupportsInterface(Guid&amp; iid) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.SupportsInterfaceGuidRef">
            <summary>设置 RealProxy.SupportsInterface(Guid&amp; iid) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubComponentRealProxy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation">
            <summary>Castle.Windsor.Proxy.DefaultMethodInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation.#ctor(Castle.DynamicProxy.ICallable,System.Object,System.Reflection.MethodInfo,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation.InitializeStub">
            <summary>初始化 type StubDefaultMethodInvocation 的新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation.Proceed(System.Object[])">
            <summary>设置 DefaultMethodInvocation.Proceed(Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation.ProceedObjectArray">
            <summary>设置 DefaultMethodInvocation.Proceed(Object[] args) 的 stub</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultMethodInvocation.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory">
            <summary>Castle.Windsor.Proxy.DefaultProxyFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>设置 DefaultProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 DefaultProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeContext(Castle.DynamicProxy.GeneratorContext,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>设置 DefaultProxyFactory.CustomizeContext(GeneratorContext context, IKernel kernel, ComponentModel model, Object[] arguments) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeContextGeneratorContextIKernelComponentModelObjectArray">
            <summary>设置 DefaultProxyFactory.CustomizeContext(GeneratorContext context, IKernel kernel, ComponentModel model, Object[] arguments) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeProxy(System.Object,Castle.DynamicProxy.GeneratorContext,Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 DefaultProxyFactory.CustomizeProxy(Object proxy, GeneratorContext context, IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CustomizeProxyObjectGeneratorContextIKernelComponentModel">
            <summary>设置 DefaultProxyFactory.CustomizeProxy(Object proxy, GeneratorContext context, IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.InitializeStub">
            <summary>初始化 type StubDefaultProxyFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubDefaultProxyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubMessageProxyInvocation">
            <summary>Castle.Windsor.Proxy.MessageProxyInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubMessageProxyInvocation.#ctor(System.MarshalByRefObject,System.Runtime.Remoting.Messaging.IMethodCallMessage,Castle.Core.Interceptor.IMethodInterceptor[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubMessageProxyInvocation.InitializeStub">
            <summary>初始化 type StubMessageProxyInvocation 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubMessageProxyInvocation.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubMessageProxyInvocation.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubMessageProxyInvocation.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory">
            <summary>Castle.Windsor.Proxy.ProxySmartFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>设置 ProxySmartFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 ProxySmartFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory.InitializeStub">
            <summary>初始化 type StubProxySmartFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubProxySmartFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory">
            <summary>Castle.Windsor.Proxy.RealProxyProxyFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory.Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>设置 RealProxyProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 存根</summary>
        </member>
        <member name="F:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 RealProxyProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 stub</summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory.InitializeStub">
            <summary>初始化 type StubRealProxyProxyFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Windsor.Proxy.Fakes.StubRealProxyProxyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
