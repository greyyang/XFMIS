<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Core.1.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration">
            <summary>Castle.Core.Configuration.AbstractConfiguration 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.#ctor(Castle.Core.Configuration.AbstractConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.Bind(Castle.Core.Configuration.IConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.AttributesGet">
            <summary>设置 AbstractConfiguration.get_Attributes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.ChildrenGet">
            <summary>设置 AbstractConfiguration.get_Children() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.Constructor">
            <summary>设置 AbstractConfiguration.AbstractConfiguration() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.GetValueTypeObject">
            <summary>设置 AbstractConfiguration.GetValue(Type type, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.NameGet">
            <summary>设置 AbstractConfiguration.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.ValueGet">
            <summary>设置 AbstractConfiguration.get_Value() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.AllInstances.AttributesGet">
            <summary>设置 AbstractConfiguration.get_Attributes() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.AllInstances.ChildrenGet">
            <summary>设置 AbstractConfiguration.get_Children() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.AllInstances.GetValueTypeObject">
            <summary>设置 AbstractConfiguration.GetValue(Type type, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.AllInstances.NameGet">
            <summary>设置 AbstractConfiguration.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimAbstractConfiguration.AllInstances.ValueGet">
            <summary>设置 AbstractConfiguration.get_Value() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.ShimConfigurationCollection">
            <summary>Castle.Core.Configuration.ConfigurationCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.#ctor(Castle.Core.Configuration.ConfigurationCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AddIConfiguration">
            <summary>设置 ConfigurationCollection.Add(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AddRangeConfigurationCollection">
            <summary>设置 ConfigurationCollection.AddRange(ConfigurationCollection value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AddRangeIConfigurationArray">
            <summary>设置 ConfigurationCollection.AddRange(IConfiguration[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.Constructor">
            <summary>设置 ConfigurationCollection.ConfigurationCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.ConstructorConfigurationCollection">
            <summary>设置 ConfigurationCollection.ConfigurationCollection(ConfigurationCollection value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.ConstructorIConfigurationArray">
            <summary>设置 ConfigurationCollection.ConfigurationCollection(IConfiguration[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.ContainsIConfiguration">
            <summary>设置 ConfigurationCollection.Contains(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.CopyToIConfigurationArrayInt32">
            <summary>设置 ConfigurationCollection.CopyTo(IConfiguration[] array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.ItemGetInt32">
            <summary>设置 ConfigurationCollection.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.ItemGetString">
            <summary>设置 ConfigurationCollection.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.ItemSetInt32IConfiguration">
            <summary>设置 ConfigurationCollection.set_Item(Int32 index, IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.RemoveIConfiguration">
            <summary>设置 ConfigurationCollection.Remove(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.AddIConfiguration">
            <summary>设置 ConfigurationCollection.Add(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.AddRangeConfigurationCollection">
            <summary>设置 ConfigurationCollection.AddRange(ConfigurationCollection value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.AddRangeIConfigurationArray">
            <summary>设置 ConfigurationCollection.AddRange(IConfiguration[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.ContainsIConfiguration">
            <summary>设置 ConfigurationCollection.Contains(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.CopyToIConfigurationArrayInt32">
            <summary>设置 ConfigurationCollection.CopyTo(IConfiguration[] array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.ItemGetInt32">
            <summary>设置 ConfigurationCollection.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.ItemGetString">
            <summary>设置 ConfigurationCollection.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.ItemSetInt32IConfiguration">
            <summary>设置 ConfigurationCollection.set_Item(Int32 index, IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimConfigurationCollection.AllInstances.RemoveIConfiguration">
            <summary>设置 ConfigurationCollection.Remove(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.ShimMutableConfiguration">
            <summary>Castle.Core.Configuration.MutableConfiguration 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.#ctor(Castle.Core.Configuration.MutableConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.Bind(Castle.Core.Configuration.IConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.ConstructorString">
            <summary>设置 MutableConfiguration.MutableConfiguration(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.ConstructorStringString">
            <summary>设置 MutableConfiguration.MutableConfiguration(String name, String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.ShimMutableConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.StubAbstractConfiguration">
            <summary>Castle.Core.Configuration.AbstractConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.AttributesGet">
            <summary>设置 AbstractConfiguration.get_Attributes() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.ChildrenGet">
            <summary>设置 AbstractConfiguration.get_Children() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.GetValue(System.Type,System.Object)">
            <summary>设置 AbstractConfiguration.GetValue(Type type, Object defaultValue) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.GetValueTypeObject">
            <summary>设置 AbstractConfiguration.GetValue(Type type, Object defaultValue) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.InitializeStub">
            <summary>初始化 type StubAbstractConfiguration 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.NameGet">
            <summary>设置 AbstractConfiguration.get_Name() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.ValueGet">
            <summary>设置 AbstractConfiguration.get_Value() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.Attributes">
            <summary>设置 AbstractConfiguration.get_Attributes() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.Children">
            <summary>设置 AbstractConfiguration.get_Children() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.Name">
            <summary>设置 AbstractConfiguration.get_Name() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubAbstractConfiguration.Value">
            <summary>设置 AbstractConfiguration.get_Value() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.StubConfigurationCollection">
            <summary>Castle.Core.Configuration.ConfigurationCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubConfigurationCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubConfigurationCollection.#ctor(Castle.Core.Configuration.ConfigurationCollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubConfigurationCollection.#ctor(Castle.Core.Configuration.IConfiguration[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubConfigurationCollection.CountGet">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubConfigurationCollection.GetEnumerator">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubConfigurationCollection.GetEnumerator01">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubConfigurationCollection.InitializeStub">
            <summary>初始化 type StubConfigurationCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubConfigurationCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubConfigurationCollection.Count">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubConfigurationCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubConfigurationCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.StubIConfiguration">
            <summary>Castle.Core.Configuration.IConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubIConfiguration.#ctor">
            <summary>初始化 type StubIConfiguration 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubIConfiguration.AttributesGet">
            <summary>设置 IConfiguration.get_Attributes() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubIConfiguration.cc::Castle#Core#Configuration#IConfiguration#GetValue(System.Type,System.Object)">
            <summary>设置 IConfiguration.GetValue(Type type, Object defaultValue) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubIConfiguration.ChildrenGet">
            <summary>设置 IConfiguration.get_Children() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubIConfiguration.GetValueTypeObject">
            <summary>设置 IConfiguration.GetValue(Type type, Object defaultValue) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubIConfiguration.NameGet">
            <summary>设置 IConfiguration.get_Name() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubIConfiguration.ValueGet">
            <summary>设置 IConfiguration.get_Value() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubIConfiguration.cc::Castle#Core#Configuration#IConfiguration#Attributes">
            <summary>设置 IConfiguration.get_Attributes() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubIConfiguration.cc::Castle#Core#Configuration#IConfiguration#Children">
            <summary>设置 IConfiguration.get_Children() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubIConfiguration.cc::Castle#Core#Configuration#IConfiguration#Name">
            <summary>设置 IConfiguration.get_Name() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubIConfiguration.cc::Castle#Core#Configuration#IConfiguration#Value">
            <summary>设置 IConfiguration.get_Value() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Configuration.Fakes.StubMutableConfiguration">
            <summary>Castle.Core.Configuration.MutableConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubMutableConfiguration.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubMutableConfiguration.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubMutableConfiguration.AttributesGet">
            <summary>设置 AbstractConfiguration.get_Attributes() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubMutableConfiguration.ChildrenGet">
            <summary>设置 AbstractConfiguration.get_Children() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubMutableConfiguration.GetValue(System.Type,System.Object)">
            <summary>设置 AbstractConfiguration.GetValue(Type type, Object defaultValue) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubMutableConfiguration.GetValueTypeObject">
            <summary>设置 AbstractConfiguration.GetValue(Type type, Object defaultValue) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Configuration.Fakes.StubMutableConfiguration.InitializeStub">
            <summary>初始化 type StubMutableConfiguration 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubMutableConfiguration.NameGet">
            <summary>设置 AbstractConfiguration.get_Name() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Configuration.Fakes.StubMutableConfiguration.ValueGet">
            <summary>设置 AbstractConfiguration.get_Value() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubMutableConfiguration.Attributes">
            <summary>设置 AbstractConfiguration.get_Attributes() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubMutableConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubMutableConfiguration.Children">
            <summary>设置 AbstractConfiguration.get_Children() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubMutableConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubMutableConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubMutableConfiguration.Name">
            <summary>设置 AbstractConfiguration.get_Name() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Configuration.Fakes.StubMutableConfiguration.Value">
            <summary>设置 AbstractConfiguration.get_Value() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCastleComponentAttribute">
            <summary>Castle.Core.CastleComponentAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.#ctor(Castle.Core.CastleComponentAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCastleComponentAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ConstructorString">
            <summary>设置 CastleComponentAttribute.CastleComponentAttribute(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ConstructorStringType">
            <summary>设置 CastleComponentAttribute.CastleComponentAttribute(String key, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.KeyGet">
            <summary>设置 CastleComponentAttribute.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.ServiceGet">
            <summary>设置 CastleComponentAttribute.get_Service() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.KeyGet">
            <summary>设置 CastleComponentAttribute.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCastleComponentAttribute.AllInstances.ServiceGet">
            <summary>设置 CastleComponentAttribute.get_Service() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentModel">
            <summary>Castle.Core.ComponentModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.#ctor(Castle.Core.ComponentModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimComponentModel.Bind(Castle.Core.IVertex)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConfigurationGet">
            <summary>设置 ComponentModel.get_Configuration() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConfigurationSetIConfiguration">
            <summary>设置 ComponentModel.set_Configuration(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConstructorStringTypeType">
            <summary>设置 ComponentModel.ComponentModel(String name, Type service, Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ConstructorsGet">
            <summary>设置 ComponentModel.get_Constructors() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomComponentActivatorGet">
            <summary>设置 ComponentModel.get_CustomComponentActivator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomComponentActivatorSetType">
            <summary>设置 ComponentModel.set_CustomComponentActivator(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomLifestyleGet">
            <summary>设置 ComponentModel.get_CustomLifestyle() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.CustomLifestyleSetType">
            <summary>设置 ComponentModel.set_CustomLifestyle(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.DependenciesGet">
            <summary>设置 ComponentModel.get_Dependencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ExtendedPropertiesGet">
            <summary>设置 ComponentModel.get_ExtendedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ExtendedPropertiesSetIDictionary">
            <summary>设置 ComponentModel.set_ExtendedProperties(IDictionary value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ImplementationGet">
            <summary>设置 ComponentModel.get_Implementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ImplementationSetType">
            <summary>设置 ComponentModel.set_Implementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.InspectionBehaviorGet">
            <summary>设置 ComponentModel.get_InspectionBehavior() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.InspectionBehaviorSetPropertiesInspectionBehavior">
            <summary>设置 ComponentModel.set_InspectionBehavior(PropertiesInspectionBehavior value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.InterceptorsGet">
            <summary>设置 ComponentModel.get_Interceptors() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.LifecycleStepsGet">
            <summary>设置 ComponentModel.get_LifecycleSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.LifestyleTypeGet">
            <summary>设置 ComponentModel.get_LifestyleType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.LifestyleTypeSetLifestyleType">
            <summary>设置 ComponentModel.set_LifestyleType(LifestyleType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.NameGet">
            <summary>设置 ComponentModel.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.NameSetString">
            <summary>设置 ComponentModel.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ParametersGet">
            <summary>设置 ComponentModel.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.PropertiesGet">
            <summary>设置 ComponentModel.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.RequiresGenericArgumentsGet">
            <summary>设置 ComponentModel.get_RequiresGenericArguments() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.RequiresGenericArgumentsSetBoolean">
            <summary>设置 ComponentModel.set_RequiresGenericArguments(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ServiceGet">
            <summary>设置 ComponentModel.get_Service() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.ServiceSetType">
            <summary>设置 ComponentModel.set_Service(Type value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimComponentModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ConfigurationGet">
            <summary>设置 ComponentModel.get_Configuration() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ConfigurationSetIConfiguration">
            <summary>设置 ComponentModel.set_Configuration(IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ConstructorsGet">
            <summary>设置 ComponentModel.get_Constructors() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomComponentActivatorGet">
            <summary>设置 ComponentModel.get_CustomComponentActivator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomComponentActivatorSetType">
            <summary>设置 ComponentModel.set_CustomComponentActivator(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomLifestyleGet">
            <summary>设置 ComponentModel.get_CustomLifestyle() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.CustomLifestyleSetType">
            <summary>设置 ComponentModel.set_CustomLifestyle(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.DependenciesGet">
            <summary>设置 ComponentModel.get_Dependencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ExtendedPropertiesGet">
            <summary>设置 ComponentModel.get_ExtendedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ExtendedPropertiesSetIDictionary">
            <summary>设置 ComponentModel.set_ExtendedProperties(IDictionary value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ImplementationGet">
            <summary>设置 ComponentModel.get_Implementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ImplementationSetType">
            <summary>设置 ComponentModel.set_Implementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.InspectionBehaviorGet">
            <summary>设置 ComponentModel.get_InspectionBehavior() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.InspectionBehaviorSetPropertiesInspectionBehavior">
            <summary>设置 ComponentModel.set_InspectionBehavior(PropertiesInspectionBehavior value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.InterceptorsGet">
            <summary>设置 ComponentModel.get_Interceptors() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.LifecycleStepsGet">
            <summary>设置 ComponentModel.get_LifecycleSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.LifestyleTypeGet">
            <summary>设置 ComponentModel.get_LifestyleType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.LifestyleTypeSetLifestyleType">
            <summary>设置 ComponentModel.set_LifestyleType(LifestyleType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.NameGet">
            <summary>设置 ComponentModel.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.NameSetString">
            <summary>设置 ComponentModel.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ParametersGet">
            <summary>设置 ComponentModel.get_Parameters() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.PropertiesGet">
            <summary>设置 ComponentModel.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.RequiresGenericArgumentsGet">
            <summary>设置 ComponentModel.get_RequiresGenericArguments() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.RequiresGenericArgumentsSetBoolean">
            <summary>设置 ComponentModel.set_RequiresGenericArguments(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ServiceGet">
            <summary>设置 ComponentModel.get_Service() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimComponentModel.AllInstances.ServiceSetType">
            <summary>设置 ComponentModel.set_Service(Type value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidate">
            <summary>Castle.Core.ConstructorCandidate 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.#ctor(Castle.Core.ConstructorCandidate)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidate.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.ConstructorConstructorInfoDependencyModelArray">
            <summary>设置 ConstructorCandidate.ConstructorCandidate(ConstructorInfo constructorInfo, DependencyModel[] dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.ConstructorGet">
            <summary>设置 ConstructorCandidate.get_Constructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.DependenciesGet">
            <summary>设置 ConstructorCandidate.get_Dependencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.PointsGet">
            <summary>设置 ConstructorCandidate.get_Points() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.PointsSetInt32">
            <summary>设置 ConstructorCandidate.set_Points(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.ConstructorGet">
            <summary>设置 ConstructorCandidate.get_Constructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.DependenciesGet">
            <summary>设置 ConstructorCandidate.get_Dependencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.PointsGet">
            <summary>设置 ConstructorCandidate.get_Points() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidate.AllInstances.PointsSetInt32">
            <summary>设置 ConstructorCandidate.set_Points(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidateCollection">
            <summary>Castle.Core.ConstructorCandidateCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.#ctor(Castle.Core.ConstructorCandidateCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimConstructorCandidateCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AddConstructorCandidate">
            <summary>设置 ConstructorCandidateCollection.Add(ConstructorCandidate candidate) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.BestCandidateGet">
            <summary>设置 ConstructorCandidateCollection.get_BestCandidate() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.BestCandidateSetConstructorCandidate">
            <summary>设置 ConstructorCandidateCollection.set_BestCandidate(ConstructorCandidate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.Clear">
            <summary>设置 ConstructorCandidateCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.Constructor">
            <summary>设置 ConstructorCandidateCollection.ConstructorCandidateCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.FewerArgumentsCandidateGet">
            <summary>设置 ConstructorCandidateCollection.get_FewerArgumentsCandidate() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.AddConstructorCandidate">
            <summary>设置 ConstructorCandidateCollection.Add(ConstructorCandidate candidate) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.BestCandidateGet">
            <summary>设置 ConstructorCandidateCollection.get_BestCandidate() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.BestCandidateSetConstructorCandidate">
            <summary>设置 ConstructorCandidateCollection.set_BestCandidate(ConstructorCandidate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.Clear">
            <summary>设置 ConstructorCandidateCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimConstructorCandidateCollection.AllInstances.FewerArgumentsCandidateGet">
            <summary>设置 ConstructorCandidateCollection.get_FewerArgumentsCandidate() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCustomLifestyleAttribute">
            <summary>Castle.Core.CustomLifestyleAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.#ctor(Castle.Core.CustomLifestyleAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimCustomLifestyleAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.ConstructorType">
            <summary>设置 CustomLifestyleAttribute.CustomLifestyleAttribute(Type lifestyleHandler) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.LifestyleHandlerTypeGet">
            <summary>设置 CustomLifestyleAttribute.get_LifestyleHandlerType() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimCustomLifestyleAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimCustomLifestyleAttribute.AllInstances.LifestyleHandlerTypeGet">
            <summary>设置 CustomLifestyleAttribute.get_LifestyleHandlerType() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModel">
            <summary>Castle.Core.DependencyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.#ctor(Castle.Core.DependencyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ConstructorDependencyTypeStringTypeBoolean">
            <summary>设置 DependencyModel.DependencyModel(DependencyType type, String dependencyKey, Type targetType, Boolean isOptional) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DependencyKeyGet">
            <summary>设置 DependencyModel.get_DependencyKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DependencyKeySetString">
            <summary>设置 DependencyModel.set_DependencyKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DependencyTypeGet">
            <summary>设置 DependencyModel.get_DependencyType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.DependencyTypeSetDependencyType">
            <summary>设置 DependencyModel.set_DependencyType(DependencyType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.EqualsObject">
            <summary>设置 DependencyModel.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.GetHashCode">
            <summary>设置 DependencyModel.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.IsOptionalGet">
            <summary>设置 DependencyModel.get_IsOptional() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.IsOptionalSetBoolean">
            <summary>设置 DependencyModel.set_IsOptional(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.TargetTypeGet">
            <summary>设置 DependencyModel.get_TargetType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.ToString">
            <summary>设置 DependencyModel.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DependencyKeyGet">
            <summary>设置 DependencyModel.get_DependencyKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DependencyKeySetString">
            <summary>设置 DependencyModel.set_DependencyKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DependencyTypeGet">
            <summary>设置 DependencyModel.get_DependencyType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.DependencyTypeSetDependencyType">
            <summary>设置 DependencyModel.set_DependencyType(DependencyType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.EqualsObject">
            <summary>设置 DependencyModel.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.GetHashCode01">
            <summary>设置 DependencyModel.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.IsOptionalGet">
            <summary>设置 DependencyModel.get_IsOptional() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.IsOptionalSetBoolean">
            <summary>设置 DependencyModel.set_IsOptional(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.TargetTypeGet">
            <summary>设置 DependencyModel.get_TargetType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModel.AllInstances.ToString01">
            <summary>设置 DependencyModel.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModelCollection">
            <summary>Castle.Core.DependencyModelCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.#ctor(Castle.Core.DependencyModelCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimDependencyModelCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AddDependencyModel">
            <summary>设置 DependencyModelCollection.Add(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.Clear">
            <summary>设置 DependencyModelCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.Constructor">
            <summary>设置 DependencyModelCollection.DependencyModelCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.ConstructorDependencyModelArray">
            <summary>设置 DependencyModelCollection.DependencyModelCollection(DependencyModel[] dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.ConstructorDependencyModelCollection">
            <summary>设置 DependencyModelCollection.DependencyModelCollection(DependencyModelCollection dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.ContainsDependencyModel">
            <summary>设置 DependencyModelCollection.Contains(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.RemoveDependencyModel">
            <summary>设置 DependencyModelCollection.Remove(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.AddDependencyModel">
            <summary>设置 DependencyModelCollection.Add(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.Clear">
            <summary>设置 DependencyModelCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.ContainsDependencyModel">
            <summary>设置 DependencyModelCollection.Contains(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimDependencyModelCollection.AllInstances.RemoveDependencyModel">
            <summary>设置 DependencyModelCollection.Remove(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimGraphNode">
            <summary>Castle.Core.GraphNode 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimGraphNode.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimGraphNode.#ctor(Castle.Core.GraphNode)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimGraphNode.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimGraphNode.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimGraphNode.Bind(Castle.Core.IVertex)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AddDependentGraphNode">
            <summary>设置 GraphNode.AddDependent(GraphNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AdjacenciesGet">
            <summary>设置 GraphNode.get_Adjacencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.Constructor">
            <summary>设置 GraphNode.GraphNode() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.DependentsGet">
            <summary>设置 GraphNode.get_Dependents() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.DependersGet">
            <summary>设置 GraphNode.get_Dependers() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.IncomingGet">
            <summary>设置 GraphNode.get_Incoming() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.OutgoingGet">
            <summary>设置 GraphNode.get_Outgoing() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.RemoveDependentGraphNode">
            <summary>设置 GraphNode.RemoveDependent(GraphNode graphNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.RemoveDependerGraphNode">
            <summary>设置 GraphNode.RemoveDepender(GraphNode depender) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimGraphNode.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.AddDependentGraphNode">
            <summary>设置 GraphNode.AddDependent(GraphNode node) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.AdjacenciesGet">
            <summary>设置 GraphNode.get_Adjacencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.DependentsGet">
            <summary>设置 GraphNode.get_Dependents() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.DependersGet">
            <summary>设置 GraphNode.get_Dependers() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.IncomingGet">
            <summary>设置 GraphNode.get_Incoming() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.OutgoingGet">
            <summary>设置 GraphNode.get_Outgoing() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.RemoveDependentGraphNode">
            <summary>设置 GraphNode.RemoveDependent(GraphNode graphNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimGraphNode.AllInstances.RemoveDependerGraphNode">
            <summary>设置 GraphNode.RemoveDepender(GraphNode depender) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorAttribute">
            <summary>Castle.Core.InterceptorAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.#ctor(Castle.Core.InterceptorAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.ConstructorString">
            <summary>设置 InterceptorAttribute.InterceptorAttribute(String componentKey) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.ConstructorType">
            <summary>设置 InterceptorAttribute.InterceptorAttribute(Type interceptorType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.InterceptorGet">
            <summary>设置 InterceptorAttribute.get_Interceptor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorAttribute.AllInstances.InterceptorGet">
            <summary>设置 InterceptorAttribute.get_Interceptor() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReference">
            <summary>Castle.Core.InterceptorReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.#ctor(Castle.Core.InterceptorReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ComponentKeyGet">
            <summary>设置 InterceptorReference.get_ComponentKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ConstructorString">
            <summary>设置 InterceptorReference.InterceptorReference(String componentKey) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ConstructorType">
            <summary>设置 InterceptorReference.InterceptorReference(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ReferenceTypeGet">
            <summary>设置 InterceptorReference.get_ReferenceType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.ServiceTypeGet">
            <summary>设置 InterceptorReference.get_ServiceType() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.ComponentKeyGet">
            <summary>设置 InterceptorReference.get_ComponentKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.ReferenceTypeGet">
            <summary>设置 InterceptorReference.get_ReferenceType() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReference.AllInstances.ServiceTypeGet">
            <summary>设置 InterceptorReference.get_ServiceType() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReferenceCollection">
            <summary>Castle.Core.InterceptorReferenceCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.#ctor(Castle.Core.InterceptorReferenceCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AddFirstInterceptorReference">
            <summary>设置 InterceptorReferenceCollection.AddFirst(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AddInterceptorReference">
            <summary>设置 InterceptorReferenceCollection.Add(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AddLastInterceptorReference">
            <summary>设置 InterceptorReferenceCollection.AddLast(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.Constructor">
            <summary>设置 InterceptorReferenceCollection.InterceptorReferenceCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.CopyToArrayInt32">
            <summary>设置 InterceptorReferenceCollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.CountGet">
            <summary>设置 InterceptorReferenceCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.GetEnumerator">
            <summary>设置 InterceptorReferenceCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.HasInterceptorsGet">
            <summary>设置 InterceptorReferenceCollection.get_HasInterceptors() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.InsertInt32InterceptorReference">
            <summary>设置 InterceptorReferenceCollection.Insert(Int32 index, InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.IsSynchronizedGet">
            <summary>设置 InterceptorReferenceCollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.SyncRootGet">
            <summary>设置 InterceptorReferenceCollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AddFirstInterceptorReference">
            <summary>设置 InterceptorReferenceCollection.AddFirst(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AddInterceptorReference">
            <summary>设置 InterceptorReferenceCollection.Add(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.AddLastInterceptorReference">
            <summary>设置 InterceptorReferenceCollection.AddLast(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.CopyToArrayInt32">
            <summary>设置 InterceptorReferenceCollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.CountGet">
            <summary>设置 InterceptorReferenceCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.GetEnumerator">
            <summary>设置 InterceptorReferenceCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.HasInterceptorsGet">
            <summary>设置 InterceptorReferenceCollection.get_HasInterceptors() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.InsertInt32InterceptorReference">
            <summary>设置 InterceptorReferenceCollection.Insert(Int32 index, InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.IsSynchronizedGet">
            <summary>设置 InterceptorReferenceCollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimInterceptorReferenceCollection.AllInstances.SyncRootGet">
            <summary>设置 InterceptorReferenceCollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifecycleStepCollection">
            <summary>Castle.Core.LifecycleStepCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleStepCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleStepCollection.#ctor(Castle.Core.LifecycleStepCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleStepCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleStepCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleStepCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifecycleStepCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AddLifecycleStepTypeObject">
            <summary>设置 LifecycleStepCollection.Add(LifecycleStepType type, Object stepImplementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.Constructor">
            <summary>设置 LifecycleStepCollection.LifecycleStepCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.CopyToArrayInt32">
            <summary>设置 LifecycleStepCollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.CountGet">
            <summary>设置 LifecycleStepCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.GetCommissionSteps">
            <summary>设置 LifecycleStepCollection.GetCommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.GetDecommissionSteps">
            <summary>设置 LifecycleStepCollection.GetDecommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.GetEnumerator">
            <summary>设置 LifecycleStepCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.HasCommissionStepsGet">
            <summary>设置 LifecycleStepCollection.get_HasCommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.HasDecommissionStepsGet">
            <summary>设置 LifecycleStepCollection.get_HasDecommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.IsSynchronizedGet">
            <summary>设置 LifecycleStepCollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.SyncRootGet">
            <summary>设置 LifecycleStepCollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.AddLifecycleStepTypeObject">
            <summary>设置 LifecycleStepCollection.Add(LifecycleStepType type, Object stepImplementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.CopyToArrayInt32">
            <summary>设置 LifecycleStepCollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.CountGet">
            <summary>设置 LifecycleStepCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.GetCommissionSteps">
            <summary>设置 LifecycleStepCollection.GetCommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.GetDecommissionSteps">
            <summary>设置 LifecycleStepCollection.GetDecommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.GetEnumerator">
            <summary>设置 LifecycleStepCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.HasCommissionStepsGet">
            <summary>设置 LifecycleStepCollection.get_HasCommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.HasDecommissionStepsGet">
            <summary>设置 LifecycleStepCollection.get_HasDecommissionSteps() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.IsSynchronizedGet">
            <summary>设置 LifecycleStepCollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifecycleStepCollection.AllInstances.SyncRootGet">
            <summary>设置 LifecycleStepCollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifestyleAttribute">
            <summary>Castle.Core.LifestyleAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifestyleAttribute.#ctor(Castle.Core.LifestyleAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifestyleAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimLifestyleAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.ConstructorLifestyleType">
            <summary>设置 LifestyleAttribute.LifestyleAttribute(LifestyleType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.LifestyleGet">
            <summary>设置 LifestyleAttribute.get_Lifestyle() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.LifestyleSetLifestyleType">
            <summary>设置 LifestyleAttribute.set_Lifestyle(LifestyleType value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimLifestyleAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.AllInstances.LifestyleGet">
            <summary>设置 LifestyleAttribute.get_Lifestyle() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimLifestyleAttribute.AllInstances.LifestyleSetLifestyleType">
            <summary>设置 LifestyleAttribute.set_Lifestyle(LifestyleType value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModel">
            <summary>Castle.Core.MethodMetaModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.#ctor(Castle.Core.MethodMetaModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.ConfigNodeGet">
            <summary>设置 MethodMetaModel.get_ConfigNode() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.ConstructorIConfiguration">
            <summary>设置 MethodMetaModel.MethodMetaModel(IConfiguration configNode) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModel.AllInstances.ConfigNodeGet">
            <summary>设置 MethodMetaModel.get_ConfigNode() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModelCollection">
            <summary>Castle.Core.MethodMetaModelCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.#ctor(Castle.Core.MethodMetaModelCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimMethodMetaModelCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.AddMethodMetaModel">
            <summary>设置 MethodMetaModelCollection.Add(MethodMetaModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.Constructor">
            <summary>设置 MethodMetaModelCollection.MethodMetaModelCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.MethodInfo2ModelGet">
            <summary>设置 MethodMetaModelCollection.get_MethodInfo2Model() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimMethodMetaModelCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.AllInstances.AddMethodMetaModel">
            <summary>设置 MethodMetaModelCollection.Add(MethodMetaModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimMethodMetaModelCollection.AllInstances.MethodInfo2ModelGet">
            <summary>设置 MethodMetaModelCollection.get_MethodInfo2Model() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModel">
            <summary>Castle.Core.ParameterModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.#ctor(Castle.Core.ParameterModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ConfigValueGet">
            <summary>设置 ParameterModel.get_ConfigValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ConstructorStringIConfiguration">
            <summary>设置 ParameterModel.ParameterModel(String name, IConfiguration value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ConstructorStringString">
            <summary>设置 ParameterModel.ParameterModel(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.NameGet">
            <summary>设置 ParameterModel.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.ValueGet">
            <summary>设置 ParameterModel.get_Value() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.AllInstances.ConfigValueGet">
            <summary>设置 ParameterModel.get_ConfigValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.AllInstances.NameGet">
            <summary>设置 ParameterModel.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModel.AllInstances.ValueGet">
            <summary>设置 ParameterModel.get_Value() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModelCollection">
            <summary>Castle.Core.ParameterModelCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.#ctor(Castle.Core.ParameterModelCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimParameterModelCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AddObjectObject">
            <summary>设置 ParameterModelCollection.Add(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AddStringIConfiguration">
            <summary>设置 ParameterModelCollection.Add(String name, IConfiguration configNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AddStringString">
            <summary>设置 ParameterModelCollection.Add(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.Clear">
            <summary>设置 ParameterModelCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.Constructor">
            <summary>设置 ParameterModelCollection.ParameterModelCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.ContainsObject">
            <summary>设置 ParameterModelCollection.Contains(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.CopyToArrayInt32">
            <summary>设置 ParameterModelCollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.CountGet">
            <summary>设置 ParameterModelCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.GetEnumerator">
            <summary>设置 ParameterModelCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.IsFixedSizeGet">
            <summary>设置 ParameterModelCollection.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.IsReadOnlyGet">
            <summary>设置 ParameterModelCollection.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.IsSynchronizedGet">
            <summary>设置 ParameterModelCollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.ItemGetObject">
            <summary>设置 ParameterModelCollection.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.KeysGet">
            <summary>设置 ParameterModelCollection.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.RemoveObject">
            <summary>设置 ParameterModelCollection.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.SyncRootGet">
            <summary>设置 ParameterModelCollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.ValuesGet">
            <summary>设置 ParameterModelCollection.get_Values() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.AddObjectObject">
            <summary>设置 ParameterModelCollection.Add(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.AddStringIConfiguration">
            <summary>设置 ParameterModelCollection.Add(String name, IConfiguration configNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.AddStringString">
            <summary>设置 ParameterModelCollection.Add(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.Clear">
            <summary>设置 ParameterModelCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.ContainsObject">
            <summary>设置 ParameterModelCollection.Contains(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.CopyToArrayInt32">
            <summary>设置 ParameterModelCollection.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.CountGet">
            <summary>设置 ParameterModelCollection.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.GetEnumerator">
            <summary>设置 ParameterModelCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.IsFixedSizeGet">
            <summary>设置 ParameterModelCollection.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.IsReadOnlyGet">
            <summary>设置 ParameterModelCollection.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.IsSynchronizedGet">
            <summary>设置 ParameterModelCollection.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.ItemGetObject">
            <summary>设置 ParameterModelCollection.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.KeysGet">
            <summary>设置 ParameterModelCollection.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.RemoveObject">
            <summary>设置 ParameterModelCollection.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.SyncRootGet">
            <summary>设置 ParameterModelCollection.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimParameterModelCollection.AllInstances.ValuesGet">
            <summary>设置 ParameterModelCollection.get_Values() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPerThreadAttribute">
            <summary>Castle.Core.PerThreadAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.#ctor(Castle.Core.PerThreadAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPerThreadAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPerThreadAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPerThreadAttribute.Constructor">
            <summary>设置 PerThreadAttribute.PerThreadAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPerThreadAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPooledAttribute">
            <summary>Castle.Core.PooledAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.#ctor(Castle.Core.PooledAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPooledAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.Constructor">
            <summary>设置 PooledAttribute.PooledAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.ConstructorInt32Int32">
            <summary>设置 PooledAttribute.PooledAttribute(Int32 initialPoolSize, Int32 maxPoolSize) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.InitialPoolSizeGet">
            <summary>设置 PooledAttribute.get_InitialPoolSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.MaxPoolSizeGet">
            <summary>设置 PooledAttribute.get_MaxPoolSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.StaticConstructor">
            <summary>设置 PooledAttribute.PooledAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPooledAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.AllInstances.InitialPoolSizeGet">
            <summary>设置 PooledAttribute.get_InitialPoolSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPooledAttribute.AllInstances.MaxPoolSizeGet">
            <summary>设置 PooledAttribute.get_MaxPoolSize() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySet">
            <summary>Castle.Core.PropertySet 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.#ctor(Castle.Core.PropertySet)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySet.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.ConstructorPropertyInfoDependencyModel">
            <summary>设置 PropertySet.PropertySet(PropertyInfo propertyInfo, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.DependencyGet">
            <summary>设置 PropertySet.get_Dependency() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.PropertyGet">
            <summary>设置 PropertySet.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySet.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.AllInstances.DependencyGet">
            <summary>设置 PropertySet.get_Dependency() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySet.AllInstances.PropertyGet">
            <summary>设置 PropertySet.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySetCollection">
            <summary>Castle.Core.PropertySetCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.#ctor(Castle.Core.PropertySetCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimPropertySetCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AddPropertySet">
            <summary>设置 PropertySetCollection.Add(PropertySet property) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.Clear">
            <summary>设置 PropertySetCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.Constructor">
            <summary>设置 PropertySetCollection.PropertySetCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.FindByPropertyInfoPropertyInfo">
            <summary>设置 PropertySetCollection.FindByPropertyInfo(PropertyInfo info) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.AddPropertySet">
            <summary>设置 PropertySetCollection.Add(PropertySet property) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.Clear">
            <summary>设置 PropertySetCollection.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimPropertySetCollection.AllInstances.FindByPropertyInfoPropertyInfo">
            <summary>设置 PropertySetCollection.FindByPropertyInfo(PropertyInfo info) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimSingletonAttribute">
            <summary>Castle.Core.SingletonAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.#ctor(Castle.Core.SingletonAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimSingletonAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimSingletonAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimSingletonAttribute.Constructor">
            <summary>设置 SingletonAttribute.SingletonAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimSingletonAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimTransientAttribute">
            <summary>Castle.Core.TransientAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.#ctor(Castle.Core.TransientAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Fakes.ShimTransientAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimTransientAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.ShimTransientAttribute.Constructor">
            <summary>设置 TransientAttribute.TransientAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.ShimTransientAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubCastleComponentAttribute">
            <summary>Castle.Core.CastleComponentAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.#ctor(System.String,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.InitializeStub">
            <summary>初始化 type StubCastleComponentAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCastleComponentAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCastleComponentAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCastleComponentAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubConstructorCandidate">
            <summary>Castle.Core.ConstructorCandidate 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidate.#ctor(System.Reflection.ConstructorInfo,Castle.Core.DependencyModel[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidate.InitializeStub">
            <summary>初始化 type StubConstructorCandidate 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidate.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidate.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidate.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubConstructorCandidateCollection">
            <summary>Castle.Core.ConstructorCandidateCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidateCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubConstructorCandidateCollection.CountGet">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidateCollection.GetEnumerator">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubConstructorCandidateCollection.GetEnumerator01">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubConstructorCandidateCollection.InitializeStub">
            <summary>初始化 type StubConstructorCandidateCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidateCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidateCollection.Count">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidateCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubConstructorCandidateCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubCustomLifestyleAttribute">
            <summary>Castle.Core.CustomLifestyleAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.InitializeStub">
            <summary>初始化 type StubCustomLifestyleAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubCustomLifestyleAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubCustomLifestyleAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubCustomLifestyleAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubDependencyModel">
            <summary>Castle.Core.DependencyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.#ctor(Castle.Core.DependencyType,System.String,System.Type,System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.Equals(System.Object)">
            <summary>设置 DependencyModel.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModel.EqualsObject">
            <summary>设置 DependencyModel.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.GetHashCode">
            <summary>设置 DependencyModel.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModel.GetHashCode01">
            <summary>设置 DependencyModel.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.InitializeStub">
            <summary>初始化 type StubDependencyModel 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModel.ToString">
            <summary>设置 DependencyModel.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModel.ToString01">
            <summary>设置 DependencyModel.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubDependencyModelCollection">
            <summary>Castle.Core.DependencyModelCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModelCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModelCollection.#ctor(Castle.Core.DependencyModelCollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModelCollection.#ctor(Castle.Core.DependencyModel[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModelCollection.CountGet">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModelCollection.GetEnumerator">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubDependencyModelCollection.GetEnumerator01">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubDependencyModelCollection.InitializeStub">
            <summary>初始化 type StubDependencyModelCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModelCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModelCollection.Count">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModelCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubDependencyModelCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubGraphNode">
            <summary>Castle.Core.GraphNode 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubGraphNode.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubGraphNode.InitializeStub">
            <summary>初始化 type StubGraphNode 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubGraphNode.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubGraphNode.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubGraphNode.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIInitializable">
            <summary>Castle.Core.IInitializable 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIInitializable.#ctor">
            <summary>初始化 type StubIInitializable 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIInitializable.cc::Castle#Core#IInitializable#Initialize">
            <summary>设置 IInitializable.Initialize() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIInitializable.Initialize">
            <summary>设置 IInitializable.Initialize() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIRecyclable">
            <summary>Castle.Core.IRecyclable 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIRecyclable.#ctor">
            <summary>初始化 type StubIRecyclable 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIRecyclable.cc::Castle#Core#IRecyclable#Recycle">
            <summary>设置 IRecyclable.Recycle() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIRecyclable.Recycle">
            <summary>设置 IRecyclable.Recycle() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIServiceEnabledComponent">
            <summary>Castle.Core.IServiceEnabledComponent 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIServiceEnabledComponent.#ctor">
            <summary>初始化 type StubIServiceEnabledComponent 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIServiceEnabledComponent.cc::Castle#Core#IServiceEnabledComponent#Service(System.IServiceProvider)">
            <summary>设置 IServiceEnabledComponent.Service(IServiceProvider provider) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIServiceEnabledComponent.ServiceIServiceProvider">
            <summary>设置 IServiceEnabledComponent.Service(IServiceProvider provider) 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIStartable">
            <summary>Castle.Core.IStartable 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIStartable.#ctor">
            <summary>初始化 type StubIStartable 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIStartable.cc::Castle#Core#IStartable#Start">
            <summary>设置 IStartable.Start() 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIStartable.cc::Castle#Core#IStartable#Stop">
            <summary>设置 IStartable.Stop() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIStartable.Start">
            <summary>设置 IStartable.Start() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIStartable.Stop">
            <summary>设置 IStartable.Stop() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubIVertex">
            <summary>Castle.Core.IVertex 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubIVertex.#ctor">
            <summary>初始化 type StubIVertex 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubIVertex.AdjacenciesGet">
            <summary>设置 IVertex.get_Adjacencies() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubIVertex.cc::Castle#Core#IVertex#Adjacencies">
            <summary>设置 IVertex.get_Adjacencies() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubInterceptorAttribute">
            <summary>Castle.Core.InterceptorAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.InitializeStub">
            <summary>初始化 type StubInterceptorAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubInterceptorAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubInterceptorReference">
            <summary>Castle.Core.InterceptorReference 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReference.InitializeStub">
            <summary>初始化 type StubInterceptorReference 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubInterceptorReferenceCollection">
            <summary>Castle.Core.InterceptorReferenceCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReferenceCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubInterceptorReferenceCollection.InitializeStub">
            <summary>初始化 type StubInterceptorReferenceCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReferenceCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReferenceCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubInterceptorReferenceCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubLifecycleStepCollection">
            <summary>Castle.Core.LifecycleStepCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifecycleStepCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifecycleStepCollection.InitializeStub">
            <summary>初始化 type StubLifecycleStepCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifecycleStepCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifecycleStepCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifecycleStepCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubLifestyleAttribute">
            <summary>Castle.Core.LifestyleAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.#ctor(Castle.Core.LifestyleType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.InitializeStub">
            <summary>初始化 type StubLifestyleAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubLifestyleAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubLifestyleAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubLifestyleAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubMethodMetaModel">
            <summary>Castle.Core.MethodMetaModel 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModel.#ctor(Castle.Core.Configuration.IConfiguration)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModel.InitializeStub">
            <summary>初始化 type StubMethodMetaModel 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubMethodMetaModelCollection">
            <summary>Castle.Core.MethodMetaModelCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubMethodMetaModelCollection.CountGet">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.GetEnumerator">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubMethodMetaModelCollection.GetEnumerator01">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubMethodMetaModelCollection.InitializeStub">
            <summary>初始化 type StubMethodMetaModelCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModelCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModelCollection.Count">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModelCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubMethodMetaModelCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubParameterModel">
            <summary>Castle.Core.ParameterModel 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModel.#ctor(System.String,Castle.Core.Configuration.IConfiguration)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModel.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModel.InitializeStub">
            <summary>初始化 type StubParameterModel 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubParameterModelCollection">
            <summary>Castle.Core.ParameterModelCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModelCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubParameterModelCollection.InitializeStub">
            <summary>初始化 type StubParameterModelCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModelCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModelCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubParameterModelCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubPerThreadAttribute">
            <summary>Castle.Core.PerThreadAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPerThreadAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPerThreadAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPerThreadAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPerThreadAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPerThreadAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPerThreadAttribute.InitializeStub">
            <summary>初始化 type StubPerThreadAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPerThreadAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPerThreadAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPerThreadAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPerThreadAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPerThreadAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPerThreadAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPerThreadAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPerThreadAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPerThreadAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubPooledAttribute">
            <summary>Castle.Core.PooledAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPooledAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPooledAttribute.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPooledAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPooledAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPooledAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPooledAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPooledAttribute.InitializeStub">
            <summary>初始化 type StubPooledAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPooledAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPooledAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPooledAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPooledAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPooledAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPooledAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPooledAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPooledAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPooledAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubPropertySet">
            <summary>Castle.Core.PropertySet 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySet.#ctor(System.Reflection.PropertyInfo,Castle.Core.DependencyModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySet.InitializeStub">
            <summary>初始化 type StubPropertySet 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySet.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySet.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySet.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubPropertySetCollection">
            <summary>Castle.Core.PropertySetCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySetCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPropertySetCollection.CountGet">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySetCollection.GetEnumerator">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubPropertySetCollection.GetEnumerator01">
            <summary>设置 ReadOnlyCollectionBase.GetEnumerator() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubPropertySetCollection.InitializeStub">
            <summary>初始化 type StubPropertySetCollection 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySetCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySetCollection.Count">
            <summary>设置 ReadOnlyCollectionBase.get_Count() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySetCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubPropertySetCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubSingletonAttribute">
            <summary>Castle.Core.SingletonAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubSingletonAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubSingletonAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubSingletonAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubSingletonAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubSingletonAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubSingletonAttribute.InitializeStub">
            <summary>初始化 type StubSingletonAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubSingletonAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubSingletonAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubSingletonAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubSingletonAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubSingletonAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubSingletonAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubSingletonAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubSingletonAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubSingletonAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Fakes.StubTransientAttribute">
            <summary>Castle.Core.TransientAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubTransientAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubTransientAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubTransientAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubTransientAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubTransientAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubTransientAttribute.InitializeStub">
            <summary>初始化 type StubTransientAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubTransientAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubTransientAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Fakes.StubTransientAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubTransientAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Fakes.StubTransientAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubTransientAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubTransientAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubTransientAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Fakes.StubTransientAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor">
            <summary>Castle.Core.Interceptor.StandardInterceptor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.#ctor(Castle.Core.Interceptor.StandardInterceptor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.Bind(Castle.Core.Interceptor.IInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.Constructor">
            <summary>设置 StandardInterceptor.StandardInterceptor() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.InterceptIInvocation">
            <summary>设置 StandardInterceptor.Intercept(IInvocation invocation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.PostProceedIInvocation">
            <summary>设置 StandardInterceptor.PostProceed(IInvocation invocation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.PreProceedIInvocation">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.AllInstances.InterceptIInvocation">
            <summary>设置 StandardInterceptor.Intercept(IInvocation invocation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.AllInstances.PostProceedIInvocation">
            <summary>设置 StandardInterceptor.PostProceed(IInvocation invocation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.ShimStandardInterceptor.AllInstances.PreProceedIInvocation">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.StubIInterceptor">
            <summary>Castle.Core.Interceptor.IInterceptor 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIInterceptor.#ctor">
            <summary>初始化 type StubIInterceptor 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIInterceptor.cc::Castle#Core#Interceptor#IInterceptor#Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>设置 IInterceptor.Intercept(IInvocation invocation) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInterceptor.InterceptIInvocation">
            <summary>设置 IInterceptor.Intercept(IInvocation invocation) 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.StubIInvocation">
            <summary>Castle.Core.Interceptor.IInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIInvocation.#ctor">
            <summary>初始化 type StubIInvocation 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.ArgumentsGet">
            <summary>设置 IInvocation.get_Arguments() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIInvocation.AttachBackingFieldToReturnValue">
            <summary>附加委托以将 StubIInvocation.ReturnValue 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#GetArgumentValue(System.Int32)">
            <summary>设置 IInvocation.GetArgumentValue(Int32 index) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#Proceed">
            <summary>设置 IInvocation.Proceed() 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#SetArgumentValue(System.Int32,System.Object)">
            <summary>设置 IInvocation.SetArgumentValue(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.GetArgumentValueInt32">
            <summary>设置 IInvocation.GetArgumentValue(Int32 index) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.MethodGet">
            <summary>设置 IInvocation.get_Method() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.MethodInvocationTargetGet">
            <summary>设置 IInvocation.get_MethodInvocationTarget() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.Proceed">
            <summary>设置 IInvocation.Proceed() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.ReturnValueGet">
            <summary>设置 IInvocation.get_ReturnValue() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.ReturnValueSetObject">
            <summary>设置 IInvocation.set_ReturnValue(Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.SetArgumentValueInt32Object">
            <summary>设置 IInvocation.SetArgumentValue(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIInvocation.TargetTypeGet">
            <summary>设置 IInvocation.get_TargetType() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#Arguments">
            <summary>设置 IInvocation.get_Arguments() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#Method">
            <summary>设置 IInvocation.get_Method() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#MethodInvocationTarget">
            <summary>设置 IInvocation.get_MethodInvocationTarget() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#ReturnValue">
            <summary>设置 IInvocation.get_ReturnValue() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIInvocation.cc::Castle#Core#Interceptor#IInvocation#TargetType">
            <summary>设置 IInvocation.get_TargetType() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.StubIMethodInterceptor">
            <summary>Castle.Core.Interceptor.IMethodInterceptor 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIMethodInterceptor.#ctor">
            <summary>初始化 type StubIMethodInterceptor 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIMethodInterceptor.cc::Castle#Core#Interceptor#IMethodInterceptor#Intercept(Castle.Core.Interceptor.IMethodInvocation,System.Object[])">
            <summary>设置 IMethodInterceptor.Intercept(IMethodInvocation invocation, Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIMethodInterceptor.InterceptIMethodInvocationObjectArray">
            <summary>设置 IMethodInterceptor.Intercept(IMethodInvocation invocation, Object[] args) 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.StubIMethodInvocation">
            <summary>Castle.Core.Interceptor.IMethodInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.#ctor">
            <summary>初始化 type StubIMethodInvocation 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.AttachBackingFieldToInvocationTarget">
            <summary>附加委托以将 StubIMethodInvocation.InvocationTarget 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.cc::Castle#Core#Interceptor#IMethodInvocation#Proceed(System.Object[])">
            <summary>设置 IMethodInvocation.Proceed(Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.InvocationTargetGet">
            <summary>设置 IMethodInvocation.get_InvocationTarget() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.InvocationTargetSetObject">
            <summary>设置 IMethodInvocation.set_InvocationTarget(Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.MethodGet">
            <summary>设置 IMethodInvocation.get_Method() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.MethodInvocationTargetGet">
            <summary>设置 IMethodInvocation.get_MethodInvocationTarget() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.ProceedObjectArray">
            <summary>设置 IMethodInvocation.Proceed(Object[] args) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.ProxyGet">
            <summary>设置 IMethodInvocation.get_Proxy() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.cc::Castle#Core#Interceptor#IMethodInvocation#InvocationTarget">
            <summary>设置 IMethodInvocation.get_InvocationTarget() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.cc::Castle#Core#Interceptor#IMethodInvocation#Method">
            <summary>设置 IMethodInvocation.get_Method() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.cc::Castle#Core#Interceptor#IMethodInvocation#MethodInvocationTarget">
            <summary>设置 IMethodInvocation.get_MethodInvocationTarget() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubIMethodInvocation.cc::Castle#Core#Interceptor#IMethodInvocation#Proxy">
            <summary>设置 IMethodInvocation.get_Proxy() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware">
            <summary>Castle.Core.Interceptor.IOnBehalfAware 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware.#ctor">
            <summary>初始化 type StubIOnBehalfAware 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware.cc::Castle#Core#Interceptor#IOnBehalfAware#SetInterceptedComponentModel(Castle.Core.ComponentModel)">
            <summary>设置 IOnBehalfAware.SetInterceptedComponentModel(ComponentModel target) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubIOnBehalfAware.SetInterceptedComponentModelComponentModel">
            <summary>设置 IOnBehalfAware.SetInterceptedComponentModel(ComponentModel target) 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Interceptor.Fakes.StubStandardInterceptor">
            <summary>Castle.Core.Interceptor.StandardInterceptor 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.InitializeStub">
            <summary>初始化 type StubStandardInterceptor 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.PostProceed(Castle.Core.Interceptor.IInvocation)">
            <summary>设置 StandardInterceptor.PostProceed(IInvocation invocation) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.PostProceedIInvocation">
            <summary>设置 StandardInterceptor.PostProceed(IInvocation invocation) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.PreProceed(Castle.Core.Interceptor.IInvocation)">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.PreProceedIInvocation">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Interceptor.Fakes.StubStandardInterceptor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimLinkedList">
            <summary>Castle.Core.Internal.LinkedList 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLinkedList.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLinkedList.#ctor(Castle.Core.Internal.LinkedList)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLinkedList.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLinkedList.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLinkedList.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLinkedList.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimLinkedList.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AddFirstObject">
            <summary>设置 LinkedList.AddFirst(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AddLastObject">
            <summary>设置 LinkedList.AddLast(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AddObject">
            <summary>设置 LinkedList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.Clear">
            <summary>设置 LinkedList.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.Constructor">
            <summary>设置 LinkedList.LinkedList() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.ContainsObject">
            <summary>设置 LinkedList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.CopyToArrayInt32">
            <summary>设置 LinkedList.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.CountGet">
            <summary>设置 LinkedList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.GetEnumerator">
            <summary>设置 LinkedList.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.HeadGet">
            <summary>设置 LinkedList.get_Head() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.IndexOfObject">
            <summary>设置 LinkedList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.InsertInt32Object">
            <summary>设置 LinkedList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.IsFixedSizeGet">
            <summary>设置 LinkedList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.IsReadOnlyGet">
            <summary>设置 LinkedList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.IsSynchronizedGet">
            <summary>设置 LinkedList.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.ItemGetInt32">
            <summary>设置 LinkedList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.ItemSetInt32Object">
            <summary>设置 LinkedList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.RemoveAtInt32">
            <summary>设置 LinkedList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.RemoveObject">
            <summary>设置 LinkedList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.ReplaceObjectObject">
            <summary>设置 LinkedList.Replace(Object old, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.SyncRootGet">
            <summary>设置 LinkedList.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.ToArrayType">
            <summary>设置 LinkedList.ToArray(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.ValidateIndexInt32">
            <summary>设置 LinkedList.ValidateIndex(Int32 index) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.AddFirstObject">
            <summary>设置 LinkedList.AddFirst(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.AddLastObject">
            <summary>设置 LinkedList.AddLast(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.AddObject">
            <summary>设置 LinkedList.Add(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.Clear">
            <summary>设置 LinkedList.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.ContainsObject">
            <summary>设置 LinkedList.Contains(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.CopyToArrayInt32">
            <summary>设置 LinkedList.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.CountGet">
            <summary>设置 LinkedList.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.GetEnumerator">
            <summary>设置 LinkedList.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.HeadGet">
            <summary>设置 LinkedList.get_Head() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.IndexOfObject">
            <summary>设置 LinkedList.IndexOf(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.InsertInt32Object">
            <summary>设置 LinkedList.Insert(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.IsFixedSizeGet">
            <summary>设置 LinkedList.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.IsReadOnlyGet">
            <summary>设置 LinkedList.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.IsSynchronizedGet">
            <summary>设置 LinkedList.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.ItemGetInt32">
            <summary>设置 LinkedList.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.ItemSetInt32Object">
            <summary>设置 LinkedList.set_Item(Int32 index, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.RemoveAtInt32">
            <summary>设置 LinkedList.RemoveAt(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.RemoveObject">
            <summary>设置 LinkedList.Remove(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.ReplaceObjectObject">
            <summary>设置 LinkedList.Replace(Object old, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.SyncRootGet">
            <summary>设置 LinkedList.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.ToArrayType">
            <summary>设置 LinkedList.ToArray(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimLinkedList.AllInstances.ValidateIndexInt32">
            <summary>设置 LinkedList.ValidateIndex(Int32 index) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo">
            <summary>Castle.Core.Internal.TopologicalSortAlgo 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.#ctor(Castle.Core.Internal.TopologicalSortAlgo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.Constructor">
            <summary>设置 TopologicalSortAlgo.TopologicalSortAlgo() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.SortIVertexArray">
            <summary>设置 TopologicalSortAlgo.Sort(IVertex[] graphNodes) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.ShimTopologicalSortAlgo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubLinkedList">
            <summary>Castle.Core.Internal.LinkedList 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.Add(System.Object)">
            <summary>设置 LinkedList.Add(Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.AddFirst(System.Object)">
            <summary>设置 LinkedList.AddFirst(Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubLinkedList.AddFirstObject">
            <summary>设置 LinkedList.AddFirst(Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.AddLast(System.Object)">
            <summary>设置 LinkedList.AddLast(Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubLinkedList.AddLastObject">
            <summary>设置 LinkedList.AddLast(Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubLinkedList.AddObject">
            <summary>设置 LinkedList.Add(Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.InitializeStub">
            <summary>初始化 type StubLinkedList 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.Insert(System.Int32,System.Object)">
            <summary>设置 LinkedList.Insert(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubLinkedList.InsertInt32Object">
            <summary>设置 LinkedList.Insert(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.Remove(System.Object)">
            <summary>设置 LinkedList.Remove(Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.RemoveAt(System.Int32)">
            <summary>设置 LinkedList.RemoveAt(Int32 index) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubLinkedList.RemoveAtInt32">
            <summary>设置 LinkedList.RemoveAt(Int32 index) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubLinkedList.RemoveObject">
            <summary>设置 LinkedList.Remove(Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubLinkedList.Replace(System.Object,System.Object)">
            <summary>设置 LinkedList.Replace(Object old, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Internal.Fakes.StubLinkedList.ReplaceObjectObject">
            <summary>设置 LinkedList.Replace(Object old, Object value) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubLinkedList.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubLinkedList.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubLinkedList.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo">
            <summary>Castle.Core.Internal.TopologicalSortAlgo 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.InitializeStub">
            <summary>初始化 type StubTopologicalSortAlgo 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Internal.Fakes.StubTopologicalSortAlgo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory">
            <summary>Castle.Core.Logging.AbstractLoggerFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.#ctor(Castle.Core.Logging.AbstractLoggerFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.Bind(Castle.Core.Logging.ILoggerFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.Constructor">
            <summary>设置 AbstractLoggerFactory.AbstractLoggerFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.CreateType">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.CreateTypeLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.GetConfigFileString">
            <summary>设置 AbstractLoggerFactory.GetConfigFile(String filename) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.AllInstances.CreateType">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.AllInstances.CreateTypeLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimAbstractLoggerFactory.AllInstances.GetConfigFileString">
            <summary>设置 AbstractLoggerFactory.GetConfigFile(String filename) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimConsoleFactory">
            <summary>Castle.Core.Logging.ConsoleFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleFactory.#ctor(Castle.Core.Logging.ConsoleFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleFactory.Bind(Castle.Core.Logging.ILoggerFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.Constructor">
            <summary>设置 ConsoleFactory.ConsoleFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.CreateString">
            <summary>设置 ConsoleFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.CreateStringLoggerLevel">
            <summary>设置 ConsoleFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.CreateType">
            <summary>设置 ConsoleFactory.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.CreateTypeLoggerLevel">
            <summary>设置 ConsoleFactory.Create(Type type, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimConsoleFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.AllInstances.CreateString">
            <summary>设置 ConsoleFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.AllInstances.CreateStringLoggerLevel">
            <summary>设置 ConsoleFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.AllInstances.CreateType">
            <summary>设置 ConsoleFactory.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleFactory.AllInstances.CreateTypeLoggerLevel">
            <summary>设置 ConsoleFactory.Create(Type type, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimConsoleLogger">
            <summary>Castle.Core.Logging.ConsoleLogger 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleLogger.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleLogger.#ctor(Castle.Core.Logging.ConsoleLogger)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleLogger.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleLogger.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimConsoleLogger.Bind(Castle.Core.Logging.ILogger)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.Constructor">
            <summary>设置 ConsoleLogger.ConsoleLogger() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.ConstructorLoggerLevel">
            <summary>设置 ConsoleLogger.ConsoleLogger(LoggerLevel logLevel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.ConstructorString">
            <summary>设置 ConsoleLogger.ConsoleLogger(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.ConstructorStringLoggerLevel">
            <summary>设置 ConsoleLogger.ConsoleLogger(String name, LoggerLevel logLevel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.CreateChildLoggerString">
            <summary>设置 ConsoleLogger.CreateChildLogger(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.LogLoggerLevelStringStringException">
            <summary>设置 ConsoleLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimConsoleLogger.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.AllInstances.CreateChildLoggerString">
            <summary>设置 ConsoleLogger.CreateChildLogger(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimConsoleLogger.AllInstances.LogLoggerLevelStringStringException">
            <summary>设置 ConsoleLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger">
            <summary>Castle.Core.Logging.DiagnosticsLogger 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.#ctor(Castle.Core.Logging.DiagnosticsLogger)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.Bind(Castle.Core.Logging.ILogger)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.Close">
            <summary>设置 DiagnosticsLogger.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.CloseBoolean">
            <summary>设置 DiagnosticsLogger.Close(Boolean supressFinalize) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.ConstructorString">
            <summary>设置 DiagnosticsLogger.DiagnosticsLogger(String logName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.ConstructorStringString">
            <summary>设置 DiagnosticsLogger.DiagnosticsLogger(String logName, String source) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.ConstructorStringStringString">
            <summary>设置 DiagnosticsLogger.DiagnosticsLogger(String logName, String machineName, String source) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.CreateChildLoggerString">
            <summary>设置 DiagnosticsLogger.CreateChildLogger(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.Dispose">
            <summary>设置 DiagnosticsLogger.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.LogLoggerLevelStringStringException">
            <summary>设置 DiagnosticsLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.TranslateLevelLoggerLevel">
            <summary>设置 DiagnosticsLogger.TranslateLevel(LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.AllInstances.Close">
            <summary>设置 DiagnosticsLogger.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.AllInstances.CloseBoolean">
            <summary>设置 DiagnosticsLogger.Close(Boolean supressFinalize) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.AllInstances.CreateChildLoggerString">
            <summary>设置 DiagnosticsLogger.CreateChildLogger(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.AllInstances.Dispose">
            <summary>设置 DiagnosticsLogger.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.AllInstances.LogLoggerLevelStringStringException">
            <summary>设置 DiagnosticsLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLogger.AllInstances.TranslateLevelLoggerLevel">
            <summary>设置 DiagnosticsLogger.TranslateLevel(LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory">
            <summary>Castle.Core.Logging.DiagnosticsLoggerFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.#ctor(Castle.Core.Logging.DiagnosticsLoggerFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.Bind(Castle.Core.Logging.ILoggerFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.Constructor">
            <summary>设置 DiagnosticsLoggerFactory.DiagnosticsLoggerFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.CreateString">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.CreateStringLoggerLevel">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.StaticConstructor">
            <summary>设置 DiagnosticsLoggerFactory.DiagnosticsLoggerFactory() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.AllInstances.CreateString">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimDiagnosticsLoggerFactory.AllInstances.CreateStringLoggerLevel">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger">
            <summary>Castle.Core.Logging.LevelFilteredLogger 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.#ctor(Castle.Core.Logging.LevelFilteredLogger)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.Bind(Castle.Core.Logging.ILogger)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.ChangeNameString">
            <summary>设置 LevelFilteredLogger.ChangeName(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.Constructor">
            <summary>设置 LevelFilteredLogger.LevelFilteredLogger() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.ConstructorLoggerLevel">
            <summary>设置 LevelFilteredLogger.LevelFilteredLogger(LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.ConstructorString">
            <summary>设置 LevelFilteredLogger.LevelFilteredLogger(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.ConstructorStringLoggerLevel">
            <summary>设置 LevelFilteredLogger.LevelFilteredLogger(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.DebugString">
            <summary>设置 LevelFilteredLogger.Debug(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.DebugStringException">
            <summary>设置 LevelFilteredLogger.Debug(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.DebugStringObjectArray">
            <summary>设置 LevelFilteredLogger.Debug(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.ErrorString">
            <summary>设置 LevelFilteredLogger.Error(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.ErrorStringException">
            <summary>设置 LevelFilteredLogger.Error(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.ErrorStringObjectArray">
            <summary>设置 LevelFilteredLogger.Error(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.FatalErrorString">
            <summary>设置 LevelFilteredLogger.FatalError(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.FatalErrorStringException">
            <summary>设置 LevelFilteredLogger.FatalError(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.FatalErrorStringObjectArray">
            <summary>设置 LevelFilteredLogger.FatalError(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.InfoString">
            <summary>设置 LevelFilteredLogger.Info(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.InfoStringException">
            <summary>设置 LevelFilteredLogger.Info(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.InfoStringObjectArray">
            <summary>设置 LevelFilteredLogger.Info(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.InitializeLifetimeService">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.IsDebugEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsDebugEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.IsErrorEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.IsFatalErrorEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsFatalErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.IsInfoEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsInfoEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.IsWarnEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsWarnEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.LevelGet">
            <summary>设置 LevelFilteredLogger.get_Level() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.LevelSetLoggerLevel">
            <summary>设置 LevelFilteredLogger.set_Level(LoggerLevel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.LogLoggerLevelStringException">
            <summary>设置 LevelFilteredLogger.Log(LoggerLevel level, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.NameGet">
            <summary>设置 LevelFilteredLogger.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.WarnString">
            <summary>设置 LevelFilteredLogger.Warn(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.WarnStringException">
            <summary>设置 LevelFilteredLogger.Warn(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.WarnStringObjectArray">
            <summary>设置 LevelFilteredLogger.Warn(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.ChangeNameString">
            <summary>设置 LevelFilteredLogger.ChangeName(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.DebugString">
            <summary>设置 LevelFilteredLogger.Debug(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.DebugStringException">
            <summary>设置 LevelFilteredLogger.Debug(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.DebugStringObjectArray">
            <summary>设置 LevelFilteredLogger.Debug(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.ErrorString">
            <summary>设置 LevelFilteredLogger.Error(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.ErrorStringException">
            <summary>设置 LevelFilteredLogger.Error(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.ErrorStringObjectArray">
            <summary>设置 LevelFilteredLogger.Error(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.FatalErrorString">
            <summary>设置 LevelFilteredLogger.FatalError(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.FatalErrorStringException">
            <summary>设置 LevelFilteredLogger.FatalError(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.FatalErrorStringObjectArray">
            <summary>设置 LevelFilteredLogger.FatalError(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.InfoString">
            <summary>设置 LevelFilteredLogger.Info(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.InfoStringException">
            <summary>设置 LevelFilteredLogger.Info(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.InfoStringObjectArray">
            <summary>设置 LevelFilteredLogger.Info(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.InitializeLifetimeService">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.IsDebugEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsDebugEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.IsErrorEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.IsFatalErrorEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsFatalErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.IsInfoEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsInfoEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.IsWarnEnabledGet">
            <summary>设置 LevelFilteredLogger.get_IsWarnEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.LevelGet">
            <summary>设置 LevelFilteredLogger.get_Level() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.LevelSetLoggerLevel">
            <summary>设置 LevelFilteredLogger.set_Level(LoggerLevel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.LogLoggerLevelStringException">
            <summary>设置 LevelFilteredLogger.Log(LoggerLevel level, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.NameGet">
            <summary>设置 LevelFilteredLogger.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.WarnString">
            <summary>设置 LevelFilteredLogger.Warn(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.WarnStringException">
            <summary>设置 LevelFilteredLogger.Warn(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLevelFilteredLogger.AllInstances.WarnStringObjectArray">
            <summary>设置 LevelFilteredLogger.Warn(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimLoggerException">
            <summary>Castle.Core.Logging.LoggerException 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLoggerException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLoggerException.#ctor(Castle.Core.Logging.LoggerException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLoggerException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLoggerException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimLoggerException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLoggerException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLoggerException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 LoggerException.LoggerException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLoggerException.ConstructorString">
            <summary>设置 LoggerException.LoggerException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimLoggerException.ConstructorStringException">
            <summary>设置 LoggerException.LoggerException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimLoggerException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimNullLogFactory">
            <summary>Castle.Core.Logging.NullLogFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogFactory.#ctor(Castle.Core.Logging.NullLogFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogFactory.Bind(Castle.Core.Logging.ILoggerFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogFactory.Constructor">
            <summary>设置 NullLogFactory.NullLogFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogFactory.CreateString">
            <summary>设置 NullLogFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogFactory.CreateStringLoggerLevel">
            <summary>设置 NullLogFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimNullLogFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogFactory.AllInstances.CreateString">
            <summary>设置 NullLogFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogFactory.AllInstances.CreateStringLoggerLevel">
            <summary>设置 NullLogFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimNullLogger">
            <summary>Castle.Core.Logging.NullLogger 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogger.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogger.#ctor(Castle.Core.Logging.NullLogger)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogger.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogger.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimNullLogger.Bind(Castle.Core.Logging.ILogger)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.Constructor">
            <summary>设置 NullLogger.NullLogger() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.CreateChildLoggerString">
            <summary>设置 NullLogger.CreateChildLogger(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.DebugString">
            <summary>设置 NullLogger.Debug(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.DebugStringException">
            <summary>设置 NullLogger.Debug(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.DebugStringObjectArray">
            <summary>设置 NullLogger.Debug(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.ErrorString">
            <summary>设置 NullLogger.Error(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.ErrorStringException">
            <summary>设置 NullLogger.Error(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.ErrorStringObjectArray">
            <summary>设置 NullLogger.Error(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.FatalErrorString">
            <summary>设置 NullLogger.FatalError(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.FatalErrorStringException">
            <summary>设置 NullLogger.FatalError(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.FatalErrorStringObjectArray">
            <summary>设置 NullLogger.FatalError(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.InfoString">
            <summary>设置 NullLogger.Info(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.InfoStringException">
            <summary>设置 NullLogger.Info(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.InfoStringObjectArray">
            <summary>设置 NullLogger.Info(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.IsDebugEnabledGet">
            <summary>设置 NullLogger.get_IsDebugEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.IsErrorEnabledGet">
            <summary>设置 NullLogger.get_IsErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.IsFatalErrorEnabledGet">
            <summary>设置 NullLogger.get_IsFatalErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.IsInfoEnabledGet">
            <summary>设置 NullLogger.get_IsInfoEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.IsWarnEnabledGet">
            <summary>设置 NullLogger.get_IsWarnEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.StaticConstructor">
            <summary>设置 NullLogger.NullLogger() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.WarnString">
            <summary>设置 NullLogger.Warn(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.WarnStringException">
            <summary>设置 NullLogger.Warn(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.WarnStringObjectArray">
            <summary>设置 NullLogger.Warn(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.CreateChildLoggerString">
            <summary>设置 NullLogger.CreateChildLogger(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.DebugString">
            <summary>设置 NullLogger.Debug(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.DebugStringException">
            <summary>设置 NullLogger.Debug(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.DebugStringObjectArray">
            <summary>设置 NullLogger.Debug(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.ErrorString">
            <summary>设置 NullLogger.Error(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.ErrorStringException">
            <summary>设置 NullLogger.Error(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.ErrorStringObjectArray">
            <summary>设置 NullLogger.Error(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.FatalErrorString">
            <summary>设置 NullLogger.FatalError(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.FatalErrorStringException">
            <summary>设置 NullLogger.FatalError(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.FatalErrorStringObjectArray">
            <summary>设置 NullLogger.FatalError(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.InfoString">
            <summary>设置 NullLogger.Info(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.InfoStringException">
            <summary>设置 NullLogger.Info(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.InfoStringObjectArray">
            <summary>设置 NullLogger.Info(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.IsDebugEnabledGet">
            <summary>设置 NullLogger.get_IsDebugEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.IsErrorEnabledGet">
            <summary>设置 NullLogger.get_IsErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.IsFatalErrorEnabledGet">
            <summary>设置 NullLogger.get_IsFatalErrorEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.IsInfoEnabledGet">
            <summary>设置 NullLogger.get_IsInfoEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.IsWarnEnabledGet">
            <summary>设置 NullLogger.get_IsWarnEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.WarnString">
            <summary>设置 NullLogger.Warn(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.WarnStringException">
            <summary>设置 NullLogger.Warn(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimNullLogger.AllInstances.WarnStringObjectArray">
            <summary>设置 NullLogger.Warn(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimStreamLogger">
            <summary>Castle.Core.Logging.StreamLogger 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLogger.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLogger.#ctor(Castle.Core.Logging.StreamLogger)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLogger.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLogger.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLogger.Bind(Castle.Core.Logging.ILogger)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLogger.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.Close">
            <summary>设置 StreamLogger.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.CloseBoolean">
            <summary>设置 StreamLogger.Close(Boolean supressFinalize) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.ConstructorStringStream">
            <summary>设置 StreamLogger.StreamLogger(String name, Stream stream) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.ConstructorStringStreamEncoding">
            <summary>设置 StreamLogger.StreamLogger(String name, Stream stream, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.ConstructorStringStreamEncodingInt32">
            <summary>设置 StreamLogger.StreamLogger(String name, Stream stream, Encoding encoding, Int32 bufferSize) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.ConstructorStringStreamWriter">
            <summary>设置 StreamLogger.StreamLogger(String name, StreamWriter writer) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.CreateChildLoggerString">
            <summary>设置 StreamLogger.CreateChildLogger(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.Dispose">
            <summary>设置 StreamLogger.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.LogLoggerLevelStringStringException">
            <summary>设置 StreamLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimStreamLogger.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.AllInstances.Close">
            <summary>设置 StreamLogger.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.AllInstances.CloseBoolean">
            <summary>设置 StreamLogger.Close(Boolean supressFinalize) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.AllInstances.CreateChildLoggerString">
            <summary>设置 StreamLogger.CreateChildLogger(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.AllInstances.Dispose">
            <summary>设置 StreamLogger.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLogger.AllInstances.LogLoggerLevelStringStringException">
            <summary>设置 StreamLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory">
            <summary>Castle.Core.Logging.StreamLoggerFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.#ctor(Castle.Core.Logging.StreamLoggerFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.Bind(Castle.Core.Logging.ILoggerFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.Constructor">
            <summary>设置 StreamLoggerFactory.StreamLoggerFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.CreateString">
            <summary>设置 StreamLoggerFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.CreateStringLoggerLevel">
            <summary>设置 StreamLoggerFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.AllInstances.CreateString">
            <summary>设置 StreamLoggerFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimStreamLoggerFactory.AllInstances.CreateStringLoggerLevel">
            <summary>设置 StreamLoggerFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimWebLogger">
            <summary>Castle.Core.Logging.WebLogger 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLogger.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLogger.#ctor(Castle.Core.Logging.WebLogger)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLogger.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLogger.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLogger.Bind(Castle.Core.Logging.ILogger)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.Constructor">
            <summary>设置 WebLogger.WebLogger() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.ConstructorLoggerLevel">
            <summary>设置 WebLogger.WebLogger(LoggerLevel logLevel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.ConstructorString">
            <summary>设置 WebLogger.WebLogger(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.ConstructorStringLoggerLevel">
            <summary>设置 WebLogger.WebLogger(String name, LoggerLevel logLevel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.CreateChildLoggerString">
            <summary>设置 WebLogger.CreateChildLogger(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.LogLoggerLevelStringStringException">
            <summary>设置 WebLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.StaticConstructor">
            <summary>设置 WebLogger.WebLogger() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimWebLogger.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.AllInstances.CreateChildLoggerString">
            <summary>设置 WebLogger.CreateChildLogger(String newName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLogger.AllInstances.LogLoggerLevelStringStringException">
            <summary>设置 WebLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimWebLoggerFactory">
            <summary>Castle.Core.Logging.WebLoggerFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.#ctor(Castle.Core.Logging.WebLoggerFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.Bind(Castle.Core.Logging.ILoggerFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.Constructor">
            <summary>设置 WebLoggerFactory.WebLoggerFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.CreateString">
            <summary>设置 WebLoggerFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.CreateStringLoggerLevel">
            <summary>设置 WebLoggerFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.AllInstances.CreateString">
            <summary>设置 WebLoggerFactory.Create(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.ShimWebLoggerFactory.AllInstances.CreateStringLoggerLevel">
            <summary>设置 WebLoggerFactory.Create(String name, LoggerLevel level) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory">
            <summary>Castle.Core.Logging.AbstractLoggerFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.Create(System.String)">
            <summary>设置 AbstractLoggerFactory.Create(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.Create(System.Type)">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 AbstractLoggerFactory.Create(String name, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.CreateString">
            <summary>设置 AbstractLoggerFactory.Create(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.CreateStringLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(String name, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.CreateType">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.CreateTypeLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.InitializeStub">
            <summary>初始化 type StubAbstractLoggerFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubAbstractLoggerFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubConsoleFactory">
            <summary>Castle.Core.Logging.ConsoleFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleFactory.InitializeStub">
            <summary>初始化 type StubConsoleFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubConsoleFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubConsoleFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubConsoleFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubConsoleLogger">
            <summary>Castle.Core.Logging.ConsoleLogger 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.#ctor(Castle.Core.Logging.LoggerLevel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.#ctor(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.CreateChildLogger(System.String)">
            <summary>设置 ConsoleLogger.CreateChildLogger(String newName) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubConsoleLogger.CreateChildLoggerString">
            <summary>设置 ConsoleLogger.CreateChildLogger(String newName) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.InitializeLifetimeService">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubConsoleLogger.InitializeLifetimeService01">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.InitializeStub">
            <summary>初始化 type StubConsoleLogger 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubConsoleLogger.Log(Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>设置 ConsoleLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubConsoleLogger.LogLoggerLevelStringStringException">
            <summary>设置 ConsoleLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubConsoleLogger.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubConsoleLogger.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubConsoleLogger.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubDiagnosticsLogger">
            <summary>Castle.Core.Logging.DiagnosticsLogger 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.#ctor(System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.CreateChildLogger(System.String)">
            <summary>设置 DiagnosticsLogger.CreateChildLogger(String newName) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.CreateChildLoggerString">
            <summary>设置 DiagnosticsLogger.CreateChildLogger(String newName) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.InitializeLifetimeService">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.InitializeLifetimeService01">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.InitializeStub">
            <summary>初始化 type StubDiagnosticsLogger 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.Log(Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>设置 DiagnosticsLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.LogLoggerLevelStringStringException">
            <summary>设置 DiagnosticsLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubDiagnosticsLogger.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory">
            <summary>Castle.Core.Logging.DiagnosticsLoggerFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.Create(System.String)">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.Create(System.Type)">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.CreateString">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.CreateStringLoggerLevel">
            <summary>设置 DiagnosticsLoggerFactory.Create(String name, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.CreateType">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.CreateTypeLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.InitializeStub">
            <summary>初始化 type StubDiagnosticsLoggerFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubDiagnosticsLoggerFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubILogger">
            <summary>Castle.Core.Logging.ILogger 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.#ctor">
            <summary>初始化 type StubILogger 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#CreateChildLogger(System.String)">
            <summary>设置 ILogger.CreateChildLogger(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Debug(System.String)">
            <summary>设置 ILogger.Debug(String message) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Debug(System.String,System.Object[])">
            <summary>设置 ILogger.Debug(String format, Object[] args) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Debug(System.String,System.Exception)">
            <summary>设置 ILogger.Debug(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Error(System.String)">
            <summary>设置 ILogger.Error(String message) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Error(System.String,System.Object[])">
            <summary>设置 ILogger.Error(String format, Object[] args) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Error(System.String,System.Exception)">
            <summary>设置 ILogger.Error(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#FatalError(System.String)">
            <summary>设置 ILogger.FatalError(String message) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#FatalError(System.String,System.Exception)">
            <summary>设置 ILogger.FatalError(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#FatalError(System.String,System.Object[])">
            <summary>设置 ILogger.FatalError(String format, Object[] args) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Info(System.String)">
            <summary>设置 ILogger.Info(String message) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Info(System.String,System.Exception)">
            <summary>设置 ILogger.Info(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Info(System.String,System.Object[])">
            <summary>设置 ILogger.Info(String format, Object[] args) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Warn(System.String)">
            <summary>设置 ILogger.Warn(String message) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Warn(System.String,System.Object[])">
            <summary>设置 ILogger.Warn(String format, Object[] args) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#Warn(System.String,System.Exception)">
            <summary>设置 ILogger.Warn(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.CreateChildLoggerString">
            <summary>设置 ILogger.CreateChildLogger(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.DebugString">
            <summary>设置 ILogger.Debug(String message) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.DebugStringException">
            <summary>设置 ILogger.Debug(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.DebugStringObjectArray">
            <summary>设置 ILogger.Debug(String format, Object[] args) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.ErrorString">
            <summary>设置 ILogger.Error(String message) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.ErrorStringException">
            <summary>设置 ILogger.Error(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.ErrorStringObjectArray">
            <summary>设置 ILogger.Error(String format, Object[] args) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.FatalErrorString">
            <summary>设置 ILogger.FatalError(String message) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.FatalErrorStringException">
            <summary>设置 ILogger.FatalError(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.FatalErrorStringObjectArray">
            <summary>设置 ILogger.FatalError(String format, Object[] args) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.InfoString">
            <summary>设置 ILogger.Info(String message) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.InfoStringException">
            <summary>设置 ILogger.Info(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.InfoStringObjectArray">
            <summary>设置 ILogger.Info(String format, Object[] args) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.IsDebugEnabledGet">
            <summary>设置 ILogger.get_IsDebugEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.IsErrorEnabledGet">
            <summary>设置 ILogger.get_IsErrorEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.IsFatalErrorEnabledGet">
            <summary>设置 ILogger.get_IsFatalErrorEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.IsInfoEnabledGet">
            <summary>设置 ILogger.get_IsInfoEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.IsWarnEnabledGet">
            <summary>设置 ILogger.get_IsWarnEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.WarnString">
            <summary>设置 ILogger.Warn(String message) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.WarnStringException">
            <summary>设置 ILogger.Warn(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILogger.WarnStringObjectArray">
            <summary>设置 ILogger.Warn(String format, Object[] args) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#IsDebugEnabled">
            <summary>设置 ILogger.get_IsDebugEnabled() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#IsErrorEnabled">
            <summary>设置 ILogger.get_IsErrorEnabled() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#IsFatalErrorEnabled">
            <summary>设置 ILogger.get_IsFatalErrorEnabled() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#IsInfoEnabled">
            <summary>设置 ILogger.get_IsInfoEnabled() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubILogger.cc::Castle#Core#Logging#ILogger#IsWarnEnabled">
            <summary>设置 ILogger.get_IsWarnEnabled() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubILoggerFactory">
            <summary>Castle.Core.Logging.ILoggerFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILoggerFactory.#ctor">
            <summary>初始化 type StubILoggerFactory 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILoggerFactory.cc::Castle#Core#Logging#ILoggerFactory#Create(System.String)">
            <summary>设置 ILoggerFactory.Create(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILoggerFactory.cc::Castle#Core#Logging#ILoggerFactory#Create(System.Type)">
            <summary>设置 ILoggerFactory.Create(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILoggerFactory.cc::Castle#Core#Logging#ILoggerFactory#Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 ILoggerFactory.Create(String name, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubILoggerFactory.cc::Castle#Core#Logging#ILoggerFactory#Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 ILoggerFactory.Create(Type type, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILoggerFactory.CreateString">
            <summary>设置 ILoggerFactory.Create(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILoggerFactory.CreateStringLoggerLevel">
            <summary>设置 ILoggerFactory.Create(String name, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILoggerFactory.CreateType">
            <summary>设置 ILoggerFactory.Create(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubILoggerFactory.CreateTypeLoggerLevel">
            <summary>设置 ILoggerFactory.Create(Type type, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubLevelFilteredLogger">
            <summary>Castle.Core.Logging.LevelFilteredLogger 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.#ctor(Castle.Core.Logging.LoggerLevel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.#ctor(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.CreateChildLogger(System.String)">
            <summary>设置 LevelFilteredLogger.CreateChildLogger(String name) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.CreateChildLoggerString">
            <summary>设置 LevelFilteredLogger.CreateChildLogger(String name) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.InitializeLifetimeService">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.InitializeLifetimeService01">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.InitializeStub">
            <summary>初始化 type StubLevelFilteredLogger 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.Log(Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>设置 LevelFilteredLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.LogLoggerLevelStringStringException">
            <summary>设置 LevelFilteredLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLevelFilteredLogger.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubLoggerException">
            <summary>Castle.Core.Logging.LoggerException 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubLoggerException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubLoggerException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.InitializeStub">
            <summary>初始化 type StubLoggerException 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubLoggerException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubLoggerException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubLoggerException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubNullLogFactory">
            <summary>Castle.Core.Logging.NullLogFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogFactory.Create(System.String)">
            <summary>设置 NullLogFactory.Create(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogFactory.Create(System.Type)">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 NullLogFactory.Create(String name, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubNullLogFactory.CreateString">
            <summary>设置 NullLogFactory.Create(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubNullLogFactory.CreateStringLoggerLevel">
            <summary>设置 NullLogFactory.Create(String name, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubNullLogFactory.CreateType">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubNullLogFactory.CreateTypeLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogFactory.InitializeStub">
            <summary>初始化 type StubNullLogFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubNullLogFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubNullLogFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubNullLogFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubNullLogger">
            <summary>Castle.Core.Logging.NullLogger 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogger.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubNullLogger.InitializeStub">
            <summary>初始化 type StubNullLogger 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubNullLogger.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubNullLogger.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubNullLogger.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubStreamLogger">
            <summary>Castle.Core.Logging.StreamLogger 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.#ctor(System.String,System.IO.Stream)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.#ctor(System.String,System.IO.StreamWriter)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.#ctor(System.String,System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.CreateChildLogger(System.String)">
            <summary>设置 StreamLogger.CreateChildLogger(String name) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubStreamLogger.CreateChildLoggerString">
            <summary>设置 StreamLogger.CreateChildLogger(String name) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.InitializeLifetimeService">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubStreamLogger.InitializeLifetimeService01">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.InitializeStub">
            <summary>初始化 type StubStreamLogger 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLogger.Log(Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>设置 StreamLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubStreamLogger.LogLoggerLevelStringStringException">
            <summary>设置 StreamLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubStreamLogger.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubStreamLogger.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubStreamLogger.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubStreamLoggerFactory">
            <summary>Castle.Core.Logging.StreamLoggerFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.Create(System.String)">
            <summary>设置 StreamLoggerFactory.Create(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.Create(System.Type)">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 StreamLoggerFactory.Create(String name, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.CreateString">
            <summary>设置 StreamLoggerFactory.Create(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.CreateStringLoggerLevel">
            <summary>设置 StreamLoggerFactory.Create(String name, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.CreateType">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.CreateTypeLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.InitializeStub">
            <summary>初始化 type StubStreamLoggerFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubStreamLoggerFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubWebLogger">
            <summary>Castle.Core.Logging.WebLogger 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.#ctor(Castle.Core.Logging.LoggerLevel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.#ctor(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.CreateChildLogger(System.String)">
            <summary>设置 WebLogger.CreateChildLogger(String newName) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubWebLogger.CreateChildLoggerString">
            <summary>设置 WebLogger.CreateChildLogger(String newName) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.InitializeLifetimeService">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubWebLogger.InitializeLifetimeService01">
            <summary>设置 LevelFilteredLogger.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.InitializeStub">
            <summary>初始化 type StubWebLogger 的新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLogger.Log(Castle.Core.Logging.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>设置 WebLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubWebLogger.LogLoggerLevelStringStringException">
            <summary>设置 WebLogger.Log(LoggerLevel level, String name, String message, Exception exception) 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubWebLogger.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubWebLogger.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubWebLogger.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Logging.Fakes.StubWebLoggerFactory">
            <summary>Castle.Core.Logging.WebLoggerFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLoggerFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLoggerFactory.Create(System.String)">
            <summary>设置 WebLoggerFactory.Create(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLoggerFactory.Create(System.Type)">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLoggerFactory.Create(System.String,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 WebLoggerFactory.Create(String name, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLoggerFactory.Create(System.Type,Castle.Core.Logging.LoggerLevel)">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubWebLoggerFactory.CreateString">
            <summary>设置 WebLoggerFactory.Create(String name) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubWebLoggerFactory.CreateStringLoggerLevel">
            <summary>设置 WebLoggerFactory.Create(String name, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubWebLoggerFactory.CreateType">
            <summary>设置 AbstractLoggerFactory.Create(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Logging.Fakes.StubWebLoggerFactory.CreateTypeLoggerLevel">
            <summary>设置 AbstractLoggerFactory.Create(Type type, LoggerLevel level) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Logging.Fakes.StubWebLoggerFactory.InitializeStub">
            <summary>初始化 type StubWebLoggerFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubWebLoggerFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubWebLoggerFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Logging.Fakes.StubWebLoggerFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAbstractResource">
            <summary>Castle.Core.Resource.AbstractResource 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractResource.#ctor(Castle.Core.Resource.AbstractResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractResource.Bind(Castle.Core.Resource.IResource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractResource.Constructor">
            <summary>设置 AbstractResource.AbstractResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractResource.FileBasePathGet">
            <summary>设置 AbstractResource.get_FileBasePath() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractResource.StaticConstructor">
            <summary>设置 AbstractResource.AbstractResource() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAbstractResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractResource.AllInstances.FileBasePathGet">
            <summary>设置 AbstractResource.get_FileBasePath() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAbstractStreamResource">
            <summary>Castle.Core.Resource.AbstractStreamResource 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.#ctor(Castle.Core.Resource.AbstractStreamResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.Bind(Castle.Core.Resource.IResource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.Constructor">
            <summary>设置 AbstractStreamResource.AbstractStreamResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.Dispose">
            <summary>设置 AbstractStreamResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.DisposeBoolean">
            <summary>设置 AbstractStreamResource.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.GetStreamReader">
            <summary>设置 AbstractStreamResource.GetStreamReader() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.GetStreamReaderEncoding">
            <summary>设置 AbstractStreamResource.GetStreamReader(Encoding encoding) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.AllInstances.Dispose">
            <summary>设置 AbstractStreamResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.AllInstances.DisposeBoolean">
            <summary>设置 AbstractStreamResource.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.AllInstances.GetStreamReader">
            <summary>设置 AbstractStreamResource.GetStreamReader() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.AllInstances.GetStreamReaderEncoding">
            <summary>设置 AbstractStreamResource.GetStreamReader(Encoding encoding) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate">
            <summary>Castle.Core.Resource.AbstractStreamResource+StreamHideCloseDelegate 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.#ctor(Castle.Core.Resource.AbstractStreamResource.StreamHideCloseDelegate)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 StreamHideCloseDelegate.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 StreamHideCloseDelegate.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.CanReadGet">
            <summary>设置 StreamHideCloseDelegate.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.CanSeekGet">
            <summary>设置 StreamHideCloseDelegate.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.CanWriteGet">
            <summary>设置 StreamHideCloseDelegate.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.Close">
            <summary>设置 StreamHideCloseDelegate.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.ConstructorStream">
            <summary>设置 StreamHideCloseDelegate.StreamHideCloseDelegate(Stream inner) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.CreateObjRefType">
            <summary>设置 StreamHideCloseDelegate.CreateObjRef(Type requestedType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.Dispose">
            <summary>设置 StreamHideCloseDelegate.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.EndReadIAsyncResult">
            <summary>设置 StreamHideCloseDelegate.EndRead(IAsyncResult asyncResult) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.EndWriteIAsyncResult">
            <summary>设置 StreamHideCloseDelegate.EndWrite(IAsyncResult asyncResult) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.Flush">
            <summary>设置 StreamHideCloseDelegate.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.InitializeLifetimeService">
            <summary>设置 StreamHideCloseDelegate.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.LengthGet">
            <summary>设置 StreamHideCloseDelegate.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.PositionGet">
            <summary>设置 StreamHideCloseDelegate.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.PositionSetInt64">
            <summary>设置 StreamHideCloseDelegate.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.ReadByte">
            <summary>设置 StreamHideCloseDelegate.ReadByte() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.ReadByteArrayInt32Int32">
            <summary>设置 StreamHideCloseDelegate.Read(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.SeekInt64SeekOrigin">
            <summary>设置 StreamHideCloseDelegate.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.SetLengthInt64">
            <summary>设置 StreamHideCloseDelegate.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.WriteByteArrayInt32Int32">
            <summary>设置 StreamHideCloseDelegate.Write(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.WriteByteByte">
            <summary>设置 StreamHideCloseDelegate.WriteByte(Byte value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 StreamHideCloseDelegate.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>设置 StreamHideCloseDelegate.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.CanReadGet">
            <summary>设置 StreamHideCloseDelegate.get_CanRead() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.CanSeekGet">
            <summary>设置 StreamHideCloseDelegate.get_CanSeek() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.CanWriteGet">
            <summary>设置 StreamHideCloseDelegate.get_CanWrite() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.Close">
            <summary>设置 StreamHideCloseDelegate.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.CreateObjRefType">
            <summary>设置 StreamHideCloseDelegate.CreateObjRef(Type requestedType) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.Dispose">
            <summary>设置 StreamHideCloseDelegate.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.EndReadIAsyncResult">
            <summary>设置 StreamHideCloseDelegate.EndRead(IAsyncResult asyncResult) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.EndWriteIAsyncResult">
            <summary>设置 StreamHideCloseDelegate.EndWrite(IAsyncResult asyncResult) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.Flush">
            <summary>设置 StreamHideCloseDelegate.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.InitializeLifetimeService">
            <summary>设置 StreamHideCloseDelegate.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.LengthGet">
            <summary>设置 StreamHideCloseDelegate.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.PositionGet">
            <summary>设置 StreamHideCloseDelegate.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.PositionSetInt64">
            <summary>设置 StreamHideCloseDelegate.set_Position(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.ReadByte">
            <summary>设置 StreamHideCloseDelegate.ReadByte() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.ReadByteArrayInt32Int32">
            <summary>设置 StreamHideCloseDelegate.Read(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.SeekInt64SeekOrigin">
            <summary>设置 StreamHideCloseDelegate.Seek(Int64 offset, SeekOrigin origin) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.SetLengthInt64">
            <summary>设置 StreamHideCloseDelegate.SetLength(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.WriteByteArrayInt32Int32">
            <summary>设置 StreamHideCloseDelegate.Write(Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAbstractStreamResource.ShimStreamHideCloseDelegate.AllInstances.WriteByteByte">
            <summary>设置 StreamHideCloseDelegate.WriteByte(Byte value) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAssemblyResource">
            <summary>Castle.Core.Resource.AssemblyResource 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResource.#ctor(Castle.Core.Resource.AssemblyResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResource.Bind(Castle.Core.Resource.IResource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.ConstructorCustomUri">
            <summary>设置 AssemblyResource.AssemblyResource(CustomUri resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.ConstructorCustomUriString">
            <summary>设置 AssemblyResource.AssemblyResource(CustomUri resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.ConstructorString">
            <summary>设置 AssemblyResource.AssemblyResource(String resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.ConvertToPathString">
            <summary>设置 AssemblyResource.ConvertToPath(String resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.ConvertToResourceNameStringStringString">
            <summary>设置 AssemblyResource.ConvertToResourceName(String assemblyName, String resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.CreateRelativeString">
            <summary>设置 AssemblyResource.CreateRelative(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.CreateResourceFromPathStringString">
            <summary>设置 AssemblyResource.CreateResourceFromPath(String resource, String path) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.CreateResourceFromUriCustomUriString">
            <summary>设置 AssemblyResource.CreateResourceFromUri(CustomUri resourcex, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.GetNameFoundStringArray">
            <summary>设置 AssemblyResource.GetNameFound(String[] names) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.ObtainAssemblyString">
            <summary>设置 AssemblyResource.ObtainAssembly(String assemblyName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.StreamGet">
            <summary>设置 AssemblyResource.get_Stream() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.ToString">
            <summary>设置 AssemblyResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.ConvertToPathString">
            <summary>设置 AssemblyResource.ConvertToPath(String resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.ConvertToResourceNameStringStringString">
            <summary>设置 AssemblyResource.ConvertToResourceName(String assemblyName, String resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.CreateRelativeString">
            <summary>设置 AssemblyResource.CreateRelative(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.CreateResourceFromPathStringString">
            <summary>设置 AssemblyResource.CreateResourceFromPath(String resource, String path) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.CreateResourceFromUriCustomUriString">
            <summary>设置 AssemblyResource.CreateResourceFromUri(CustomUri resourcex, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.GetNameFoundStringArray">
            <summary>设置 AssemblyResource.GetNameFound(String[] names) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.ObtainAssemblyString">
            <summary>设置 AssemblyResource.ObtainAssembly(String assemblyName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.StreamGet">
            <summary>设置 AssemblyResource.get_Stream() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResource.AllInstances.ToString01">
            <summary>设置 AssemblyResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory">
            <summary>Castle.Core.Resource.AssemblyResourceFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.#ctor(Castle.Core.Resource.AssemblyResourceFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.Bind(Castle.Core.Resource.IResourceFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.AcceptCustomUri">
            <summary>设置 AssemblyResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.Constructor">
            <summary>设置 AssemblyResourceFactory.AssemblyResourceFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.CreateCustomUri">
            <summary>设置 AssemblyResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.CreateCustomUriString">
            <summary>设置 AssemblyResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.AllInstances.AcceptCustomUri">
            <summary>设置 AssemblyResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.AllInstances.CreateCustomUri">
            <summary>设置 AssemblyResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimAssemblyResourceFactory.AllInstances.CreateCustomUriString">
            <summary>设置 AssemblyResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimConfigResource">
            <summary>Castle.Core.Resource.ConfigResource 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResource.#ctor(Castle.Core.Resource.ConfigResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResource.Bind(Castle.Core.Resource.IResource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.Constructor">
            <summary>设置 ConfigResource.ConfigResource() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.ConstructorCustomUri">
            <summary>设置 ConfigResource.ConfigResource(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.ConstructorString">
            <summary>设置 ConfigResource.ConfigResource(String sectionName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.CreateRelativeString">
            <summary>设置 ConfigResource.CreateRelative(String relativePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.Dispose">
            <summary>设置 ConfigResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.GetStreamReader">
            <summary>设置 ConfigResource.GetStreamReader() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.GetStreamReaderEncoding">
            <summary>设置 ConfigResource.GetStreamReader(Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.ToString">
            <summary>设置 ConfigResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimConfigResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.AllInstances.CreateRelativeString">
            <summary>设置 ConfigResource.CreateRelative(String relativePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.AllInstances.Dispose">
            <summary>设置 ConfigResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.AllInstances.GetStreamReader">
            <summary>设置 ConfigResource.GetStreamReader() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.AllInstances.GetStreamReaderEncoding">
            <summary>设置 ConfigResource.GetStreamReader(Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResource.AllInstances.ToString01">
            <summary>设置 ConfigResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimConfigResourceFactory">
            <summary>Castle.Core.Resource.ConfigResourceFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.#ctor(Castle.Core.Resource.ConfigResourceFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.Bind(Castle.Core.Resource.IResourceFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.AcceptCustomUri">
            <summary>设置 ConfigResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.Constructor">
            <summary>设置 ConfigResourceFactory.ConfigResourceFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.CreateCustomUri">
            <summary>设置 ConfigResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.CreateCustomUriString">
            <summary>设置 ConfigResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.AllInstances.AcceptCustomUri">
            <summary>设置 ConfigResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.AllInstances.CreateCustomUri">
            <summary>设置 ConfigResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimConfigResourceFactory.AllInstances.CreateCustomUriString">
            <summary>设置 ConfigResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimCustomUri">
            <summary>Castle.Core.Resource.CustomUri 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimCustomUri.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimCustomUri.#ctor(Castle.Core.Resource.CustomUri)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimCustomUri.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimCustomUri.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AbsolutePathGet">
            <summary>设置 CustomUri.get_AbsolutePath() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.ConstructorString">
            <summary>设置 CustomUri.CustomUri(String resourceIdentifier) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.HostGet">
            <summary>设置 CustomUri.get_Host() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.IsAssemblyGet">
            <summary>设置 CustomUri.get_IsAssembly() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.IsFileGet">
            <summary>设置 CustomUri.get_IsFile() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.IsUncGet">
            <summary>设置 CustomUri.get_IsUnc() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.ParseIdentifierString">
            <summary>设置 CustomUri.ParseIdentifier(String identifier) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.PathGet">
            <summary>设置 CustomUri.get_Path() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.SanityCheckString">
            <summary>设置 CustomUri.SanityCheck(String resourceIdentifier) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.SchemeGet">
            <summary>设置 CustomUri.get_Scheme() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.StaticConstructor">
            <summary>设置 CustomUri.CustomUri() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.AbsolutePathGet">
            <summary>设置 CustomUri.get_AbsolutePath() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.HostGet">
            <summary>设置 CustomUri.get_Host() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.IsAssemblyGet">
            <summary>设置 CustomUri.get_IsAssembly() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.IsFileGet">
            <summary>设置 CustomUri.get_IsFile() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.IsUncGet">
            <summary>设置 CustomUri.get_IsUnc() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.ParseIdentifierString">
            <summary>设置 CustomUri.ParseIdentifier(String identifier) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.PathGet">
            <summary>设置 CustomUri.get_Path() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimCustomUri.AllInstances.SchemeGet">
            <summary>设置 CustomUri.get_Scheme() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimFileResource">
            <summary>Castle.Core.Resource.FileResource 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResource.#ctor(Castle.Core.Resource.FileResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResource.Bind(Castle.Core.Resource.IResource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.CheckFileExistsString">
            <summary>设置 FileResource.CheckFileExists(String path) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.ConstructorCustomUri">
            <summary>设置 FileResource.FileResource(CustomUri resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.ConstructorCustomUriString">
            <summary>设置 FileResource.FileResource(CustomUri resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.ConstructorString">
            <summary>设置 FileResource.FileResource(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.ConstructorStringString">
            <summary>设置 FileResource.FileResource(String resourceName, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.CreateRelativeString">
            <summary>设置 FileResource.CreateRelative(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.CreateStreamFromPathStringString">
            <summary>设置 FileResource.CreateStreamFromPath(String filePath, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.CreateStreamFromUriCustomUriString">
            <summary>设置 FileResource.CreateStreamFromUri(CustomUri resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.FileBasePathGet">
            <summary>设置 FileResource.get_FileBasePath() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.StreamGet">
            <summary>设置 FileResource.get_Stream() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.ToString">
            <summary>设置 FileResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances.CheckFileExistsString">
            <summary>设置 FileResource.CheckFileExists(String path) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances.CreateRelativeString">
            <summary>设置 FileResource.CreateRelative(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances.CreateStreamFromPathStringString">
            <summary>设置 FileResource.CreateStreamFromPath(String filePath, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances.CreateStreamFromUriCustomUriString">
            <summary>设置 FileResource.CreateStreamFromUri(CustomUri resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances.FileBasePathGet">
            <summary>设置 FileResource.get_FileBasePath() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances.StreamGet">
            <summary>设置 FileResource.get_Stream() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResource.AllInstances.ToString01">
            <summary>设置 FileResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimFileResourceFactory">
            <summary>Castle.Core.Resource.FileResourceFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResourceFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResourceFactory.#ctor(Castle.Core.Resource.FileResourceFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResourceFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResourceFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimFileResourceFactory.Bind(Castle.Core.Resource.IResourceFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.AcceptCustomUri">
            <summary>设置 FileResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.Constructor">
            <summary>设置 FileResourceFactory.FileResourceFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.CreateCustomUri">
            <summary>设置 FileResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.CreateCustomUriString">
            <summary>设置 FileResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimFileResourceFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.AllInstances.AcceptCustomUri">
            <summary>设置 FileResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.AllInstances.CreateCustomUri">
            <summary>设置 FileResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimFileResourceFactory.AllInstances.CreateCustomUriString">
            <summary>设置 FileResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimResourceException">
            <summary>Castle.Core.Resource.ResourceException 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimResourceException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimResourceException.#ctor(Castle.Core.Resource.ResourceException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimResourceException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimResourceException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimResourceException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimResourceException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimResourceException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ResourceException.ResourceException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimResourceException.ConstructorString">
            <summary>设置 ResourceException.ResourceException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimResourceException.ConstructorStringException">
            <summary>设置 ResourceException.ResourceException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimResourceException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimStaticContentResource">
            <summary>Castle.Core.Resource.StaticContentResource 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimStaticContentResource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimStaticContentResource.#ctor(Castle.Core.Resource.StaticContentResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimStaticContentResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimStaticContentResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimStaticContentResource.Bind(Castle.Core.Resource.IResource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimStaticContentResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.ConstructorString">
            <summary>设置 StaticContentResource.StaticContentResource(String contents) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.CreateRelativeString">
            <summary>设置 StaticContentResource.CreateRelative(String relativePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.Dispose">
            <summary>设置 StaticContentResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.GetStreamReader">
            <summary>设置 StaticContentResource.GetStreamReader() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.GetStreamReaderEncoding">
            <summary>设置 StaticContentResource.GetStreamReader(Encoding encoding) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimStaticContentResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.AllInstances.CreateRelativeString">
            <summary>设置 StaticContentResource.CreateRelative(String relativePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.AllInstances.Dispose">
            <summary>设置 StaticContentResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.AllInstances.GetStreamReader">
            <summary>设置 StaticContentResource.GetStreamReader() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimStaticContentResource.AllInstances.GetStreamReaderEncoding">
            <summary>设置 StaticContentResource.GetStreamReader(Encoding encoding) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimUncResource">
            <summary>Castle.Core.Resource.UncResource 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResource.#ctor(Castle.Core.Resource.UncResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResource.Bind(Castle.Core.Resource.IResource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.CheckFileExistsString">
            <summary>设置 UncResource.CheckFileExists(String path) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.ConstructorCustomUri">
            <summary>设置 UncResource.UncResource(CustomUri resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.ConstructorCustomUriString">
            <summary>设置 UncResource.UncResource(CustomUri resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.ConstructorString">
            <summary>设置 UncResource.UncResource(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.ConstructorStringString">
            <summary>设置 UncResource.UncResource(String resourceName, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.CreateRelativeString">
            <summary>设置 UncResource.CreateRelative(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.CreateStreamFromUriCustomUriString">
            <summary>设置 UncResource.CreateStreamFromUri(CustomUri resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.FileBasePathGet">
            <summary>设置 UncResource.get_FileBasePath() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.StreamGet">
            <summary>设置 UncResource.get_Stream() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.ToString">
            <summary>设置 UncResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimUncResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.AllInstances.CheckFileExistsString">
            <summary>设置 UncResource.CheckFileExists(String path) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.AllInstances.CreateRelativeString">
            <summary>设置 UncResource.CreateRelative(String resourceName) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.AllInstances.CreateStreamFromUriCustomUriString">
            <summary>设置 UncResource.CreateStreamFromUri(CustomUri resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.AllInstances.FileBasePathGet">
            <summary>设置 UncResource.get_FileBasePath() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.AllInstances.StreamGet">
            <summary>设置 UncResource.get_Stream() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResource.AllInstances.ToString01">
            <summary>设置 UncResource.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimUncResourceFactory">
            <summary>Castle.Core.Resource.UncResourceFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResourceFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResourceFactory.#ctor(Castle.Core.Resource.UncResourceFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResourceFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResourceFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.ShimUncResourceFactory.Bind(Castle.Core.Resource.IResourceFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.AcceptCustomUri">
            <summary>设置 UncResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.Constructor">
            <summary>设置 UncResourceFactory.UncResourceFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.CreateCustomUri">
            <summary>设置 UncResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.CreateCustomUriString">
            <summary>设置 UncResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.ShimUncResourceFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.AllInstances.AcceptCustomUri">
            <summary>设置 UncResourceFactory.Accept(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.AllInstances.CreateCustomUri">
            <summary>设置 UncResourceFactory.Create(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.ShimUncResourceFactory.AllInstances.CreateCustomUriString">
            <summary>设置 UncResourceFactory.Create(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.StubAssemblyResourceFactory">
            <summary>Castle.Core.Resource.AssemblyResourceFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubAssemblyResourceFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubAssemblyResourceFactory.InitializeStub">
            <summary>初始化 type StubAssemblyResourceFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubAssemblyResourceFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubAssemblyResourceFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubAssemblyResourceFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.StubConfigResourceFactory">
            <summary>Castle.Core.Resource.ConfigResourceFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubConfigResourceFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubConfigResourceFactory.InitializeStub">
            <summary>初始化 type StubConfigResourceFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubConfigResourceFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubConfigResourceFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubConfigResourceFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.StubFileResourceFactory">
            <summary>Castle.Core.Resource.FileResourceFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubFileResourceFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubFileResourceFactory.InitializeStub">
            <summary>初始化 type StubFileResourceFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubFileResourceFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubFileResourceFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubFileResourceFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.StubIResourceFactory">
            <summary>Castle.Core.Resource.IResourceFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubIResourceFactory.#ctor">
            <summary>初始化 type StubIResourceFactory 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubIResourceFactory.AcceptCustomUri">
            <summary>设置 IResourceFactory.Accept(CustomUri uri) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubIResourceFactory.cc::Castle#Core#Resource#IResourceFactory#Accept(Castle.Core.Resource.CustomUri)">
            <summary>设置 IResourceFactory.Accept(CustomUri uri) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubIResourceFactory.cc::Castle#Core#Resource#IResourceFactory#Create(Castle.Core.Resource.CustomUri)">
            <summary>设置 IResourceFactory.Create(CustomUri uri) 的 存根</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubIResourceFactory.cc::Castle#Core#Resource#IResourceFactory#Create(Castle.Core.Resource.CustomUri,System.String)">
            <summary>设置 IResourceFactory.Create(CustomUri uri, String basePath) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubIResourceFactory.CreateCustomUri">
            <summary>设置 IResourceFactory.Create(CustomUri uri) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubIResourceFactory.CreateCustomUriString">
            <summary>设置 IResourceFactory.Create(CustomUri uri, String basePath) 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.StubResourceException">
            <summary>Castle.Core.Resource.ResourceException 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubResourceException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubResourceException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.InitializeStub">
            <summary>初始化 type StubResourceException 的新实例</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubResourceException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.Core.Resource.Fakes.StubResourceException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubResourceException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.Core.Resource.Fakes.StubUncResourceFactory">
            <summary>Castle.Core.Resource.UncResourceFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubUncResourceFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Core.Resource.Fakes.StubUncResourceFactory.InitializeStub">
            <summary>初始化 type StubUncResourceFactory 的新实例</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubUncResourceFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubUncResourceFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Core.Resource.Fakes.StubUncResourceFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
