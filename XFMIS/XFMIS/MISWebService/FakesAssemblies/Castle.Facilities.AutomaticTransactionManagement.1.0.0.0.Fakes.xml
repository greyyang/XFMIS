<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Facilities.AutomaticTransactionManagement.1.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionComponentInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.#ctor(Castle.Facilities.AutomaticTransactionManagement.TransactionComponentInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AddTransactionInterceptorIfIsTransactionalComponentModelTransactionMetaInfoStore">
            <summary>设置 TransactionComponentInspector.AddTransactionInterceptorIfIsTransactional(ComponentModel model, TransactionMetaInfoStore store) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AssertThereNoTransactionOnConfigComponentModel">
            <summary>设置 TransactionComponentInspector.AssertThereNoTransactionOnConfig(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.ConfigureBasedOnAttributesComponentModel">
            <summary>设置 TransactionComponentInspector.ConfigureBasedOnAttributes(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.Constructor">
            <summary>设置 TransactionComponentInspector.TransactionComponentInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.IsMarkedWithTransactionalIConfiguration">
            <summary>设置 TransactionComponentInspector.IsMarkedWithTransactional(IConfiguration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.ObtainNodeName">
            <summary>设置 TransactionComponentInspector.ObtainNodeName() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.ProcessMetaComponentModelMethodInfoArrayMethodMetaModel">
            <summary>设置 TransactionComponentInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.ProcessModelIKernelComponentModel">
            <summary>设置 TransactionComponentInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.StaticConstructor">
            <summary>设置 TransactionComponentInspector.TransactionComponentInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.ValidateComponentModelTransactionMetaInfoStore">
            <summary>设置 TransactionComponentInspector.Validate(ComponentModel model, TransactionMetaInfoStore store) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances.AssertThereNoTransactionOnConfigComponentModel">
            <summary>设置 TransactionComponentInspector.AssertThereNoTransactionOnConfig(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances.ConfigureBasedOnAttributesComponentModel">
            <summary>设置 TransactionComponentInspector.ConfigureBasedOnAttributes(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances.IsMarkedWithTransactionalIConfiguration">
            <summary>设置 TransactionComponentInspector.IsMarkedWithTransactional(IConfiguration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances.ObtainNodeName">
            <summary>设置 TransactionComponentInspector.ObtainNodeName() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances.ProcessMetaComponentModelMethodInfoArrayMethodMetaModel">
            <summary>设置 TransactionComponentInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 TransactionComponentInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionComponentInspector.AllInstances.ValidateComponentModelTransactionMetaInfoStore">
            <summary>设置 TransactionComponentInspector.Validate(ComponentModel model, TransactionMetaInfoStore store) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionFacility 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.#ctor(Castle.Facilities.AutomaticTransactionManagement.TransactionFacility)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.Constructor">
            <summary>设置 TransactionFacility.TransactionFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.Init">
            <summary>设置 TransactionFacility.Init() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionFacility.AllInstances.Init">
            <summary>设置 TransactionFacility.Init() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionInterceptor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.#ctor(Castle.Facilities.AutomaticTransactionManagement.TransactionInterceptor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.Bind(Castle.Core.Interceptor.IMethodInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.Bind(Castle.Core.Interceptor.IOnBehalfAware)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.ConstructorIKernelTransactionMetaInfoStore">
            <summary>设置 TransactionInterceptor.TransactionInterceptor(IKernel kernel, TransactionMetaInfoStore infoStore) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.InitializeLifetimeService">
            <summary>设置 TransactionInterceptor.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.InterceptIMethodInvocationObjectArray">
            <summary>设置 TransactionInterceptor.Intercept(IMethodInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.SetInterceptedComponentModelComponentModel">
            <summary>设置 TransactionInterceptor.SetInterceptedComponentModel(ComponentModel target) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.AllInstances.InitializeLifetimeService">
            <summary>设置 TransactionInterceptor.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.AllInstances.InterceptIMethodInvocationObjectArray">
            <summary>设置 TransactionInterceptor.Intercept(IMethodInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionInterceptor.AllInstances.SetInterceptedComponentModelComponentModel">
            <summary>设置 TransactionInterceptor.SetInterceptedComponentModel(ComponentModel target) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionMetaInfo 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.#ctor(Castle.Facilities.AutomaticTransactionManagement.TransactionMetaInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.AddMethodInfoTransactionAttribute">
            <summary>设置 TransactionMetaInfo.Add(MethodInfo method, TransactionAttribute attribute) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.Constructor">
            <summary>设置 TransactionMetaInfo.TransactionMetaInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.ContainsMethodInfo">
            <summary>设置 TransactionMetaInfo.Contains(MethodInfo info) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.GetTransactionAttributeForMethodInfo">
            <summary>设置 TransactionMetaInfo.GetTransactionAttributeFor(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.InitializeLifetimeService">
            <summary>设置 TransactionMetaInfo.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.MethodsGet">
            <summary>设置 TransactionMetaInfo.get_Methods() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.AllInstances.AddMethodInfoTransactionAttribute">
            <summary>设置 TransactionMetaInfo.Add(MethodInfo method, TransactionAttribute attribute) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.AllInstances.ContainsMethodInfo">
            <summary>设置 TransactionMetaInfo.Contains(MethodInfo info) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.AllInstances.GetTransactionAttributeForMethodInfo">
            <summary>设置 TransactionMetaInfo.GetTransactionAttributeFor(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.AllInstances.InitializeLifetimeService">
            <summary>设置 TransactionMetaInfo.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfo.AllInstances.MethodsGet">
            <summary>设置 TransactionMetaInfo.get_Methods() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionMetaInfoStore 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.#ctor(Castle.Facilities.AutomaticTransactionManagement.TransactionMetaInfoStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.Constructor">
            <summary>设置 TransactionMetaInfoStore.TransactionMetaInfoStore() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.CreateMetaFromConfigTypeMethodInfoArrayIConfiguration">
            <summary>设置 TransactionMetaInfoStore.CreateMetaFromConfig(Type implementation, MethodInfo[] methods, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.CreateMetaFromTypeType">
            <summary>设置 TransactionMetaInfoStore.CreateMetaFromType(Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.GetMetaForType">
            <summary>设置 TransactionMetaInfoStore.GetMetaFor(Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.InitializeLifetimeService">
            <summary>设置 TransactionMetaInfoStore.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.ObtainIsolationTypeMethodInfoString">
            <summary>设置 TransactionMetaInfoStore.ObtainIsolation(Type implementation, MethodInfo method, String level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.ObtainTransactionModeTypeMethodInfoString">
            <summary>设置 TransactionMetaInfoStore.ObtainTransactionMode(Type implementation, MethodInfo method, String mode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.PopulateMetaInfoFromTypeTransactionMetaInfoType">
            <summary>设置 TransactionMetaInfoStore.PopulateMetaInfoFromType(TransactionMetaInfo metaInfo, Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.RegisterTypeTransactionMetaInfo">
            <summary>设置 TransactionMetaInfoStore.Register(Type implementation, TransactionMetaInfo metaInfo) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.StaticConstructor">
            <summary>设置 TransactionMetaInfoStore.TransactionMetaInfoStore() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.CreateMetaFromConfigTypeMethodInfoArrayIConfiguration">
            <summary>设置 TransactionMetaInfoStore.CreateMetaFromConfig(Type implementation, MethodInfo[] methods, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.CreateMetaFromTypeType">
            <summary>设置 TransactionMetaInfoStore.CreateMetaFromType(Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.GetMetaForType">
            <summary>设置 TransactionMetaInfoStore.GetMetaFor(Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.InitializeLifetimeService">
            <summary>设置 TransactionMetaInfoStore.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.ObtainIsolationTypeMethodInfoString">
            <summary>设置 TransactionMetaInfoStore.ObtainIsolation(Type implementation, MethodInfo method, String level) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.ObtainTransactionModeTypeMethodInfoString">
            <summary>设置 TransactionMetaInfoStore.ObtainTransactionMode(Type implementation, MethodInfo method, String mode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.PopulateMetaInfoFromTypeTransactionMetaInfoType">
            <summary>设置 TransactionMetaInfoStore.PopulateMetaInfoFromType(TransactionMetaInfo metaInfo, Type implementation) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.ShimTransactionMetaInfoStore.AllInstances.RegisterTypeTransactionMetaInfo">
            <summary>设置 TransactionMetaInfoStore.Register(Type implementation, TransactionMetaInfo metaInfo) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionComponentInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.InitializeStub">
            <summary>初始化 type StubTransactionComponentInspector 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.IsValidMeta(Castle.Core.ComponentModel,Castle.Core.MethodMetaModel)">
            <summary>设置 MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.IsValidMetaComponentModelMethodMetaModel">
            <summary>设置 MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ObtainNodeName">
            <summary>设置 TransactionComponentInspector.ObtainNodeName() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ObtainNodeName01">
            <summary>设置 TransactionComponentInspector.ObtainNodeName() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ProcessMeta(Castle.Core.ComponentModel,System.Reflection.MethodInfo[],Castle.Core.MethodMetaModel)">
            <summary>设置 TransactionComponentInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ProcessMetaComponentModelMethodInfoArrayMethodMetaModel">
            <summary>设置 TransactionComponentInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 TransactionComponentInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ProcessModelIKernelComponentModel">
            <summary>设置 TransactionComponentInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ShouldUseMetaModelGet">
            <summary>设置 MethodMetaInspector.get_ShouldUseMetaModel() 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionComponentInspector.ShouldUseMetaModel">
            <summary>设置 MethodMetaInspector.get_ShouldUseMetaModel() 的 stub</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.Dispose01">
            <summary>设置 AbstractFacility.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.Init">
            <summary>设置 TransactionFacility.Init() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.Init01">
            <summary>设置 TransactionFacility.Init() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.InitializeStub">
            <summary>初始化 type StubTransactionFacility 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionFacility.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionInterceptor 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor.#ctor(Castle.MicroKernel.IKernel,Castle.Facilities.AutomaticTransactionManagement.TransactionMetaInfoStore)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor.InitializeLifetimeService">
            <summary>设置 TransactionInterceptor.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor.InitializeLifetimeService01">
            <summary>设置 TransactionInterceptor.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor.InitializeStub">
            <summary>初始化 type StubTransactionInterceptor 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionInterceptor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionMetaInfo 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo.InitializeLifetimeService">
            <summary>设置 TransactionMetaInfo.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo.InitializeLifetimeService01">
            <summary>设置 TransactionMetaInfo.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo.InitializeStub">
            <summary>初始化 type StubTransactionMetaInfo 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore">
            <summary>Castle.Facilities.AutomaticTransactionManagement.TransactionMetaInfoStore 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore.InitializeLifetimeService">
            <summary>设置 TransactionMetaInfoStore.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore.InitializeLifetimeService01">
            <summary>设置 TransactionMetaInfoStore.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore.InitializeStub">
            <summary>初始化 type StubTransactionMetaInfoStore 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.AutomaticTransactionManagement.Fakes.StubTransactionMetaInfoStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
