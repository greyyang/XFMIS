<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.DynamicProxy.1.1.5.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.AbstractCodeBuilder 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractCodeBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AddStatementStatement">
            <summary>设置 AbstractCodeBuilder.AddStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.ConstructorILGenerator">
            <summary>设置 AbstractCodeBuilder.AbstractCodeBuilder(ILGenerator generator) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.CreateLabel">
            <summary>设置 AbstractCodeBuilder.CreateLabel() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.DeclareLocalType">
            <summary>设置 AbstractCodeBuilder.DeclareLocal(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.GenerateIEasyMemberILGenerator">
            <summary>设置 AbstractCodeBuilder.Generate(IEasyMember member, ILGenerator il) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.GeneratorGet">
            <summary>设置 AbstractCodeBuilder.get_Generator() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.IsEmptyGet">
            <summary>设置 AbstractCodeBuilder.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.SetNonEmpty">
            <summary>设置 AbstractCodeBuilder.SetNonEmpty() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances.AddStatementStatement">
            <summary>设置 AbstractCodeBuilder.AddStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances.CreateLabel">
            <summary>设置 AbstractCodeBuilder.CreateLabel() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances.DeclareLocalType">
            <summary>设置 AbstractCodeBuilder.DeclareLocal(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances.GenerateIEasyMemberILGenerator">
            <summary>设置 AbstractCodeBuilder.Generate(IEasyMember member, ILGenerator il) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances.GeneratorGet">
            <summary>设置 AbstractCodeBuilder.get_Generator() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances.IsEmptyGet">
            <summary>设置 AbstractCodeBuilder.get_IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractCodeBuilder.AllInstances.SetNonEmpty">
            <summary>设置 AbstractCodeBuilder.SetNonEmpty() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.BaseTypeGet">
            <summary>设置 AbstractEasyType.get_BaseType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.BuildType">
            <summary>设置 AbstractEasyType.BuildType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.Constructor">
            <summary>设置 AbstractEasyType.AbstractEasyType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.ConstructorsGet">
            <summary>设置 AbstractEasyType.get_Constructors() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateConstructorArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateConstructor(ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateDefaultConstructor">
            <summary>设置 AbstractEasyType.CreateDefaultConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateEventStringType">
            <summary>设置 AbstractEasyType.CreateEvent(String name, Type eventHandlerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateFieldStringType">
            <summary>设置 AbstractEasyType.CreateField(String name, Type fieldType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateFieldStringTypeBoolean">
            <summary>设置 AbstractEasyType.CreateField(String name, Type fieldType, Boolean serializable) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateMethodStringMethodAttributesReturnReferenceExpressionTypeArray">
            <summary>设置 AbstractEasyType.CreateMethod(String name, MethodAttributes attrs, ReturnReferenceExpression returnType, Type[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateMethodStringReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateMethod(String name, ReturnReferenceExpression returnType, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateMethodStringReturnReferenceExpressionMethodAttributesArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateMethod(String name, ReturnReferenceExpression returnType, MethodAttributes attributes, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreatePropertyPropertyInfo">
            <summary>设置 AbstractEasyType.CreateProperty(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreatePropertyStringType">
            <summary>设置 AbstractEasyType.CreateProperty(String name, Type returnType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateRuntimeConstructorArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateRuntimeConstructor(ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.CreateRuntimeMethodStringReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateRuntimeMethod(String name, ReturnReferenceExpression returnType, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.EnsureBuildersAreInAValidState">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.IncrementAndGetCounterValueGet">
            <summary>设置 AbstractEasyType.get_IncrementAndGetCounterValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.MethodsGet">
            <summary>设置 AbstractEasyType.get_Methods() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.BaseTypeGet">
            <summary>设置 AbstractEasyType.get_BaseType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.BuildType">
            <summary>设置 AbstractEasyType.BuildType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.ConstructorsGet">
            <summary>设置 AbstractEasyType.get_Constructors() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateConstructorArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateConstructor(ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateDefaultConstructor">
            <summary>设置 AbstractEasyType.CreateDefaultConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateEventStringType">
            <summary>设置 AbstractEasyType.CreateEvent(String name, Type eventHandlerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateFieldStringType">
            <summary>设置 AbstractEasyType.CreateField(String name, Type fieldType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateFieldStringTypeBoolean">
            <summary>设置 AbstractEasyType.CreateField(String name, Type fieldType, Boolean serializable) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateMethodStringMethodAttributesReturnReferenceExpressionTypeArray">
            <summary>设置 AbstractEasyType.CreateMethod(String name, MethodAttributes attrs, ReturnReferenceExpression returnType, Type[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateMethodStringReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateMethod(String name, ReturnReferenceExpression returnType, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateMethodStringReturnReferenceExpressionMethodAttributesArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateMethod(String name, ReturnReferenceExpression returnType, MethodAttributes attributes, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreatePropertyPropertyInfo">
            <summary>设置 AbstractEasyType.CreateProperty(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreatePropertyStringType">
            <summary>设置 AbstractEasyType.CreateProperty(String name, Type returnType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateRuntimeConstructorArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateRuntimeConstructor(ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.CreateRuntimeMethodStringReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 AbstractEasyType.CreateRuntimeMethod(String name, ReturnReferenceExpression returnType, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.EnsureBuildersAreInAValidState">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.IncrementAndGetCounterValueGet">
            <summary>设置 AbstractEasyType.get_IncrementAndGetCounterValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimAbstractEasyType.AllInstances.MethodsGet">
            <summary>设置 AbstractEasyType.get_Methods() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCodeBuilder 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCodeBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.ConstructorTypeILGenerator">
            <summary>设置 ConstructorCodeBuilder.ConstructorCodeBuilder(Type baseType, ILGenerator generator) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.InvokeBaseConstructor">
            <summary>设置 ConstructorCodeBuilder.InvokeBaseConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.InvokeBaseConstructorConstructorInfo">
            <summary>设置 ConstructorCodeBuilder.InvokeBaseConstructor(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.InvokeBaseConstructorConstructorInfoArgumentReferenceArray">
            <summary>设置 ConstructorCodeBuilder.InvokeBaseConstructor(ConstructorInfo constructor, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.ObtainAvailableConstructor">
            <summary>设置 ConstructorCodeBuilder.ObtainAvailableConstructor() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.AllInstances.InvokeBaseConstructor">
            <summary>设置 ConstructorCodeBuilder.InvokeBaseConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.AllInstances.InvokeBaseConstructorConstructorInfo">
            <summary>设置 ConstructorCodeBuilder.InvokeBaseConstructor(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.AllInstances.InvokeBaseConstructorConstructorInfoArgumentReferenceArray">
            <summary>设置 ConstructorCodeBuilder.InvokeBaseConstructor(ConstructorInfo constructor, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCodeBuilder.AllInstances.ObtainAvailableConstructor">
            <summary>设置 ConstructorCodeBuilder.ObtainAvailableConstructor() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.AddEasyConstructor">
            <summary>设置 ConstructorCollection.Add(EasyConstructor constructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.Constructor">
            <summary>设置 ConstructorCollection.ConstructorCollection() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimConstructorCollection.AllInstances.AddEasyConstructor">
            <summary>设置 ConstructorCollection.Add(EasyConstructor constructor) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyCallable 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyCallable)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.CallmethodGet">
            <summary>设置 EasyCallable.get_Callmethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.ConstructorAbstractEasyTypeInt32ReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 EasyCallable.EasyCallable(AbstractEasyType type, Int32 id, ReturnReferenceExpression returnType, ArgumentReference[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.ConstructorGet">
            <summary>设置 EasyCallable.get_Constructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.GenerateCall">
            <summary>设置 EasyCallable.GenerateCall() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.GenerateCallableImplementation">
            <summary>设置 EasyCallable.GenerateCallableImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.GenerateConstructor">
            <summary>设置 EasyCallable.GenerateConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.GenerateInvoke">
            <summary>设置 EasyCallable.GenerateInvoke() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.GenerateTargetProperty">
            <summary>设置 EasyCallable.GenerateTargetProperty() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.IDGet">
            <summary>设置 EasyCallable.get_ID() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.InvokeMethodGet">
            <summary>设置 EasyCallable.get_InvokeMethod() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.CallmethodGet">
            <summary>设置 EasyCallable.get_Callmethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.ConstructorGet">
            <summary>设置 EasyCallable.get_Constructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.GenerateCall">
            <summary>设置 EasyCallable.GenerateCall() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.GenerateCallableImplementation">
            <summary>设置 EasyCallable.GenerateCallableImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.GenerateConstructor">
            <summary>设置 EasyCallable.GenerateConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.GenerateInvoke">
            <summary>设置 EasyCallable.GenerateInvoke() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.GenerateTargetProperty">
            <summary>设置 EasyCallable.GenerateTargetProperty() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.IDGet">
            <summary>设置 EasyCallable.get_ID() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyCallable.AllInstances.InvokeMethodGet">
            <summary>设置 EasyCallable.get_InvokeMethod() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyConstructor 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyConstructor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.Bind(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.BuilderGet">
            <summary>设置 EasyConstructor.get_Builder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.CodeBuilderGet">
            <summary>设置 EasyConstructor.get_CodeBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.Constructor">
            <summary>设置 EasyConstructor.EasyConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.ConstructorAbstractEasyTypeArgumentReferenceArray">
            <summary>设置 EasyConstructor.EasyConstructor(AbstractEasyType maintype, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.EnsureValidCodeBlock">
            <summary>设置 EasyConstructor.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.Generate">
            <summary>设置 EasyConstructor.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.MemberGet">
            <summary>设置 EasyConstructor.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.ReturnTypeGet">
            <summary>设置 EasyConstructor.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.AllInstances.BuilderGet">
            <summary>设置 EasyConstructor.get_Builder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.AllInstances.CodeBuilderGet">
            <summary>设置 EasyConstructor.get_CodeBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.AllInstances.EnsureValidCodeBlock">
            <summary>设置 EasyConstructor.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.AllInstances.Generate">
            <summary>设置 EasyConstructor.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.AllInstances.MemberGet">
            <summary>设置 EasyConstructor.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyConstructor.AllInstances.ReturnTypeGet">
            <summary>设置 EasyConstructor.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyDefaultConstructor 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyDefaultConstructor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.Bind(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.ConstructorAbstractEasyType">
            <summary>设置 EasyDefaultConstructor.EasyDefaultConstructor(AbstractEasyType maintype) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.EnsureValidCodeBlock">
            <summary>设置 EasyDefaultConstructor.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.Generate">
            <summary>设置 EasyDefaultConstructor.Generate() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.AllInstances.EnsureValidCodeBlock">
            <summary>设置 EasyDefaultConstructor.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyDefaultConstructor.AllInstances.Generate">
            <summary>设置 EasyDefaultConstructor.Generate() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyEvent 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyEvent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.Bind(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.ConstructorAbstractEasyTypeStringType">
            <summary>设置 EasyEvent.EasyEvent(AbstractEasyType maintype, String name, Type eventHandlerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.CreateAddOnMethodMethodAttributesTypeArray">
            <summary>设置 EasyEvent.CreateAddOnMethod(MethodAttributes atts, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.CreateRemoveOnMethodMethodAttributesTypeArray">
            <summary>设置 EasyEvent.CreateRemoveOnMethod(MethodAttributes atts, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.EnsureValidCodeBlock">
            <summary>设置 EasyEvent.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.Generate">
            <summary>设置 EasyEvent.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.MemberGet">
            <summary>设置 EasyEvent.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.NameGet">
            <summary>设置 EasyEvent.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.ReturnTypeGet">
            <summary>设置 EasyEvent.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances.CreateAddOnMethodMethodAttributesTypeArray">
            <summary>设置 EasyEvent.CreateAddOnMethod(MethodAttributes atts, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances.CreateRemoveOnMethodMethodAttributesTypeArray">
            <summary>设置 EasyEvent.CreateRemoveOnMethod(MethodAttributes atts, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances.EnsureValidCodeBlock">
            <summary>设置 EasyEvent.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances.Generate">
            <summary>设置 EasyEvent.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances.MemberGet">
            <summary>设置 EasyEvent.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances.NameGet">
            <summary>设置 EasyEvent.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyEvent.AllInstances.ReturnTypeGet">
            <summary>设置 EasyEvent.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.Bind(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.ArgumentsGet">
            <summary>设置 EasyMethod.get_Arguments() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.CodeBuilderGet">
            <summary>设置 EasyMethod.get_CodeBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.Constructor">
            <summary>设置 EasyMethod.EasyMethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.ConstructorAbstractEasyTypeStringMethodAttributesReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 EasyMethod.EasyMethod(AbstractEasyType maintype, String name, MethodAttributes attrs, ReturnReferenceExpression returnRef, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.ConstructorAbstractEasyTypeStringReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 EasyMethod.EasyMethod(AbstractEasyType maintype, String name, ReturnReferenceExpression returnRef, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.DefineParametersParameterInfoArray">
            <summary>设置 EasyMethod.DefineParameters(ParameterInfo[] info) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.EnsureValidCodeBlock">
            <summary>设置 EasyMethod.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.Generate">
            <summary>设置 EasyMethod.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.MemberGet">
            <summary>设置 EasyMethod.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.MethodBuilderGet">
            <summary>设置 EasyMethod.get_MethodBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.ReturnTypeGet">
            <summary>设置 EasyMethod.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.ArgumentsGet">
            <summary>设置 EasyMethod.get_Arguments() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.CodeBuilderGet">
            <summary>设置 EasyMethod.get_CodeBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.DefineParametersParameterInfoArray">
            <summary>设置 EasyMethod.DefineParameters(ParameterInfo[] info) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.EnsureValidCodeBlock">
            <summary>设置 EasyMethod.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.Generate">
            <summary>设置 EasyMethod.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.MemberGet">
            <summary>设置 EasyMethod.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.MethodBuilderGet">
            <summary>设置 EasyMethod.get_MethodBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyMethod.AllInstances.ReturnTypeGet">
            <summary>设置 EasyMethod.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyNested 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyNested)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested.ConstructorAbstractEasyTypeStringTypeTypeArrayReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 EasyNested.EasyNested(AbstractEasyType maintype, String name, Type baseType, Type[] interfaces, ReturnReferenceExpression returnType, ArgumentReference[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyNested.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyProperty 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyProperty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.Bind(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.ConstructorAbstractEasyTypeStringType">
            <summary>设置 EasyProperty.EasyProperty(AbstractEasyType maintype, String name, Type returnType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.CreateGetMethod">
            <summary>设置 EasyProperty.CreateGetMethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.CreateGetMethodMethodAttributesTypeArray">
            <summary>设置 EasyProperty.CreateGetMethod(MethodAttributes attrs, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.CreateSetMethodMethodAttributesTypeArray">
            <summary>设置 EasyProperty.CreateSetMethod(MethodAttributes attrs, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.CreateSetMethodType">
            <summary>设置 EasyProperty.CreateSetMethod(Type arg) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.EnsureValidCodeBlock">
            <summary>设置 EasyProperty.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.Generate">
            <summary>设置 EasyProperty.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.IndexParametersGet">
            <summary>设置 EasyProperty.get_IndexParameters() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.IndexParametersSetParameterInfoArray">
            <summary>设置 EasyProperty.set_IndexParameters(ParameterInfo[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.MemberGet">
            <summary>设置 EasyProperty.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.NameGet">
            <summary>设置 EasyProperty.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.ReturnTypeGet">
            <summary>设置 EasyProperty.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.CreateGetMethod">
            <summary>设置 EasyProperty.CreateGetMethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.CreateGetMethodMethodAttributesTypeArray">
            <summary>设置 EasyProperty.CreateGetMethod(MethodAttributes attrs, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.CreateSetMethodMethodAttributesTypeArray">
            <summary>设置 EasyProperty.CreateSetMethod(MethodAttributes attrs, Type[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.CreateSetMethodType">
            <summary>设置 EasyProperty.CreateSetMethod(Type arg) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.EnsureValidCodeBlock">
            <summary>设置 EasyProperty.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.Generate">
            <summary>设置 EasyProperty.Generate() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.IndexParametersGet">
            <summary>设置 EasyProperty.get_IndexParameters() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.IndexParametersSetParameterInfoArray">
            <summary>设置 EasyProperty.set_IndexParameters(ParameterInfo[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.MemberGet">
            <summary>设置 EasyProperty.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.NameGet">
            <summary>设置 EasyProperty.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyProperty.AllInstances.ReturnTypeGet">
            <summary>设置 EasyProperty.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyRuntimeConstructor 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyRuntimeConstructor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.Bind(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.ConstructorAbstractEasyTypeArgumentReferenceArray">
            <summary>设置 EasyRuntimeConstructor.EasyRuntimeConstructor(AbstractEasyType maintype, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.EnsureValidCodeBlock">
            <summary>设置 EasyRuntimeConstructor.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.Generate">
            <summary>设置 EasyRuntimeConstructor.Generate() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.AllInstances.EnsureValidCodeBlock">
            <summary>设置 EasyRuntimeConstructor.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeConstructor.AllInstances.Generate">
            <summary>设置 EasyRuntimeConstructor.Generate() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyRuntimeMethod 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyRuntimeMethod)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.Bind(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.ConstructorAbstractEasyTypeStringReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 EasyRuntimeMethod.EasyRuntimeMethod(AbstractEasyType maintype, String name, ReturnReferenceExpression returnRef, ArgumentReference[] arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.EnsureValidCodeBlock">
            <summary>设置 EasyRuntimeMethod.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.Generate">
            <summary>设置 EasyRuntimeMethod.Generate() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.AllInstances.EnsureValidCodeBlock">
            <summary>设置 EasyRuntimeMethod.EnsureValidCodeBlock() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyRuntimeMethod.AllInstances.Generate">
            <summary>设置 EasyRuntimeMethod.Generate() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyType 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyType)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.Constructor">
            <summary>设置 EasyType.EasyType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.ConstructorModuleScopeString">
            <summary>设置 EasyType.EasyType(ModuleScope modulescope, String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.ConstructorModuleScopeStringTypeTypeArray">
            <summary>设置 EasyType.EasyType(ModuleScope modulescope, String name, Type baseType, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.ConstructorModuleScopeStringTypeTypeArrayBoolean">
            <summary>设置 EasyType.EasyType(ModuleScope modulescope, String name, Type baseType, Type[] interfaces, Boolean serializable) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.CreateCallableReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 EasyType.CreateCallable(ReturnReferenceExpression returnType, ArgumentReference[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.CreateCallableTypeParameterInfoArray">
            <summary>设置 EasyType.CreateCallable(Type returnType, ParameterInfo[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.IsAssemblySignedType">
            <summary>设置 EasyType.IsAssemblySigned(Type baseType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.StaticConstructor">
            <summary>设置 EasyType.EasyType() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.AllInstances.CreateCallableReturnReferenceExpressionArgumentReferenceArray">
            <summary>设置 EasyType.CreateCallable(ReturnReferenceExpression returnType, ArgumentReference[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.AllInstances.CreateCallableTypeParameterInfoArray">
            <summary>设置 EasyType.CreateCallable(Type returnType, ParameterInfo[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEasyType.AllInstances.IsAssemblySignedType">
            <summary>设置 EasyType.IsAssemblySigned(Type baseType) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EventsCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EventsCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.AddEasyEvent">
            <summary>设置 EventsCollection.Add(EasyEvent easyEvent) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.Constructor">
            <summary>设置 EventsCollection.EventsCollection() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimEventsCollection.AllInstances.AddEasyEvent">
            <summary>设置 EventsCollection.Add(EasyEvent easyEvent) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.MethodCodeBuilder 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.MethodCodeBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.BuilderGet">
            <summary>设置 MethodCodeBuilder.get_Builder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.ConstructorTypeMethodBuilderILGenerator">
            <summary>设置 MethodCodeBuilder.MethodCodeBuilder(Type baseType, MethodBuilder methodbuilder, ILGenerator generator) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCodeBuilder.AllInstances.BuilderGet">
            <summary>设置 MethodCodeBuilder.get_Builder() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.MethodCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.MethodCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.AddEasyMethod">
            <summary>设置 MethodCollection.Add(EasyMethod method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.Constructor">
            <summary>设置 MethodCollection.MethodCollection() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimMethodCollection.AllInstances.AddEasyMethod">
            <summary>设置 MethodCollection.Add(EasyMethod method) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.NestedTypeCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.NestedTypeCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.AddEasyNested">
            <summary>设置 NestedTypeCollection.Add(EasyNested nested) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.Constructor">
            <summary>设置 NestedTypeCollection.NestedTypeCollection() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimNestedTypeCollection.AllInstances.AddEasyNested">
            <summary>设置 NestedTypeCollection.Add(EasyNested nested) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.PropertiesCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.PropertiesCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.AddEasyProperty">
            <summary>设置 PropertiesCollection.Add(EasyProperty property) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.Constructor">
            <summary>设置 PropertiesCollection.PropertiesCollection() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.ShimPropertiesCollection.AllInstances.AddEasyProperty">
            <summary>设置 PropertiesCollection.Add(EasyProperty property) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractCodeBuilder">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.AbstractCodeBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractCodeBuilder.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractCodeBuilder.InitializeStub">
            <summary>初始化 type StubAbstractCodeBuilder 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractCodeBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractCodeBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractCodeBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.BuildType">
            <summary>设置 AbstractEasyType.BuildType() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.BuildType01">
            <summary>设置 AbstractEasyType.BuildType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.EnsureBuildersAreInAValidState">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.EnsureBuildersAreInAValidState01">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.InitializeStub">
            <summary>初始化 type StubAbstractEasyType 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubAbstractEasyType.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCodeBuilder">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCodeBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCodeBuilder.#ctor(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCodeBuilder.InitializeStub">
            <summary>初始化 type StubConstructorCodeBuilder 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCodeBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCodeBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCodeBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.InitializeStub">
            <summary>初始化 type StubConstructorCollection 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnClear">
            <summary>设置 CollectionBase.OnClear() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnClear01">
            <summary>设置 CollectionBase.OnClear() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnClearComplete">
            <summary>设置 CollectionBase.OnClearComplete() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnClearComplete01">
            <summary>设置 CollectionBase.OnClearComplete() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnInsert(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnInsertCompleteInt32Object">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnInsertInt32Object">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnRemove(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnRemoveCompleteInt32Object">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnRemoveInt32Object">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnSetCompleteInt32ObjectObject">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnSetInt32ObjectObject">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnValidate(System.Object)">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.OnValidateObject">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubConstructorCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyCallable 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType,System.Int32,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnReferenceExpression,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.BuildType">
            <summary>设置 AbstractEasyType.BuildType() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.BuildType01">
            <summary>设置 AbstractEasyType.BuildType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.EnsureBuildersAreInAValidState">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.EnsureBuildersAreInAValidState01">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.InitializeStub">
            <summary>初始化 type StubEasyCallable 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyCallable.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyConstructor 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.CodeBuilderGet">
            <summary>设置 EasyConstructor.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.EnsureValidCodeBlock">
            <summary>设置 EasyConstructor.EnsureValidCodeBlock() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.EnsureValidCodeBlock01">
            <summary>设置 EasyConstructor.EnsureValidCodeBlock() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.Generate">
            <summary>设置 EasyConstructor.Generate() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.Generate01">
            <summary>设置 EasyConstructor.Generate() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.InitializeStub">
            <summary>初始化 type StubEasyConstructor 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.CodeBuilder">
            <summary>设置 EasyConstructor.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyConstructor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyEvent">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyEvent 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyEvent.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType,System.String,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyEvent.InitializeStub">
            <summary>初始化 type StubEasyEvent 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyEvent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyEvent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyEvent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.CodeBuilderGet">
            <summary>设置 EasyMethod.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.EnsureValidCodeBlock">
            <summary>设置 EasyMethod.EnsureValidCodeBlock() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.EnsureValidCodeBlock01">
            <summary>设置 EasyMethod.EnsureValidCodeBlock() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.Generate">
            <summary>设置 EasyMethod.Generate() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.Generate01">
            <summary>设置 EasyMethod.Generate() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.InitializeStub">
            <summary>初始化 type StubEasyMethod 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.CodeBuilder">
            <summary>设置 EasyMethod.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyMethod.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyNested 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType,System.String,System.Type,System.Type[],Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnReferenceExpression,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.BuildType">
            <summary>设置 AbstractEasyType.BuildType() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.BuildType01">
            <summary>设置 AbstractEasyType.BuildType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.EnsureBuildersAreInAValidState">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.EnsureBuildersAreInAValidState01">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.InitializeStub">
            <summary>初始化 type StubEasyNested 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyNested.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyProperty">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyProperty 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyProperty.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType,System.String,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyProperty.InitializeStub">
            <summary>初始化 type StubEasyProperty 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyProperty.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyProperty.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyProperty.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyRuntimeConstructor 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.CodeBuilderGet">
            <summary>设置 EasyConstructor.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.EnsureValidCodeBlock">
            <summary>设置 EasyRuntimeConstructor.EnsureValidCodeBlock() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.EnsureValidCodeBlock01">
            <summary>设置 EasyRuntimeConstructor.EnsureValidCodeBlock() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.Generate">
            <summary>设置 EasyRuntimeConstructor.Generate() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.Generate01">
            <summary>设置 EasyRuntimeConstructor.Generate() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.InitializeStub">
            <summary>初始化 type StubEasyRuntimeConstructor 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.CodeBuilder">
            <summary>设置 EasyConstructor.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeConstructor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyRuntimeMethod 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.AbstractEasyType,System.String,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnReferenceExpression,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.CodeBuilderGet">
            <summary>设置 EasyMethod.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.EnsureValidCodeBlock">
            <summary>设置 EasyRuntimeMethod.EnsureValidCodeBlock() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.EnsureValidCodeBlock01">
            <summary>设置 EasyRuntimeMethod.EnsureValidCodeBlock() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.Generate">
            <summary>设置 EasyRuntimeMethod.Generate() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.Generate01">
            <summary>设置 EasyRuntimeMethod.Generate() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.InitializeStub">
            <summary>初始化 type StubEasyRuntimeMethod 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.CodeBuilder">
            <summary>设置 EasyMethod.get_CodeBuilder() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyRuntimeMethod.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EasyType 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope,System.String,System.Type,System.Type[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope,System.String,System.Type,System.Type[],System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.BuildType">
            <summary>设置 AbstractEasyType.BuildType() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.BuildType01">
            <summary>设置 AbstractEasyType.BuildType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.EnsureBuildersAreInAValidState">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.EnsureBuildersAreInAValidState01">
            <summary>设置 AbstractEasyType.EnsureBuildersAreInAValidState() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.InitializeStub">
            <summary>初始化 type StubEasyType 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEasyType.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.EventsCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.InitializeStub">
            <summary>初始化 type StubEventsCollection 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnClear">
            <summary>设置 CollectionBase.OnClear() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnClear01">
            <summary>设置 CollectionBase.OnClear() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnClearComplete">
            <summary>设置 CollectionBase.OnClearComplete() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnClearComplete01">
            <summary>设置 CollectionBase.OnClearComplete() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnInsert(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnInsertCompleteInt32Object">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnInsertInt32Object">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnRemove(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnRemoveCompleteInt32Object">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnRemoveInt32Object">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnSetCompleteInt32ObjectObject">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnSetInt32ObjectObject">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnValidate(System.Object)">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.OnValidateObject">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubEventsCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.#ctor">
            <summary>初始化 type StubIEasyMember 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.cdp::Castle#DynamicProxy#Builder#CodeBuilder#IEasyMember#EnsureValidCodeBlock">
            <summary>设置 IEasyMember.EnsureValidCodeBlock() 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.cdp::Castle#DynamicProxy#Builder#CodeBuilder#IEasyMember#Generate">
            <summary>设置 IEasyMember.Generate() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.EnsureValidCodeBlock">
            <summary>设置 IEasyMember.EnsureValidCodeBlock() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.Generate">
            <summary>设置 IEasyMember.Generate() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.MemberGet">
            <summary>设置 IEasyMember.get_Member() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.ReturnTypeGet">
            <summary>设置 IEasyMember.get_ReturnType() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.cdp::Castle#DynamicProxy#Builder#CodeBuilder#IEasyMember#Member">
            <summary>设置 IEasyMember.get_Member() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubIEasyMember.cdp::Castle#DynamicProxy#Builder#CodeBuilder#IEasyMember#ReturnType">
            <summary>设置 IEasyMember.get_ReturnType() 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCodeBuilder">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.MethodCodeBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCodeBuilder.#ctor(System.Type,System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ILGenerator)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCodeBuilder.InitializeStub">
            <summary>初始化 type StubMethodCodeBuilder 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCodeBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCodeBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCodeBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.MethodCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.InitializeStub">
            <summary>初始化 type StubMethodCollection 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnClear">
            <summary>设置 CollectionBase.OnClear() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnClear01">
            <summary>设置 CollectionBase.OnClear() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnClearComplete">
            <summary>设置 CollectionBase.OnClearComplete() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnClearComplete01">
            <summary>设置 CollectionBase.OnClearComplete() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnInsert(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnInsertCompleteInt32Object">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnInsertInt32Object">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnRemove(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnRemoveCompleteInt32Object">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnRemoveInt32Object">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnSetCompleteInt32ObjectObject">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnSetInt32ObjectObject">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnValidate(System.Object)">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.OnValidateObject">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubMethodCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.NestedTypeCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.InitializeStub">
            <summary>初始化 type StubNestedTypeCollection 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnClear">
            <summary>设置 CollectionBase.OnClear() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnClear01">
            <summary>设置 CollectionBase.OnClear() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnClearComplete">
            <summary>设置 CollectionBase.OnClearComplete() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnClearComplete01">
            <summary>设置 CollectionBase.OnClearComplete() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnInsert(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnInsertCompleteInt32Object">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnInsertInt32Object">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnRemove(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnRemoveCompleteInt32Object">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnRemoveInt32Object">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnSetCompleteInt32ObjectObject">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnSetInt32ObjectObject">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnValidate(System.Object)">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.OnValidateObject">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubNestedTypeCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.PropertiesCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.InitializeStub">
            <summary>初始化 type StubPropertiesCollection 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnClear">
            <summary>设置 CollectionBase.OnClear() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnClear01">
            <summary>设置 CollectionBase.OnClear() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnClearComplete">
            <summary>设置 CollectionBase.OnClearComplete() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnClearComplete01">
            <summary>设置 CollectionBase.OnClearComplete() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnInsert(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnInsertCompleteInt32Object">
            <summary>设置 CollectionBase.OnInsertComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnInsertInt32Object">
            <summary>设置 CollectionBase.OnInsert(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnRemove(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnRemoveCompleteInt32Object">
            <summary>设置 CollectionBase.OnRemoveComplete(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnRemoveInt32Object">
            <summary>设置 CollectionBase.OnRemove(Int32 index, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnSetCompleteInt32ObjectObject">
            <summary>设置 CollectionBase.OnSetComplete(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnSetInt32ObjectObject">
            <summary>设置 CollectionBase.OnSet(Int32 index, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnValidate(System.Object)">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.OnValidateObject">
            <summary>设置 CollectionBase.OnValidate(Object value) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Fakes.StubPropertiesCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AddressOfReferenceExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AddressOfReferenceExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.ConstructorReference">
            <summary>设置 AddressOfReferenceExpression.AddressOfReferenceExpression(Reference reference) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.EmitIEasyMemberILGenerator">
            <summary>设置 AddressOfReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAddressOfReferenceExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 AddressOfReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.ConstructorType">
            <summary>设置 ArgumentReference.ArgumentReference(Type argumentType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 ArgumentReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.LoadReferenceILGenerator">
            <summary>设置 ArgumentReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.PositionGet">
            <summary>设置 ArgumentReference.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.PositionSetInt32">
            <summary>设置 ArgumentReference.set_Position(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.StoreReferenceILGenerator">
            <summary>设置 ArgumentReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 ArgumentReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.AllInstances.LoadReferenceILGenerator">
            <summary>设置 ArgumentReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.AllInstances.PositionGet">
            <summary>设置 ArgumentReference.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.AllInstances.PositionSetInt32">
            <summary>设置 ArgumentReference.set_Position(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimArgumentReference.AllInstances.StoreReferenceILGenerator">
            <summary>设置 ArgumentReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AssignArrayStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AssignArrayStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.ConstructorReferenceInt32Expression">
            <summary>设置 AssignArrayStatement.AssignArrayStatement(Reference targetArray, Int32 targetPosition, Expression value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.EmitIEasyMemberILGenerator">
            <summary>设置 AssignArrayStatement.Emit(IEasyMember member, ILGenerator il) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignArrayStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 AssignArrayStatement.Emit(IEasyMember member, ILGenerator il) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AssignStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AssignStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.ConstructorReferenceExpression">
            <summary>设置 AssignStatement.AssignStatement(Reference target, Expression expression) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.EmitIEasyMemberILGenerator">
            <summary>设置 AssignStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimAssignStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 AssignStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.BinaryExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.BinaryExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.ConstructorOpCodeExpressionExpression">
            <summary>设置 BinaryExpression.BinaryExpression(OpCode operation, Expression left, Expression right) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.EmitIEasyMemberILGenerator">
            <summary>设置 BinaryExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.StaticConstructor">
            <summary>设置 BinaryExpression.BinaryExpression() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimBinaryExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 BinaryExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConditionExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConditionExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.AddFalseStatementStatement">
            <summary>设置 ConditionExpression.AddFalseStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.AddTrueStatementStatement">
            <summary>设置 ConditionExpression.AddTrueStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.ConstructorExpression">
            <summary>设置 ConditionExpression.ConditionExpression(Expression left) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.ConstructorOpCodeExpression">
            <summary>设置 ConditionExpression.ConditionExpression(OpCode operation, Expression left) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.ConstructorOpCodeExpressionExpression">
            <summary>设置 ConditionExpression.ConditionExpression(OpCode operation, Expression left, Expression right) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ConditionExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.AllInstances.AddFalseStatementStatement">
            <summary>设置 ConditionExpression.AddFalseStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.AllInstances.AddTrueStatementStatement">
            <summary>设置 ConditionExpression.AddTrueStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConditionExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 ConditionExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConstructorInvocationExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConstructorInvocationExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.ConstructorConstructorInfoExpressionArray">
            <summary>设置 ConstructorInvocationExpression.ConstructorInvocationExpression(ConstructorInfo method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ConstructorInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConstructorInvocationExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 ConstructorInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConvertExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConvertExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.ConstructorTypeExpression">
            <summary>设置 ConvertExpression.ConvertExpression(Type targetType, Expression right) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.ConstructorTypeTypeExpression">
            <summary>设置 ConvertExpression.ConvertExpression(Type targetType, Type fromType, Expression right) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.EmitCastIfNeededTypeTypeILGenerator">
            <summary>设置 ConvertExpression.EmitCastIfNeeded(Type from, Type target, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ConvertExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.AllInstances.EmitCastIfNeededTypeTypeILGenerator">
            <summary>设置 ConvertExpression.EmitCastIfNeeded(Type from, Type target, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimConvertExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 ConvertExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression.Constructor">
            <summary>设置 Expression.Expression() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ExpressionStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ExpressionStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.ConstructorExpression">
            <summary>设置 ExpressionStatement.ExpressionStatement(Expression expression) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.EmitIEasyMemberILGenerator">
            <summary>设置 ExpressionStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimExpressionStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 ExpressionStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.FieldReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.FieldReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.ConstructorFieldBuilder">
            <summary>设置 FieldReference.FieldReference(FieldBuilder fieldbuilder) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 FieldReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.LoadReferenceILGenerator">
            <summary>设置 FieldReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.ReferenceGet">
            <summary>设置 FieldReference.get_Reference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.StoreReferenceILGenerator">
            <summary>设置 FieldReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 FieldReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.AllInstances.LoadReferenceILGenerator">
            <summary>设置 FieldReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.AllInstances.ReferenceGet">
            <summary>设置 FieldReference.get_Reference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFieldReference.AllInstances.StoreReferenceILGenerator">
            <summary>设置 FieldReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.FixedReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.FixedReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.ConstructorObject">
            <summary>设置 FixedReference.FixedReference(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.GenerateILGenerator">
            <summary>设置 FixedReference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 FixedReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.LoadReferenceILGenerator">
            <summary>设置 FixedReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.StoreReferenceILGenerator">
            <summary>设置 FixedReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.AllInstances.GenerateILGenerator">
            <summary>设置 FixedReference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 FixedReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.AllInstances.LoadReferenceILGenerator">
            <summary>设置 FixedReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimFixedReference.AllInstances.StoreReferenceILGenerator">
            <summary>设置 FixedReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.GotoStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.GotoStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.ConstructorLabelReference">
            <summary>设置 GotoStatement.GotoStatement(LabelReference label) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.EmitIEasyMemberILGenerator">
            <summary>设置 GotoStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimGotoStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 GotoStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IndirectReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IndirectReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.ConstructorTypeReference">
            <summary>设置 IndirectReference.IndirectReference(TypeReference byRefReference) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 IndirectReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.LoadReferenceILGenerator">
            <summary>设置 IndirectReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.StoreReferenceILGenerator">
            <summary>设置 IndirectReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.WrapIfByRefTypeReference">
            <summary>设置 IndirectReference.WrapIfByRef(TypeReference reference) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.WrapIfByRefTypeReferenceArray">
            <summary>设置 IndirectReference.WrapIfByRef(TypeReference[] references) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 IndirectReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.AllInstances.LoadReferenceILGenerator">
            <summary>设置 IndirectReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimIndirectReference.AllInstances.StoreReferenceILGenerator">
            <summary>设置 IndirectReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LabelReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LabelReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.Constructor">
            <summary>设置 LabelReference.LabelReference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.GenerateILGenerator">
            <summary>设置 LabelReference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 LabelReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.LoadReferenceILGenerator">
            <summary>设置 LabelReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.ReferenceGet">
            <summary>设置 LabelReference.get_Reference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.StoreReferenceILGenerator">
            <summary>设置 LabelReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.ToExpression">
            <summary>设置 LabelReference.ToExpression() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.AllInstances.GenerateILGenerator">
            <summary>设置 LabelReference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 LabelReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.AllInstances.LoadReferenceILGenerator">
            <summary>设置 LabelReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.AllInstances.ReferenceGet">
            <summary>设置 LabelReference.get_Reference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.AllInstances.StoreReferenceILGenerator">
            <summary>设置 LabelReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLabelReference.AllInstances.ToExpression">
            <summary>设置 LabelReference.ToExpression() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LoadRefArrayElementExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LoadRefArrayElementExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.ConstructorFixedReferenceReference">
            <summary>设置 LoadRefArrayElementExpression.LoadRefArrayElementExpression(FixedReference index, Reference arrayReference) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.ConstructorInt32Reference">
            <summary>设置 LoadRefArrayElementExpression.LoadRefArrayElementExpression(Int32 index, Reference arrayReference) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.EmitIEasyMemberILGenerator">
            <summary>设置 LoadRefArrayElementExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLoadRefArrayElementExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 LoadRefArrayElementExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LocalReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LocalReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.ConstructorType">
            <summary>设置 LocalReference.LocalReference(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.GenerateILGenerator">
            <summary>设置 LocalReference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 LocalReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.LoadReferenceILGenerator">
            <summary>设置 LocalReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.StoreReferenceILGenerator">
            <summary>设置 LocalReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.AllInstances.GenerateILGenerator">
            <summary>设置 LocalReference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 LocalReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.AllInstances.LoadReferenceILGenerator">
            <summary>设置 LocalReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLocalReference.AllInstances.StoreReferenceILGenerator">
            <summary>设置 LocalReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LockBlockExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LockBlockExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.AddStatementStatement">
            <summary>设置 LockBlockExpression.AddStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.ConstructorReference">
            <summary>设置 LockBlockExpression.LockBlockExpression(Reference syncLockSource) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.EmitIEasyMemberILGenerator">
            <summary>设置 LockBlockExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.AllInstances.AddStatementStatement">
            <summary>设置 LockBlockExpression.AddStatement(Statement stmt) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimLockBlockExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 LockBlockExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MarkBranchStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MarkBranchStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.ConstructorLabelReference">
            <summary>设置 MarkBranchStatement.MarkBranchStatement(LabelReference label) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.EmitIEasyMemberILGenerator">
            <summary>设置 MarkBranchStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMarkBranchStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 MarkBranchStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodInvocationExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodInvocationExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.ConstructorEasyMethodExpressionArray">
            <summary>设置 MethodInvocationExpression.MethodInvocationExpression(EasyMethod method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.ConstructorMethodInfoExpressionArray">
            <summary>设置 MethodInvocationExpression.MethodInvocationExpression(MethodInfo method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.ConstructorReferenceEasyMethodExpressionArray">
            <summary>设置 MethodInvocationExpression.MethodInvocationExpression(Reference owner, EasyMethod method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.ConstructorReferenceMethodInfoExpressionArray">
            <summary>设置 MethodInvocationExpression.MethodInvocationExpression(Reference owner, MethodInfo method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.EmitIEasyMemberILGenerator">
            <summary>设置 MethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodInvocationExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 MethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodPointerExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodPointerExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.ConstructorMethodInfo">
            <summary>设置 MethodPointerExpression.MethodPointerExpression(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.ConstructorReferenceMethodInfo">
            <summary>设置 MethodPointerExpression.MethodPointerExpression(Reference owner, MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.EmitIEasyMemberILGenerator">
            <summary>设置 MethodPointerExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodPointerExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 MethodPointerExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodTokenExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodTokenExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.ConstructorMethodInfo">
            <summary>设置 MethodTokenExpression.MethodTokenExpression(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.EmitIEasyMemberILGenerator">
            <summary>设置 MethodTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimMethodTokenExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 MethodTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NewArrayExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NewArrayExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.ConstructorInt32Type">
            <summary>设置 NewArrayExpression.NewArrayExpression(Int32 size, Type arrayType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.EmitIEasyMemberILGenerator">
            <summary>设置 NewArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewArrayExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 NewArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NewInstanceExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NewInstanceExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.ConstructorConstructorInfoExpressionArray">
            <summary>设置 NewInstanceExpression.NewInstanceExpression(ConstructorInfo constructor, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.ConstructorEasyCallableExpressionArray">
            <summary>设置 NewInstanceExpression.NewInstanceExpression(EasyCallable callable, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.ConstructorTypeTypeArrayExpressionArray">
            <summary>设置 NewInstanceExpression.NewInstanceExpression(Type target, Type[] constructor_args, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.EmitIEasyMemberILGenerator">
            <summary>设置 NewInstanceExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNewInstanceExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 NewInstanceExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NopStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NopStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.Constructor">
            <summary>设置 NopStatement.NopStatement() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.EmitIEasyMemberILGenerator">
            <summary>设置 NopStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNopStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 NopStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NullExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NullExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.Constructor">
            <summary>设置 NullExpression.NullExpression() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.EmitIEasyMemberILGenerator">
            <summary>设置 NullExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.StaticConstructor">
            <summary>设置 NullExpression.NullExpression() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimNullExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 NullExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.PopValueFromStackStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.PopValueFromStackStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.Constructor">
            <summary>设置 PopValueFromStackStatement.PopValueFromStackStatement() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.EmitIEasyMemberILGenerator">
            <summary>设置 PopValueFromStackStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimPopValueFromStackStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 PopValueFromStackStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.Constructor">
            <summary>设置 Reference.Reference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.ConstructorReference">
            <summary>设置 Reference.Reference(Reference owner) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.OwnerReferenceGet">
            <summary>设置 Reference.get_OwnerReference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.OwnerReferenceSetReference">
            <summary>设置 Reference.set_OwnerReference(Reference value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.AllInstances.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.AllInstances.OwnerReferenceGet">
            <summary>设置 Reference.get_OwnerReference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.AllInstances.OwnerReferenceSetReference">
            <summary>设置 Reference.set_OwnerReference(Reference value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.AllInstances.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReference.AllInstances.ToExpression">
            <summary>设置 Reference.ToExpression() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReferenceExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReferenceExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.ConstructorReference">
            <summary>设置 ReferenceExpression.ReferenceExpression(Reference reference) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferenceExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 ReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReferencesToObjectArrayExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReferencesToObjectArrayExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.ConstructorTypeReferenceArray">
            <summary>设置 ReferencesToObjectArrayExpression.ReferencesToObjectArrayExpression(TypeReference[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ReferencesToObjectArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReferencesToObjectArrayExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 ReferencesToObjectArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnReferenceExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnReferenceExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.ConstructorType">
            <summary>设置 ReturnReferenceExpression.ReturnReferenceExpression(Type argumentType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.LoadAddressOfReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.LoadReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.StoreReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.AllInstances.LoadReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnReferenceExpression.AllInstances.StoreReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnStatement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnStatement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.Constructor">
            <summary>设置 ReturnStatement.ReturnStatement() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.ConstructorExpression">
            <summary>设置 ReturnStatement.ReturnStatement(Expression expression) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.ConstructorReference">
            <summary>设置 ReturnStatement.ReturnStatement(Reference reference) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.EmitIEasyMemberILGenerator">
            <summary>设置 ReturnStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimReturnStatement.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 ReturnStatement.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.SelfReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.SelfReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.Constructor">
            <summary>设置 SelfReference.SelfReference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 SelfReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.LoadReferenceILGenerator">
            <summary>设置 SelfReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.StaticConstructor">
            <summary>设置 SelfReference.SelfReference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.StoreReferenceILGenerator">
            <summary>设置 SelfReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.AllInstances.LoadAddressOfReferenceILGenerator">
            <summary>设置 SelfReference.LoadAddressOfReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.AllInstances.LoadReferenceILGenerator">
            <summary>设置 SelfReference.LoadReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimSelfReference.AllInstances.StoreReferenceILGenerator">
            <summary>设置 SelfReference.StoreReference(ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Statement 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Statement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement.Constructor">
            <summary>设置 Statement.Statement() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimStatement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.ConstructorReferenceType">
            <summary>设置 TypeReference.TypeReference(Reference owner, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.ConstructorType">
            <summary>设置 TypeReference.TypeReference(Type argumentType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.TypeGet">
            <summary>设置 TypeReference.get_Type() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeReference.AllInstances.TypeGet">
            <summary>设置 TypeReference.get_Type() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeTokenExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeTokenExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.ConstructorType">
            <summary>设置 TypeTokenExpression.TypeTokenExpression(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.EmitIEasyMemberILGenerator">
            <summary>设置 TypeTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimTypeTokenExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 TypeTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.VirtualMethodInvocationExpression 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.VirtualMethodInvocationExpression)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.Bind(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.ConstructorEasyMethodExpressionArray">
            <summary>设置 VirtualMethodInvocationExpression.VirtualMethodInvocationExpression(EasyMethod method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.ConstructorMethodInfoExpressionArray">
            <summary>设置 VirtualMethodInvocationExpression.VirtualMethodInvocationExpression(MethodInfo method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.ConstructorReferenceEasyMethodExpressionArray">
            <summary>设置 VirtualMethodInvocationExpression.VirtualMethodInvocationExpression(Reference owner, EasyMethod method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.ConstructorReferenceMethodInfoExpressionArray">
            <summary>设置 VirtualMethodInvocationExpression.VirtualMethodInvocationExpression(Reference owner, MethodInfo method, Expression[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.EmitIEasyMemberILGenerator">
            <summary>设置 VirtualMethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.ShimVirtualMethodInvocationExpression.AllInstances.EmitIEasyMemberILGenerator">
            <summary>设置 VirtualMethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AddressOfReferenceExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 AddressOfReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression.EmitIEasyMemberILGenerator">
            <summary>设置 AddressOfReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression.InitializeStub">
            <summary>初始化 type StubAddressOfReferenceExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAddressOfReferenceExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.InitializeStub">
            <summary>初始化 type StubArgumentReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 ArgumentReference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 ArgumentReference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 ArgumentReference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.LoadReferenceILGenerator">
            <summary>设置 ArgumentReference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 ArgumentReference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.StoreReferenceILGenerator">
            <summary>设置 ArgumentReference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubArgumentReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AssignArrayStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,System.Int32,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 AssignArrayStatement.Emit(IEasyMember member, ILGenerator il) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement.EmitIEasyMemberILGenerator">
            <summary>设置 AssignArrayStatement.Emit(IEasyMember member, ILGenerator il) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement.InitializeStub">
            <summary>初始化 type StubAssignArrayStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignArrayStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.AssignStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 AssignStatement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement.EmitIEasyMemberILGenerator">
            <summary>设置 AssignStatement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement.InitializeStub">
            <summary>初始化 type StubAssignStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubAssignStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.BinaryExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression.#ctor(System.Reflection.Emit.OpCode,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 BinaryExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression.EmitIEasyMemberILGenerator">
            <summary>设置 BinaryExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression.InitializeStub">
            <summary>初始化 type StubBinaryExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubBinaryExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConditionExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.#ctor(System.Reflection.Emit.OpCode,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.#ctor(System.Reflection.Emit.OpCode,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 ConditionExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ConditionExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.InitializeStub">
            <summary>初始化 type StubConditionExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConditionExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConstructorInvocationExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression.#ctor(System.Reflection.ConstructorInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 ConstructorInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ConstructorInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression.InitializeStub">
            <summary>初始化 type StubConstructorInvocationExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConstructorInvocationExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ConvertExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.#ctor(System.Type,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.#ctor(System.Type,System.Type,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 ConvertExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ConvertExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.InitializeStub">
            <summary>初始化 type StubConvertExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubConvertExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 Expression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression.EmitIEasyMemberILGenerator">
            <summary>设置 Expression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression.InitializeStub">
            <summary>初始化 type StubExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ExpressionStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 ExpressionStatement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement.EmitIEasyMemberILGenerator">
            <summary>设置 ExpressionStatement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement.InitializeStub">
            <summary>初始化 type StubExpressionStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubExpressionStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.FieldReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.#ctor(System.Reflection.Emit.FieldBuilder)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.InitializeStub">
            <summary>初始化 type StubFieldReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 FieldReference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 FieldReference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 FieldReference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.LoadReferenceILGenerator">
            <summary>设置 FieldReference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 FieldReference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.StoreReferenceILGenerator">
            <summary>设置 FieldReference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFieldReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.FixedReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.#ctor(System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 FixedReference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.GenerateILGenerator">
            <summary>设置 FixedReference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.InitializeStub">
            <summary>初始化 type StubFixedReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 FixedReference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 FixedReference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 FixedReference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.LoadReferenceILGenerator">
            <summary>设置 FixedReference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 FixedReference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.StoreReferenceILGenerator">
            <summary>设置 FixedReference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubFixedReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.GotoStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LabelReference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 GotoStatement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement.EmitIEasyMemberILGenerator">
            <summary>设置 GotoStatement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement.InitializeStub">
            <summary>初始化 type StubGotoStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubGotoStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIEmitter">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IEmitter 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIEmitter.#ctor">
            <summary>初始化 type StubIEmitter 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIEmitter.cdp::Castle#DynamicProxy#Builder#CodeBuilder#SimpleAST#IEmitter#Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 IEmitter.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIEmitter.EmitIEasyMemberILGenerator">
            <summary>设置 IEmitter.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.IndirectReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeReference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.InitializeStub">
            <summary>初始化 type StubIndirectReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 IndirectReference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 IndirectReference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 IndirectReference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.LoadReferenceILGenerator">
            <summary>设置 IndirectReference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 IndirectReference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.StoreReferenceILGenerator">
            <summary>设置 IndirectReference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubIndirectReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LabelReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LabelReference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.GenerateILGenerator">
            <summary>设置 LabelReference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.InitializeStub">
            <summary>初始化 type StubLabelReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LabelReference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 LabelReference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LabelReference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.LoadReferenceILGenerator">
            <summary>设置 LabelReference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LabelReference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.StoreReferenceILGenerator">
            <summary>设置 LabelReference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.ToExpression">
            <summary>设置 LabelReference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.ToExpression01">
            <summary>设置 LabelReference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLabelReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LoadRefArrayElementExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.FixedReference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.#ctor(System.Int32,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 LoadRefArrayElementExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.EmitIEasyMemberILGenerator">
            <summary>设置 LoadRefArrayElementExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.InitializeStub">
            <summary>初始化 type StubLoadRefArrayElementExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLoadRefArrayElementExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LocalReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LocalReference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.GenerateILGenerator">
            <summary>设置 LocalReference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.InitializeStub">
            <summary>初始化 type StubLocalReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LocalReference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 LocalReference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LocalReference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.LoadReferenceILGenerator">
            <summary>设置 LocalReference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 LocalReference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.StoreReferenceILGenerator">
            <summary>设置 LocalReference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLocalReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LockBlockExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 LockBlockExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression.EmitIEasyMemberILGenerator">
            <summary>设置 LockBlockExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression.InitializeStub">
            <summary>初始化 type StubLockBlockExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubLockBlockExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MarkBranchStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.LabelReference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 MarkBranchStatement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement.EmitIEasyMemberILGenerator">
            <summary>设置 MarkBranchStatement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement.InitializeStub">
            <summary>初始化 type StubMarkBranchStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMarkBranchStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodInvocationExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.#ctor(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 MethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.EmitIEasyMemberILGenerator">
            <summary>设置 MethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.InitializeStub">
            <summary>初始化 type StubMethodInvocationExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodInvocationExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodPointerExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.#ctor(System.Reflection.MethodInfo)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,System.Reflection.MethodInfo)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 MethodPointerExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.EmitIEasyMemberILGenerator">
            <summary>设置 MethodPointerExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.InitializeStub">
            <summary>初始化 type StubMethodPointerExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodPointerExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.MethodTokenExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression.#ctor(System.Reflection.MethodInfo)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 MethodTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression.EmitIEasyMemberILGenerator">
            <summary>设置 MethodTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression.InitializeStub">
            <summary>初始化 type StubMethodTokenExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubMethodTokenExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NewArrayExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression.#ctor(System.Int32,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 NewArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression.EmitIEasyMemberILGenerator">
            <summary>设置 NewArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression.InitializeStub">
            <summary>初始化 type StubNewArrayExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewArrayExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NewInstanceExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyCallable,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.#ctor(System.Reflection.ConstructorInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.#ctor(System.Type,System.Type[],Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 NewInstanceExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.EmitIEasyMemberILGenerator">
            <summary>设置 NewInstanceExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.InitializeStub">
            <summary>初始化 type StubNewInstanceExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNewInstanceExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NopStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 NopStatement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement.EmitIEasyMemberILGenerator">
            <summary>设置 NopStatement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement.InitializeStub">
            <summary>初始化 type StubNopStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNopStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.NullExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 NullExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression.EmitIEasyMemberILGenerator">
            <summary>设置 NullExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression.InitializeStub">
            <summary>初始化 type StubNullExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubNullExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.PopValueFromStackStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 PopValueFromStackStatement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement.EmitIEasyMemberILGenerator">
            <summary>设置 PopValueFromStackStatement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement.InitializeStub">
            <summary>初始化 type StubPopValueFromStackStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubPopValueFromStackStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.InitializeStub">
            <summary>初始化 type StubReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 Reference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.LoadReferenceILGenerator">
            <summary>设置 Reference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.StoreReferenceILGenerator">
            <summary>设置 Reference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReferenceExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 ReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ReferenceExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression.InitializeStub">
            <summary>初始化 type StubReferenceExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferenceExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReferencesToObjectArrayExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeReference[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 ReferencesToObjectArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression.EmitIEasyMemberILGenerator">
            <summary>设置 ReferencesToObjectArrayExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression.InitializeStub">
            <summary>初始化 type StubReferencesToObjectArrayExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReferencesToObjectArrayExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnReferenceExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.InitializeStub">
            <summary>初始化 type StubReturnReferenceExpression 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 ReturnReferenceExpression.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.LoadAddressOfReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 ReturnReferenceExpression.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.LoadReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 ReturnReferenceExpression.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.StoreReferenceILGenerator">
            <summary>设置 ReturnReferenceExpression.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnReferenceExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ReturnStatement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 ReturnStatement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.EmitIEasyMemberILGenerator">
            <summary>设置 ReturnStatement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.InitializeStub">
            <summary>初始化 type StubReturnStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubReturnStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.SelfReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.InitializeStub">
            <summary>初始化 type StubSelfReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 SelfReference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 SelfReference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 SelfReference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.LoadReferenceILGenerator">
            <summary>设置 SelfReference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 SelfReference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.StoreReferenceILGenerator">
            <summary>设置 SelfReference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubSelfReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Statement 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 Statement.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement.EmitIEasyMemberILGenerator">
            <summary>设置 Statement.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement.InitializeStub">
            <summary>初始化 type StubStatement 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubStatement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.Generate(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.GenerateILGenerator">
            <summary>设置 Reference.Generate(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.InitializeStub">
            <summary>初始化 type StubTypeReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.LoadAddressOfReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.LoadAddressOfReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.LoadAddressOfReferenceILGenerator">
            <summary>设置 Reference.LoadAddressOfReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.LoadReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.LoadReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.LoadReferenceILGenerator">
            <summary>设置 Reference.LoadReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.StoreReference(System.Reflection.Emit.ILGenerator)">
            <summary>设置 Reference.StoreReference(ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.StoreReferenceILGenerator">
            <summary>设置 Reference.StoreReference(ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.ToAddressOfExpression">
            <summary>设置 Reference.ToAddressOfExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.ToAddressOfExpression01">
            <summary>设置 Reference.ToAddressOfExpression() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.ToExpression">
            <summary>设置 Reference.ToExpression() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.ToExpression01">
            <summary>设置 Reference.ToExpression() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.TypeTokenExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 TypeTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression.EmitIEasyMemberILGenerator">
            <summary>设置 TypeTokenExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression.InitializeStub">
            <summary>初始化 type StubTypeTokenExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubTypeTokenExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.VirtualMethodInvocationExpression 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.#ctor(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Expression[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.Emit(Castle.DynamicProxy.Builder.CodeBuilder.IEasyMember,System.Reflection.Emit.ILGenerator)">
            <summary>设置 VirtualMethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.EmitIEasyMemberILGenerator">
            <summary>设置 VirtualMethodInvocationExpression.Emit(IEasyMember member, ILGenerator gen) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.InitializeStub">
            <summary>初始化 type StubVirtualMethodInvocationExpression 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Fakes.StubVirtualMethodInvocationExpression.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.Utils.ArgumentsUtil 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.Utils.ArgumentsUtil)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.Constructor">
            <summary>设置 ArgumentsUtil.ArgumentsUtil() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.ConvertArgumentReferenceToExpressionArgumentReferenceArray">
            <summary>设置 ArgumentsUtil.ConvertArgumentReferenceToExpression(ArgumentReference[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.ConvertToArgumentReferenceParameterInfoArray">
            <summary>设置 ArgumentsUtil.ConvertToArgumentReference(ParameterInfo[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.ConvertToArgumentReferenceTypeArray">
            <summary>设置 ArgumentsUtil.ConvertToArgumentReference(Type[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.EmitLoadOwnerAndReferenceReferenceILGenerator">
            <summary>设置 ArgumentsUtil.EmitLoadOwnerAndReference(Reference reference, ILGenerator il) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.InitializeAndConvertArgumentReferenceArray">
            <summary>设置 ArgumentsUtil.InitializeAndConvert(ArgumentReference[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.InitializeArgumentsByPositionArgumentReferenceArray">
            <summary>设置 ArgumentsUtil.InitializeArgumentsByPosition(ArgumentReference[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimArgumentsUtil.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.Utils.LdcOpCodesDictionary 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.Utils.LdcOpCodesDictionary)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.Constructor">
            <summary>设置 LdcOpCodesDictionary.LdcOpCodesDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.EmptyOpCodeGet">
            <summary>设置 LdcOpCodesDictionary.get_EmptyOpCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.InstanceGet">
            <summary>设置 LdcOpCodesDictionary.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.ItemGetType">
            <summary>设置 LdcOpCodesDictionary.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.StaticConstructor">
            <summary>设置 LdcOpCodesDictionary.LdcOpCodesDictionary() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdcOpCodesDictionary.AllInstances.ItemGetType">
            <summary>设置 LdcOpCodesDictionary.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.Utils.LdindOpCodesDictionary 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.Utils.LdindOpCodesDictionary)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.Constructor">
            <summary>设置 LdindOpCodesDictionary.LdindOpCodesDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.EmptyOpCodeGet">
            <summary>设置 LdindOpCodesDictionary.get_EmptyOpCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.InstanceGet">
            <summary>设置 LdindOpCodesDictionary.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.ItemGetType">
            <summary>设置 LdindOpCodesDictionary.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.StaticConstructor">
            <summary>设置 LdindOpCodesDictionary.LdindOpCodesDictionary() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimLdindOpCodesDictionary.AllInstances.ItemGetType">
            <summary>设置 LdindOpCodesDictionary.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.Utils.StindOpCodesDictionary 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.#ctor(Castle.DynamicProxy.Builder.CodeBuilder.Utils.StindOpCodesDictionary)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.Constructor">
            <summary>设置 StindOpCodesDictionary.StindOpCodesDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.EmptyOpCodeGet">
            <summary>设置 StindOpCodesDictionary.get_EmptyOpCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.InstanceGet">
            <summary>设置 StindOpCodesDictionary.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.ItemGetType">
            <summary>设置 StindOpCodesDictionary.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.StaticConstructor">
            <summary>设置 StindOpCodesDictionary.StindOpCodesDictionary() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.ShimStindOpCodesDictionary.AllInstances.ItemGetType">
            <summary>设置 StindOpCodesDictionary.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.StubArgumentsUtil">
            <summary>Castle.DynamicProxy.Builder.CodeBuilder.Utils.ArgumentsUtil 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.StubArgumentsUtil.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.StubArgumentsUtil.InitializeStub">
            <summary>初始化 type StubArgumentsUtil 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.StubArgumentsUtil.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.StubArgumentsUtil.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeBuilder.Utils.Fakes.StubArgumentsUtil.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.BaseCodeGenerator 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.BaseCodeGenerator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AddISerializableTypeArray">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.CacheFieldGet">
            <summary>设置 BaseCodeGenerator.get_CacheField() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ConstructorModuleScope">
            <summary>设置 BaseCodeGenerator.BaseCodeGenerator(ModuleScope moduleScope) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ConstructorModuleScopeGeneratorContext">
            <summary>设置 BaseCodeGenerator.BaseCodeGenerator(ModuleScope moduleScope, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ContextGet">
            <summary>设置 BaseCodeGenerator.get_Context() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.CreatePropertyPropertyInfo">
            <summary>设置 BaseCodeGenerator.CreateProperty(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.CreateType">
            <summary>设置 BaseCodeGenerator.CreateType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.CreateTypeBuilderStringTypeTypeArray">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 BaseCodeGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.FilterTypeArray">
            <summary>设置 BaseCodeGenerator.Filter(Type[] mixinInterfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateCallbackMethodIfNecessaryMethodInfoReference">
            <summary>设置 BaseCodeGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateConstructor">
            <summary>设置 BaseCodeGenerator.GenerateConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateConstructorCodeConstructorCodeBuilderReferenceReferenceReference">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateFields">
            <summary>设置 BaseCodeGenerator.GenerateFields() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateInterfaceImplementationTypeArray">
            <summary>设置 BaseCodeGenerator.GenerateInterfaceImplementation(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateMethodImplementationMethodInfoEasyPropertyArray">
            <summary>设置 BaseCodeGenerator.GenerateMethodImplementation(MethodInfo method, EasyProperty[] properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateMethodsTypeEasyPropertyArray">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GeneratePropertiesType">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GenerateTypeImplementationTypeBoolean">
            <summary>设置 BaseCodeGenerator.GenerateTypeImplementation(Type type, Boolean ignoreInterfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GetCorrectMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.GetCorrectMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GetFromCacheTypeTypeArray">
            <summary>设置 BaseCodeGenerator.GetFromCache(Type baseClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.GetPseudoInvocationTargetMethodInfo">
            <summary>设置 BaseCodeGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ImplementCacheInvocationCache">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ImplementGetObjectDataTypeArray">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.InspectAndRegisterInterfacesObjectArray">
            <summary>设置 BaseCodeGenerator.InspectAndRegisterInterfaces(Object[] mixins) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.InterceptorFieldGet">
            <summary>设置 BaseCodeGenerator.get_InterceptorField() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.IsInternalToDynamicProxyAssembly">
            <summary>设置 BaseCodeGenerator.IsInternalToDynamicProxy(Assembly asm) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.MainTypeBuilderGet">
            <summary>设置 BaseCodeGenerator.get_MainTypeBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.MixinFieldGet">
            <summary>设置 BaseCodeGenerator.get_MixinField() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ModuleScopeGet">
            <summary>设置 BaseCodeGenerator.get_ModuleScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.NoFilterImplTypeObject">
            <summary>设置 BaseCodeGenerator.NoFilterImpl(Type type, Object criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.NormalizeNamespaceNameString">
            <summary>设置 BaseCodeGenerator.NormalizeNamespaceName(String nsName) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ObtainAvailableConstructorType">
            <summary>设置 BaseCodeGenerator.ObtainAvailableConstructor(Type target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ObtainCallableFieldBuilderDelegateEasyCallable">
            <summary>设置 BaseCodeGenerator.ObtainCallableFieldBuilderDelegate(EasyCallable builder) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.ObtainMethodAttributesMethodInfo">
            <summary>设置 BaseCodeGenerator.ObtainMethodAttributes(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.PostProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.PreProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.RegisterDelegateFieldToBeInitializedMethodInfoFieldReferenceEasyCallableMethodInfo">
            <summary>设置 BaseCodeGenerator.RegisterDelegateFieldToBeInitialized(MethodInfo method, FieldReference field, EasyCallable builder, MethodInfo callbackMethod) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.RegisterInCacheType">
            <summary>设置 BaseCodeGenerator.RegisterInCache(Type generatedType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.WriteInterceptorInvocationMethodMethodInfoEasyMethod">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.AddISerializableTypeArray">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.CacheFieldGet">
            <summary>设置 BaseCodeGenerator.get_CacheField() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.ContextGet">
            <summary>设置 BaseCodeGenerator.get_Context() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.CreatePropertyPropertyInfo">
            <summary>设置 BaseCodeGenerator.CreateProperty(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.CreateType">
            <summary>设置 BaseCodeGenerator.CreateType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.CreateTypeBuilderStringTypeTypeArray">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 BaseCodeGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.FilterTypeArray">
            <summary>设置 BaseCodeGenerator.Filter(Type[] mixinInterfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateCallbackMethodIfNecessaryMethodInfoReference">
            <summary>设置 BaseCodeGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateConstructor">
            <summary>设置 BaseCodeGenerator.GenerateConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateConstructorCodeConstructorCodeBuilderReferenceReferenceReference">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateFields">
            <summary>设置 BaseCodeGenerator.GenerateFields() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateInterfaceImplementationTypeArray">
            <summary>设置 BaseCodeGenerator.GenerateInterfaceImplementation(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateMethodImplementationMethodInfoEasyPropertyArray">
            <summary>设置 BaseCodeGenerator.GenerateMethodImplementation(MethodInfo method, EasyProperty[] properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateMethodsTypeEasyPropertyArray">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GeneratePropertiesType">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GenerateTypeImplementationTypeBoolean">
            <summary>设置 BaseCodeGenerator.GenerateTypeImplementation(Type type, Boolean ignoreInterfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GetCorrectMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.GetCorrectMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GetFromCacheTypeTypeArray">
            <summary>设置 BaseCodeGenerator.GetFromCache(Type baseClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.GetPseudoInvocationTargetMethodInfo">
            <summary>设置 BaseCodeGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.ImplementCacheInvocationCache">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.ImplementGetObjectDataTypeArray">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.InspectAndRegisterInterfacesObjectArray">
            <summary>设置 BaseCodeGenerator.InspectAndRegisterInterfaces(Object[] mixins) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.InterceptorFieldGet">
            <summary>设置 BaseCodeGenerator.get_InterceptorField() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.IsInternalToDynamicProxyAssembly">
            <summary>设置 BaseCodeGenerator.IsInternalToDynamicProxy(Assembly asm) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.MainTypeBuilderGet">
            <summary>设置 BaseCodeGenerator.get_MainTypeBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.MixinFieldGet">
            <summary>设置 BaseCodeGenerator.get_MixinField() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.ModuleScopeGet">
            <summary>设置 BaseCodeGenerator.get_ModuleScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.NormalizeNamespaceNameString">
            <summary>设置 BaseCodeGenerator.NormalizeNamespaceName(String nsName) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.ObtainAvailableConstructorType">
            <summary>设置 BaseCodeGenerator.ObtainAvailableConstructor(Type target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.ObtainCallableFieldBuilderDelegateEasyCallable">
            <summary>设置 BaseCodeGenerator.ObtainCallableFieldBuilderDelegate(EasyCallable builder) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.ObtainMethodAttributesMethodInfo">
            <summary>设置 BaseCodeGenerator.ObtainMethodAttributes(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.PostProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.PreProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.RegisterDelegateFieldToBeInitializedMethodInfoFieldReferenceEasyCallableMethodInfo">
            <summary>设置 BaseCodeGenerator.RegisterDelegateFieldToBeInitialized(MethodInfo method, FieldReference field, EasyCallable builder, MethodInfo callbackMethod) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.RegisterInCacheType">
            <summary>设置 BaseCodeGenerator.RegisterInCache(Type generatedType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimBaseCodeGenerator.AllInstances.WriteInterceptorInvocationMethodMethodInfoEasyMethod">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.ClassProxyGenerator 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ClassProxyGenerator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.ConstructorModuleScope">
            <summary>设置 ClassProxyGenerator.ClassProxyGenerator(ModuleScope scope) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.ConstructorModuleScopeGeneratorContext">
            <summary>设置 ClassProxyGenerator.ClassProxyGenerator(ModuleScope scope, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 ClassProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.GenerateCodeType">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.GenerateCodeTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.GenerateConstructorConstructorInfo">
            <summary>设置 ClassProxyGenerator.GenerateConstructor(ConstructorInfo baseConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.GenerateConstructorsType">
            <summary>设置 ClassProxyGenerator.GenerateConstructors(Type baseClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.GenerateCustomCodeTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateCustomCode(Type baseClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.GenerateSerializationConstructor">
            <summary>设置 ClassProxyGenerator.GenerateSerializationConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.GenerateTypeNameTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.InvocationTypeGet">
            <summary>设置 ClassProxyGenerator.get_InvocationType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.JoinTypeArrayTypeArray">
            <summary>设置 ClassProxyGenerator.Join(Type[] interfaces, Type[] mixinInterfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.SkipDefaultInterfaceImplementationTypeArray">
            <summary>设置 ClassProxyGenerator.SkipDefaultInterfaceImplementation(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.VerifyIfBaseImplementsGetObjectDataType">
            <summary>设置 ClassProxyGenerator.VerifyIfBaseImplementsGetObjectData(Type baseType) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 ClassProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.GenerateCodeType">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.GenerateCodeTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.GenerateConstructorConstructorInfo">
            <summary>设置 ClassProxyGenerator.GenerateConstructor(ConstructorInfo baseConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.GenerateConstructorsType">
            <summary>设置 ClassProxyGenerator.GenerateConstructors(Type baseClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.GenerateCustomCodeTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateCustomCode(Type baseClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.GenerateSerializationConstructor">
            <summary>设置 ClassProxyGenerator.GenerateSerializationConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.GenerateTypeNameTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.InvocationTypeGet">
            <summary>设置 ClassProxyGenerator.get_InvocationType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.JoinTypeArrayTypeArray">
            <summary>设置 ClassProxyGenerator.Join(Type[] interfaces, Type[] mixinInterfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.SkipDefaultInterfaceImplementationTypeArray">
            <summary>设置 ClassProxyGenerator.SkipDefaultInterfaceImplementation(Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimClassProxyGenerator.AllInstances.VerifyIfBaseImplementsGetObjectDataType">
            <summary>设置 ClassProxyGenerator.VerifyIfBaseImplementsGetObjectData(Type baseType) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.InterfaceProxyGenerator 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.InterfaceProxyGenerator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.ConstructorModuleScope">
            <summary>设置 InterfaceProxyGenerator.InterfaceProxyGenerator(ModuleScope scope) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.ConstructorModuleScopeGeneratorContext">
            <summary>设置 InterfaceProxyGenerator.InterfaceProxyGenerator(ModuleScope scope, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 InterfaceProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.GenerateCallbackMethodIfNecessaryMethodInfoReference">
            <summary>设置 InterfaceProxyGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.GenerateCodeTypeArrayType">
            <summary>设置 InterfaceProxyGenerator.GenerateCode(Type[] interfaces, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.GenerateConstructor">
            <summary>设置 InterfaceProxyGenerator.GenerateConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.GenerateFields">
            <summary>设置 InterfaceProxyGenerator.GenerateFields() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.GenerateTypeNameTypeTypeArray">
            <summary>设置 InterfaceProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.GetCorrectMethodMethodInfo">
            <summary>设置 InterfaceProxyGenerator.GetCorrectMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.GetPseudoInvocationTargetMethodInfo">
            <summary>设置 InterfaceProxyGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.InvocationTypeGet">
            <summary>设置 InterfaceProxyGenerator.get_InvocationType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.JoinTypeArrayTypeArray">
            <summary>设置 InterfaceProxyGenerator.Join(Type[] interfaces, Type[] mixinInterfaces) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 InterfaceProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.GenerateCallbackMethodIfNecessaryMethodInfoReference">
            <summary>设置 InterfaceProxyGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.GenerateCodeTypeArrayType">
            <summary>设置 InterfaceProxyGenerator.GenerateCode(Type[] interfaces, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.GenerateConstructor">
            <summary>设置 InterfaceProxyGenerator.GenerateConstructor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.GenerateFields">
            <summary>设置 InterfaceProxyGenerator.GenerateFields() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.GenerateTypeNameTypeTypeArray">
            <summary>设置 InterfaceProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.GetCorrectMethodMethodInfo">
            <summary>设置 InterfaceProxyGenerator.GetCorrectMethod(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.GetPseudoInvocationTargetMethodInfo">
            <summary>设置 InterfaceProxyGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.InvocationTypeGet">
            <summary>设置 InterfaceProxyGenerator.get_InvocationType() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimInterfaceProxyGenerator.AllInstances.JoinTypeArrayTypeArray">
            <summary>设置 InterfaceProxyGenerator.Join(Type[] interfaces, Type[] mixinInterfaces) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.Constructor">
            <summary>设置 ModuleScope.ModuleScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.CreateModuleBoolean">
            <summary>设置 ModuleScope.CreateModule(Boolean signStrongName) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.GetKeyPair">
            <summary>设置 ModuleScope.GetKeyPair() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.ItemGetString">
            <summary>设置 ModuleScope.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.ItemSetStringType">
            <summary>设置 ModuleScope.set_Item(String name, Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.ObtainDynamicModule">
            <summary>设置 ModuleScope.ObtainDynamicModule() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.ObtainDynamicModuleBoolean">
            <summary>设置 ModuleScope.ObtainDynamicModule(Boolean signStrongName) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.SaveAssembly">
            <summary>设置 ModuleScope.SaveAssembly() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.StaticConstructor">
            <summary>设置 ModuleScope.ModuleScope() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.AllInstances.CreateModuleBoolean">
            <summary>设置 ModuleScope.CreateModule(Boolean signStrongName) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.AllInstances.ItemGetString">
            <summary>设置 ModuleScope.get_Item(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.AllInstances.ItemSetStringType">
            <summary>设置 ModuleScope.set_Item(String name, Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.AllInstances.ObtainDynamicModule">
            <summary>设置 ModuleScope.ObtainDynamicModule() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.AllInstances.ObtainDynamicModuleBoolean">
            <summary>设置 ModuleScope.ObtainDynamicModule(Boolean signStrongName) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimModuleScope.AllInstances.SaveAssembly">
            <summary>设置 ModuleScope.SaveAssembly() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.ProxyGenerationException 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ProxyGenerationException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ProxyGenerationException.ProxyGenerationException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.ConstructorString">
            <summary>设置 ProxyGenerationException.ProxyGenerationException(String message) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.ShimProxyGenerationException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.BaseCodeGenerator 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope,Castle.DynamicProxy.GeneratorContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.AddISerializable(System.Type[])">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.AddISerializableTypeArray">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.CreateType">
            <summary>设置 BaseCodeGenerator.CreateType() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.CreateType01">
            <summary>设置 BaseCodeGenerator.CreateType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.CreateTypeBuilder(System.String,System.Type,System.Type[])">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.CreateTypeBuilderStringTypeTypeArray">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.CustomizeGetObjectData(Castle.DynamicProxy.Builder.CodeBuilder.AbstractCodeBuilder,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference)">
            <summary>设置 BaseCodeGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 BaseCodeGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateCallbackMethodIfNecessary(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>设置 BaseCodeGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateCallbackMethodIfNecessaryMethodInfoReference">
            <summary>设置 BaseCodeGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateConstructor">
            <summary>设置 BaseCodeGenerator.GenerateConstructor() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateConstructor01">
            <summary>设置 BaseCodeGenerator.GenerateConstructor() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateConstructorCode(Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCodeBuilder,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateConstructorCodeConstructorCodeBuilderReferenceReferenceReference">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateFields">
            <summary>设置 BaseCodeGenerator.GenerateFields() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateFields01">
            <summary>设置 BaseCodeGenerator.GenerateFields() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateMethods(System.Type,Castle.DynamicProxy.Builder.CodeBuilder.EasyProperty[])">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateMethodsTypeEasyPropertyArray">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateProperties(System.Type)">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GeneratePropertiesType">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateTypeName(System.Type,System.Type[])">
            <summary>设置 BaseCodeGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GenerateTypeNameTypeTypeArray">
            <summary>设置 BaseCodeGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GetCorrectMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.GetCorrectMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GetCorrectMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.GetCorrectMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GetPseudoInvocationTarget(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.GetPseudoInvocationTargetMethodInfo">
            <summary>设置 BaseCodeGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.ImplementCacheInvocationCache">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.ImplementCacheInvocationCache01">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.ImplementGetObjectData(System.Type[])">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.ImplementGetObjectDataTypeArray">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.InitializeStub">
            <summary>初始化 type StubBaseCodeGenerator 的新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.InvocationTypeGet">
            <summary>设置 BaseCodeGenerator.get_InvocationType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.PostProcessMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.PostProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.PreProcessMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.PreProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.WriteInterceptorInvocationMethod(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod)">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.WriteInterceptorInvocationMethodMethodInfoEasyMethod">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubBaseCodeGenerator.InvocationType">
            <summary>设置 BaseCodeGenerator.get_InvocationType() 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.ClassProxyGenerator 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope,Castle.DynamicProxy.GeneratorContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.AddISerializable(System.Type[])">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.AddISerializableTypeArray">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.CreateType">
            <summary>设置 BaseCodeGenerator.CreateType() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.CreateType01">
            <summary>设置 BaseCodeGenerator.CreateType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.CreateTypeBuilder(System.String,System.Type,System.Type[])">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.CreateTypeBuilderStringTypeTypeArray">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.CustomizeGetObjectData(Castle.DynamicProxy.Builder.CodeBuilder.AbstractCodeBuilder,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference)">
            <summary>设置 ClassProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 ClassProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCallbackMethodIfNecessary(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>设置 BaseCodeGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCallbackMethodIfNecessaryMethodInfoReference">
            <summary>设置 BaseCodeGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCode(System.Type)">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCode(System.Type,System.Type[])">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCodeType">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCodeTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateCode(Type baseClass, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructor">
            <summary>设置 BaseCodeGenerator.GenerateConstructor() 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructor(System.Reflection.ConstructorInfo)">
            <summary>设置 ClassProxyGenerator.GenerateConstructor(ConstructorInfo baseConstructor) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructor01">
            <summary>设置 BaseCodeGenerator.GenerateConstructor() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructorCode(Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCodeBuilder,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructorCodeConstructorCodeBuilderReferenceReferenceReference">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructorConstructorInfo">
            <summary>设置 ClassProxyGenerator.GenerateConstructor(ConstructorInfo baseConstructor) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructors(System.Type)">
            <summary>设置 ClassProxyGenerator.GenerateConstructors(Type baseClass) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateConstructorsType">
            <summary>设置 ClassProxyGenerator.GenerateConstructors(Type baseClass) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCustomCode(System.Type,System.Type[])">
            <summary>设置 ClassProxyGenerator.GenerateCustomCode(Type baseClass, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateCustomCodeTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateCustomCode(Type baseClass, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateFields">
            <summary>设置 BaseCodeGenerator.GenerateFields() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateFields01">
            <summary>设置 BaseCodeGenerator.GenerateFields() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateMethods(System.Type,Castle.DynamicProxy.Builder.CodeBuilder.EasyProperty[])">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateMethodsTypeEasyPropertyArray">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateProperties(System.Type)">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GeneratePropertiesType">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateTypeName(System.Type,System.Type[])">
            <summary>设置 ClassProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GenerateTypeNameTypeTypeArray">
            <summary>设置 ClassProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GetCorrectMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.GetCorrectMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GetCorrectMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.GetCorrectMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GetPseudoInvocationTarget(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.GetPseudoInvocationTargetMethodInfo">
            <summary>设置 BaseCodeGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.ImplementCacheInvocationCache">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.ImplementCacheInvocationCache01">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.ImplementGetObjectData(System.Type[])">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.ImplementGetObjectDataTypeArray">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.InitializeStub">
            <summary>初始化 type StubClassProxyGenerator 的新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.InvocationTypeGet">
            <summary>设置 ClassProxyGenerator.get_InvocationType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.PostProcessMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.PostProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.PreProcessMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.PreProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.WriteInterceptorInvocationMethod(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod)">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.WriteInterceptorInvocationMethodMethodInfoEasyMethod">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubClassProxyGenerator.InvocationType">
            <summary>设置 ClassProxyGenerator.get_InvocationType() 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.InterfaceProxyGenerator 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.#ctor(Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope,Castle.DynamicProxy.GeneratorContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.AddISerializable(System.Type[])">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.AddISerializableTypeArray">
            <summary>设置 BaseCodeGenerator.AddISerializable(Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.CreateType">
            <summary>设置 BaseCodeGenerator.CreateType() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.CreateType01">
            <summary>设置 BaseCodeGenerator.CreateType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.CreateTypeBuilder(System.String,System.Type,System.Type[])">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.CreateTypeBuilderStringTypeTypeArray">
            <summary>设置 BaseCodeGenerator.CreateTypeBuilder(String typeName, Type baseType, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.CustomizeGetObjectData(Castle.DynamicProxy.Builder.CodeBuilder.AbstractCodeBuilder,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.ArgumentReference)">
            <summary>设置 InterfaceProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.CustomizeGetObjectDataAbstractCodeBuilderArgumentReferenceArgumentReference">
            <summary>设置 InterfaceProxyGenerator.CustomizeGetObjectData(AbstractCodeBuilder codebuilder, ArgumentReference arg1, ArgumentReference arg2) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateCallbackMethodIfNecessary(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>设置 InterfaceProxyGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateCallbackMethodIfNecessaryMethodInfoReference">
            <summary>设置 InterfaceProxyGenerator.GenerateCallbackMethodIfNecessary(MethodInfo method, Reference invocationTarget) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateCode(System.Type[],System.Type)">
            <summary>设置 InterfaceProxyGenerator.GenerateCode(Type[] interfaces, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateCodeTypeArrayType">
            <summary>设置 InterfaceProxyGenerator.GenerateCode(Type[] interfaces, Type targetType) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateConstructor">
            <summary>设置 InterfaceProxyGenerator.GenerateConstructor() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateConstructor01">
            <summary>设置 InterfaceProxyGenerator.GenerateConstructor() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateConstructorCode(Castle.DynamicProxy.Builder.CodeBuilder.ConstructorCodeBuilder,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference,Castle.DynamicProxy.Builder.CodeBuilder.SimpleAST.Reference)">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateConstructorCodeConstructorCodeBuilderReferenceReferenceReference">
            <summary>设置 BaseCodeGenerator.GenerateConstructorCode(ConstructorCodeBuilder codebuilder, Reference interceptorArg, Reference targetArgument, Reference mixinArray) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateFields">
            <summary>设置 InterfaceProxyGenerator.GenerateFields() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateFields01">
            <summary>设置 InterfaceProxyGenerator.GenerateFields() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateMethods(System.Type,Castle.DynamicProxy.Builder.CodeBuilder.EasyProperty[])">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateMethodsTypeEasyPropertyArray">
            <summary>设置 BaseCodeGenerator.GenerateMethods(Type inter, EasyProperty[] properties) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateProperties(System.Type)">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GeneratePropertiesType">
            <summary>设置 BaseCodeGenerator.GenerateProperties(Type inter) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateTypeName(System.Type,System.Type[])">
            <summary>设置 InterfaceProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GenerateTypeNameTypeTypeArray">
            <summary>设置 InterfaceProxyGenerator.GenerateTypeName(Type type, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GetCorrectMethod(System.Reflection.MethodInfo)">
            <summary>设置 InterfaceProxyGenerator.GetCorrectMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GetCorrectMethodMethodInfo">
            <summary>设置 InterfaceProxyGenerator.GetCorrectMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GetPseudoInvocationTarget(System.Reflection.MethodInfo)">
            <summary>设置 InterfaceProxyGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.GetPseudoInvocationTargetMethodInfo">
            <summary>设置 InterfaceProxyGenerator.GetPseudoInvocationTarget(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.ImplementCacheInvocationCache">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.ImplementCacheInvocationCache01">
            <summary>设置 BaseCodeGenerator.ImplementCacheInvocationCache() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.ImplementGetObjectData(System.Type[])">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.ImplementGetObjectDataTypeArray">
            <summary>设置 BaseCodeGenerator.ImplementGetObjectData(Type[] interfaces) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.InitializeStub">
            <summary>初始化 type StubInterfaceProxyGenerator 的新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.InvocationTypeGet">
            <summary>设置 InterfaceProxyGenerator.get_InvocationType() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.PostProcessMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.PostProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PostProcessMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.PreProcessMethod(System.Reflection.MethodInfo)">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.PreProcessMethodMethodInfo">
            <summary>设置 BaseCodeGenerator.PreProcessMethod(MethodInfo method) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.WriteInterceptorInvocationMethod(System.Reflection.MethodInfo,Castle.DynamicProxy.Builder.CodeBuilder.EasyMethod)">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.WriteInterceptorInvocationMethodMethodInfoEasyMethod">
            <summary>设置 BaseCodeGenerator.WriteInterceptorInvocationMethod(MethodInfo method, EasyMethod builder) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubInterfaceProxyGenerator.InvocationType">
            <summary>设置 InterfaceProxyGenerator.get_InvocationType() 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubModuleScope">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.ModuleScope 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubModuleScope.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubModuleScope.InitializeStub">
            <summary>初始化 type StubModuleScope 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubModuleScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubModuleScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubModuleScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException">
            <summary>Castle.DynamicProxy.Builder.CodeGenerators.ProxyGenerationException 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubProxyGenerationException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubProxyGenerationException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.InitializeStub">
            <summary>初始化 type StubProxyGenerationException 的新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.CodeGenerators.Fakes.StubProxyGenerationException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder">
            <summary>Castle.DynamicProxy.Builder.DefaultProxyBuilder 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.#ctor(Castle.DynamicProxy.Builder.DefaultProxyBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.Bind(Castle.DynamicProxy.Builder.IProxyBuilder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.Constructor">
            <summary>设置 DefaultProxyBuilder.DefaultProxyBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.CreateClassProxyType">
            <summary>设置 DefaultProxyBuilder.CreateClassProxy(Type theClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.CreateClassProxyTypeTypeArray">
            <summary>设置 DefaultProxyBuilder.CreateClassProxy(Type theClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.CreateCustomClassProxyTypeGeneratorContext">
            <summary>设置 DefaultProxyBuilder.CreateCustomClassProxy(Type theClass, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.CreateCustomInterfaceProxyTypeArrayTypeGeneratorContext">
            <summary>设置 DefaultProxyBuilder.CreateCustomInterfaceProxy(Type[] interfaces, Type type, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.CreateInterfaceProxyTypeArrayType">
            <summary>设置 DefaultProxyBuilder.CreateInterfaceProxy(Type[] interfaces, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.ModuleScopeGet">
            <summary>设置 DefaultProxyBuilder.get_ModuleScope() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.AllInstances.CreateClassProxyType">
            <summary>设置 DefaultProxyBuilder.CreateClassProxy(Type theClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.AllInstances.CreateClassProxyTypeTypeArray">
            <summary>设置 DefaultProxyBuilder.CreateClassProxy(Type theClass, Type[] interfaces) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.AllInstances.CreateCustomClassProxyTypeGeneratorContext">
            <summary>设置 DefaultProxyBuilder.CreateCustomClassProxy(Type theClass, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.AllInstances.CreateCustomInterfaceProxyTypeArrayTypeGeneratorContext">
            <summary>设置 DefaultProxyBuilder.CreateCustomInterfaceProxy(Type[] interfaces, Type type, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.AllInstances.CreateInterfaceProxyTypeArrayType">
            <summary>设置 DefaultProxyBuilder.CreateInterfaceProxy(Type[] interfaces, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.ShimDefaultProxyBuilder.AllInstances.ModuleScopeGet">
            <summary>设置 DefaultProxyBuilder.get_ModuleScope() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder">
            <summary>Castle.DynamicProxy.Builder.DefaultProxyBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateClassProxy(System.Type)">
            <summary>设置 DefaultProxyBuilder.CreateClassProxy(Type theClass) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateClassProxyType">
            <summary>设置 DefaultProxyBuilder.CreateClassProxy(Type theClass) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateCustomClassProxy(System.Type,Castle.DynamicProxy.GeneratorContext)">
            <summary>设置 DefaultProxyBuilder.CreateCustomClassProxy(Type theClass, GeneratorContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateCustomClassProxyTypeGeneratorContext">
            <summary>设置 DefaultProxyBuilder.CreateCustomClassProxy(Type theClass, GeneratorContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateCustomInterfaceProxy(System.Type[],System.Type,Castle.DynamicProxy.GeneratorContext)">
            <summary>设置 DefaultProxyBuilder.CreateCustomInterfaceProxy(Type[] interfaces, Type type, GeneratorContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateCustomInterfaceProxyTypeArrayTypeGeneratorContext">
            <summary>设置 DefaultProxyBuilder.CreateCustomInterfaceProxy(Type[] interfaces, Type type, GeneratorContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateInterfaceProxy(System.Type[],System.Type)">
            <summary>设置 DefaultProxyBuilder.CreateInterfaceProxy(Type[] interfaces, Type type) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CreateInterfaceProxyTypeArrayType">
            <summary>设置 DefaultProxyBuilder.CreateInterfaceProxy(Type[] interfaces, Type type) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.InitializeStub">
            <summary>初始化 type StubDefaultProxyBuilder 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Builder.Fakes.StubDefaultProxyBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder">
            <summary>Castle.DynamicProxy.Builder.IProxyBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.#ctor">
            <summary>初始化 type StubIProxyBuilder 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.cdp::Castle#DynamicProxy#Builder#IProxyBuilder#CreateClassProxy(System.Type)">
            <summary>设置 IProxyBuilder.CreateClassProxy(Type theClass) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.cdp::Castle#DynamicProxy#Builder#IProxyBuilder#CreateClassProxy(System.Type,System.Type[])">
            <summary>设置 IProxyBuilder.CreateClassProxy(Type theClass, Type[] interfaces) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.cdp::Castle#DynamicProxy#Builder#IProxyBuilder#CreateCustomClassProxy(System.Type,Castle.DynamicProxy.GeneratorContext)">
            <summary>设置 IProxyBuilder.CreateCustomClassProxy(Type theClass, GeneratorContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.cdp::Castle#DynamicProxy#Builder#IProxyBuilder#CreateCustomInterfaceProxy(System.Type[],System.Type,Castle.DynamicProxy.GeneratorContext)">
            <summary>设置 IProxyBuilder.CreateCustomInterfaceProxy(Type[] interfaces, Type target, GeneratorContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.cdp::Castle#DynamicProxy#Builder#IProxyBuilder#CreateInterfaceProxy(System.Type[],System.Type)">
            <summary>设置 IProxyBuilder.CreateInterfaceProxy(Type[] interfaces, Type target) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.CreateClassProxyType">
            <summary>设置 IProxyBuilder.CreateClassProxy(Type theClass) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.CreateClassProxyTypeTypeArray">
            <summary>设置 IProxyBuilder.CreateClassProxy(Type theClass, Type[] interfaces) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.CreateCustomClassProxyTypeGeneratorContext">
            <summary>设置 IProxyBuilder.CreateCustomClassProxy(Type theClass, GeneratorContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.CreateCustomInterfaceProxyTypeArrayTypeGeneratorContext">
            <summary>设置 IProxyBuilder.CreateCustomInterfaceProxy(Type[] interfaces, Type target, GeneratorContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Builder.Fakes.StubIProxyBuilder.CreateInterfaceProxyTypeArrayType">
            <summary>设置 IProxyBuilder.CreateInterfaceProxy(Type[] interfaces, Type target) 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.ShimGeneratorContext">
            <summary>Castle.DynamicProxy.GeneratorContext 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimGeneratorContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimGeneratorContext.#ctor(Castle.DynamicProxy.GeneratorContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimGeneratorContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimGeneratorContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimGeneratorContext.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimGeneratorContext.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimGeneratorContext.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AddInterfaceToSkipType">
            <summary>设置 GeneratorContext.AddInterfaceToSkip(Type interfaceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AddMethodToSkipMethodInfo">
            <summary>设置 GeneratorContext.AddMethodToSkip(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AddMixinInstanceObject">
            <summary>设置 GeneratorContext.AddMixinInstance(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.Constructor">
            <summary>设置 GeneratorContext.GeneratorContext() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.HasMixinsGet">
            <summary>设置 GeneratorContext.get_HasMixins() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.InterceptorGet">
            <summary>设置 GeneratorContext.get_Interceptor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.InterceptorSetType">
            <summary>设置 GeneratorContext.set_Interceptor(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.InterfaceInvocationGet">
            <summary>设置 GeneratorContext.get_InterfaceInvocation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.InterfaceInvocationSetType">
            <summary>设置 GeneratorContext.set_InterfaceInvocation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.InvocationGet">
            <summary>设置 GeneratorContext.get_Invocation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.InvocationSetType">
            <summary>设置 GeneratorContext.set_Invocation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.ItemGetString">
            <summary>设置 GeneratorContext.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.ItemSetStringObject">
            <summary>设置 GeneratorContext.set_Item(String key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.MixinsAsArray">
            <summary>设置 GeneratorContext.MixinsAsArray() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.ProxyObjectReferenceGet">
            <summary>设置 GeneratorContext.get_ProxyObjectReference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.ProxyObjectReferenceSetType">
            <summary>设置 GeneratorContext.set_ProxyObjectReference(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.SameClassInvocationGet">
            <summary>设置 GeneratorContext.get_SameClassInvocation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.SameClassInvocationSetType">
            <summary>设置 GeneratorContext.set_SameClassInvocation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.ShouldSkipMethodInfo">
            <summary>设置 GeneratorContext.ShouldSkip(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.ShouldSkipType">
            <summary>设置 GeneratorContext.ShouldSkip(Type interfaceType) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.AddInterfaceToSkipType">
            <summary>设置 GeneratorContext.AddInterfaceToSkip(Type interfaceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.AddMethodToSkipMethodInfo">
            <summary>设置 GeneratorContext.AddMethodToSkip(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.AddMixinInstanceObject">
            <summary>设置 GeneratorContext.AddMixinInstance(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.HasMixinsGet">
            <summary>设置 GeneratorContext.get_HasMixins() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.InterceptorGet">
            <summary>设置 GeneratorContext.get_Interceptor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.InterceptorSetType">
            <summary>设置 GeneratorContext.set_Interceptor(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.InterfaceInvocationGet">
            <summary>设置 GeneratorContext.get_InterfaceInvocation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.InterfaceInvocationSetType">
            <summary>设置 GeneratorContext.set_InterfaceInvocation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.InvocationGet">
            <summary>设置 GeneratorContext.get_Invocation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.InvocationSetType">
            <summary>设置 GeneratorContext.set_Invocation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.ItemGetString">
            <summary>设置 GeneratorContext.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.ItemSetStringObject">
            <summary>设置 GeneratorContext.set_Item(String key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.MixinsAsArray">
            <summary>设置 GeneratorContext.MixinsAsArray() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.ProxyObjectReferenceGet">
            <summary>设置 GeneratorContext.get_ProxyObjectReference() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.ProxyObjectReferenceSetType">
            <summary>设置 GeneratorContext.set_ProxyObjectReference(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.SameClassInvocationGet">
            <summary>设置 GeneratorContext.get_SameClassInvocation() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.SameClassInvocationSetType">
            <summary>设置 GeneratorContext.set_SameClassInvocation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.ShouldSkipMethodInfo">
            <summary>设置 GeneratorContext.ShouldSkip(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimGeneratorContext.AllInstances.ShouldSkipType">
            <summary>设置 GeneratorContext.ShouldSkip(Type interfaceType) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.ShimProxyGenerator">
            <summary>Castle.DynamicProxy.ProxyGenerator 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimProxyGenerator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimProxyGenerator.#ctor(Castle.DynamicProxy.ProxyGenerator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimProxyGenerator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimProxyGenerator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.Constructor">
            <summary>设置 ProxyGenerator.ProxyGenerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.ConstructorIProxyBuilder">
            <summary>设置 ProxyGenerator.ProxyGenerator(IProxyBuilder builder) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateClassProxyInstanceTypeIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxyInstance(Type type, IInterceptor interceptor, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateClassProxyTypeIInterceptorBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateClassProxyTypeIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateClassProxyTypeTypeArrayIInterceptorBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateClassProxyTypeTypeArrayIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateCustomClassProxyInstanceTypeIInterceptorGeneratorContextObject">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateCustomClassProxyInstanceTypeIInterceptorGeneratorContextObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateCustomClassProxyTypeIInterceptorGeneratorContextBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Boolean checkAbstract, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateCustomClassProxyTypeIInterceptorGeneratorContextObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateCustomProxyInstanceTypeIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxyInstance(Type type, IInterceptor interceptor, Object target, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateCustomProxyTypeArrayIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type[] interfaces, IInterceptor interceptor, Object target, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateCustomProxyTypeIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type theInterface, IInterceptor interceptor, Object target, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateProxyInstanceTypeIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxyInstance(Type type, IInterceptor interceptor, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateProxyTypeArrayIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxy(Type[] interfaces, IInterceptor interceptor, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.CreateProxyTypeIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxy(Type theInterface, IInterceptor interceptor, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.ProxyBuilderGet">
            <summary>设置 ProxyGenerator.get_ProxyBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.ProxyBuilderSetIProxyBuilder">
            <summary>设置 ProxyGenerator.set_ProxyBuilder(IProxyBuilder value) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateClassProxyInstanceTypeIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxyInstance(Type type, IInterceptor interceptor, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateClassProxyTypeIInterceptorBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateClassProxyTypeIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateClassProxyTypeTypeArrayIInterceptorBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateClassProxyTypeTypeArrayIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateCustomClassProxyInstanceTypeIInterceptorGeneratorContextObject">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateCustomClassProxyInstanceTypeIInterceptorGeneratorContextObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateCustomClassProxyTypeIInterceptorGeneratorContextBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Boolean checkAbstract, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateCustomClassProxyTypeIInterceptorGeneratorContextObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateCustomProxyInstanceTypeIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxyInstance(Type type, IInterceptor interceptor, Object target, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateCustomProxyTypeArrayIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type[] interfaces, IInterceptor interceptor, Object target, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateCustomProxyTypeIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type theInterface, IInterceptor interceptor, Object target, GeneratorContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateProxyInstanceTypeIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxyInstance(Type type, IInterceptor interceptor, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateProxyTypeArrayIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxy(Type[] interfaces, IInterceptor interceptor, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.CreateProxyTypeIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxy(Type theInterface, IInterceptor interceptor, Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.ProxyBuilderGet">
            <summary>设置 ProxyGenerator.get_ProxyBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimProxyGenerator.AllInstances.ProxyBuilderSetIProxyBuilder">
            <summary>设置 ProxyGenerator.set_ProxyBuilder(IProxyBuilder value) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.ShimStandardInterceptor">
            <summary>Castle.DynamicProxy.StandardInterceptor 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.#ctor(Castle.DynamicProxy.StandardInterceptor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.Bind(Castle.DynamicProxy.IInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.Constructor">
            <summary>设置 StandardInterceptor.StandardInterceptor() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.InterceptIInvocationObjectArray">
            <summary>设置 StandardInterceptor.Intercept(IInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.PreProceedIInvocationObjectArray">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.AllInstances.InterceptIInvocationObjectArray">
            <summary>设置 StandardInterceptor.Intercept(IInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.ShimStandardInterceptor.AllInstances.PreProceedIInvocationObjectArray">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.StubICallable">
            <summary>Castle.DynamicProxy.ICallable 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubICallable.#ctor">
            <summary>初始化 type StubICallable 的新实例</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubICallable.CallObjectArray">
            <summary>设置 ICallable.Call(Object[] args) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubICallable.cdp::Castle#DynamicProxy#ICallable#Call(System.Object[])">
            <summary>设置 ICallable.Call(Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubICallable.TargetGet">
            <summary>设置 ICallable.get_Target() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubICallable.cdp::Castle#DynamicProxy#ICallable#Target">
            <summary>设置 ICallable.get_Target() 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.StubIInterceptor">
            <summary>Castle.DynamicProxy.IInterceptor 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubIInterceptor.#ctor">
            <summary>初始化 type StubIInterceptor 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubIInterceptor.cdp::Castle#DynamicProxy#IInterceptor#Intercept(Castle.DynamicProxy.IInvocation,System.Object[])">
            <summary>设置 IInterceptor.Intercept(IInvocation invocation, Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubIInterceptor.InterceptIInvocationObjectArray">
            <summary>设置 IInterceptor.Intercept(IInvocation invocation, Object[] args) 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.StubIInvocation">
            <summary>Castle.DynamicProxy.IInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubIInvocation.#ctor">
            <summary>初始化 type StubIInvocation 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubIInvocation.AttachBackingFieldToInvocationTarget">
            <summary>附加委托以将 StubIInvocation.InvocationTarget 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubIInvocation.cdp::Castle#DynamicProxy#IInvocation#Proceed(System.Object[])">
            <summary>设置 IInvocation.Proceed(Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubIInvocation.InvocationTargetGet">
            <summary>设置 IInvocation.get_InvocationTarget() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubIInvocation.InvocationTargetSetObject">
            <summary>设置 IInvocation.set_InvocationTarget(Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubIInvocation.MethodGet">
            <summary>设置 IInvocation.get_Method() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubIInvocation.MethodInvocationTargetGet">
            <summary>设置 IInvocation.get_MethodInvocationTarget() 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubIInvocation.ProceedObjectArray">
            <summary>设置 IInvocation.Proceed(Object[] args) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubIInvocation.ProxyGet">
            <summary>设置 IInvocation.get_Proxy() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubIInvocation.cdp::Castle#DynamicProxy#IInvocation#InvocationTarget">
            <summary>设置 IInvocation.get_InvocationTarget() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubIInvocation.cdp::Castle#DynamicProxy#IInvocation#Method">
            <summary>设置 IInvocation.get_Method() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubIInvocation.cdp::Castle#DynamicProxy#IInvocation#MethodInvocationTarget">
            <summary>设置 IInvocation.get_MethodInvocationTarget() 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubIInvocation.cdp::Castle#DynamicProxy#IInvocation#Proxy">
            <summary>设置 IInvocation.get_Proxy() 的 stub</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.StubProxyGenerator">
            <summary>Castle.DynamicProxy.ProxyGenerator 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.#ctor(Castle.DynamicProxy.Builder.IProxyBuilder)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxy(System.Type,Castle.DynamicProxy.IInterceptor,System.Object[])">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxy(System.Type,Castle.DynamicProxy.IInterceptor,System.Boolean,System.Object[])">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxy(System.Type,System.Type[],Castle.DynamicProxy.IInterceptor,System.Object[])">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxy(System.Type,System.Type[],Castle.DynamicProxy.IInterceptor,System.Boolean,System.Object[])">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxyInstance(System.Type,Castle.DynamicProxy.IInterceptor,System.Object[])">
            <summary>设置 ProxyGenerator.CreateClassProxyInstance(Type type, IInterceptor interceptor, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxyInstanceTypeIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxyInstance(Type type, IInterceptor interceptor, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxyTypeIInterceptorBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxyTypeIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, IInterceptor interceptor, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxyTypeTypeArrayIInterceptorBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Boolean checkAbstract, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateClassProxyTypeTypeArrayIInterceptorObjectArray">
            <summary>设置 ProxyGenerator.CreateClassProxy(Type baseClass, Type[] interfaces, IInterceptor interceptor, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxy(System.Type,Castle.DynamicProxy.IInterceptor,Castle.DynamicProxy.GeneratorContext,System.Object[])">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxy(System.Type,Castle.DynamicProxy.IInterceptor,Castle.DynamicProxy.GeneratorContext,System.Boolean,System.Object[])">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Boolean checkAbstract, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxyInstance(System.Type,Castle.DynamicProxy.IInterceptor,Castle.DynamicProxy.GeneratorContext,System.Object[])">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxyInstance(System.Type,Castle.DynamicProxy.IInterceptor,Castle.DynamicProxy.GeneratorContext,System.Object)">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object target) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxyInstanceTypeIInterceptorGeneratorContextObject">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object target) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxyInstanceTypeIInterceptorGeneratorContextObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxyInstance(Type type, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxyTypeIInterceptorGeneratorContextBooleanObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Boolean checkAbstract, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomClassProxyTypeIInterceptorGeneratorContextObjectArray">
            <summary>设置 ProxyGenerator.CreateCustomClassProxy(Type baseClass, IInterceptor interceptor, GeneratorContext context, Object[] argumentsForConstructor) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomProxy(System.Type,Castle.DynamicProxy.IInterceptor,System.Object,Castle.DynamicProxy.GeneratorContext)">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type theInterface, IInterceptor interceptor, Object target, GeneratorContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomProxy(System.Type[],Castle.DynamicProxy.IInterceptor,System.Object,Castle.DynamicProxy.GeneratorContext)">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type[] interfaces, IInterceptor interceptor, Object target, GeneratorContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomProxyInstance(System.Type,Castle.DynamicProxy.IInterceptor,System.Object,Castle.DynamicProxy.GeneratorContext)">
            <summary>设置 ProxyGenerator.CreateCustomProxyInstance(Type type, IInterceptor interceptor, Object target, GeneratorContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomProxyInstanceTypeIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxyInstance(Type type, IInterceptor interceptor, Object target, GeneratorContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomProxyTypeArrayIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type[] interfaces, IInterceptor interceptor, Object target, GeneratorContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateCustomProxyTypeIInterceptorObjectGeneratorContext">
            <summary>设置 ProxyGenerator.CreateCustomProxy(Type theInterface, IInterceptor interceptor, Object target, GeneratorContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateProxy(System.Type,Castle.DynamicProxy.IInterceptor,System.Object)">
            <summary>设置 ProxyGenerator.CreateProxy(Type theInterface, IInterceptor interceptor, Object target) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateProxy(System.Type[],Castle.DynamicProxy.IInterceptor,System.Object)">
            <summary>设置 ProxyGenerator.CreateProxy(Type[] interfaces, IInterceptor interceptor, Object target) 的 存根</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateProxyInstance(System.Type,Castle.DynamicProxy.IInterceptor,System.Object)">
            <summary>设置 ProxyGenerator.CreateProxyInstance(Type type, IInterceptor interceptor, Object target) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateProxyInstanceTypeIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxyInstance(Type type, IInterceptor interceptor, Object target) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateProxyTypeArrayIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxy(Type[] interfaces, IInterceptor interceptor, Object target) 的 stub</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubProxyGenerator.CreateProxyTypeIInterceptorObject">
            <summary>设置 ProxyGenerator.CreateProxy(Type theInterface, IInterceptor interceptor, Object target) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubProxyGenerator.InitializeStub">
            <summary>初始化 type StubProxyGenerator 的新实例</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubProxyGenerator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubProxyGenerator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubProxyGenerator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Fakes.StubStandardInterceptor">
            <summary>Castle.DynamicProxy.StandardInterceptor 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubStandardInterceptor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubStandardInterceptor.InitializeStub">
            <summary>初始化 type StubStandardInterceptor 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubStandardInterceptor.Intercept(Castle.DynamicProxy.IInvocation,System.Object[])">
            <summary>设置 StandardInterceptor.Intercept(IInvocation invocation, Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubStandardInterceptor.InterceptIInvocationObjectArray">
            <summary>设置 StandardInterceptor.Intercept(IInvocation invocation, Object[] args) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubStandardInterceptor.PostProceed(Castle.DynamicProxy.IInvocation,System.Object@,System.Object[])">
            <summary>设置 StandardInterceptor.PostProceed(IInvocation invocation, Object&amp; returnValue, Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubStandardInterceptor.PostProceedIInvocationObjectRefObjectArray">
            <summary>设置 StandardInterceptor.PostProceed(IInvocation invocation, Object&amp; returnValue, Object[] args) 的 stub</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Fakes.StubStandardInterceptor.PreProceed(Castle.DynamicProxy.IInvocation,System.Object[])">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation, Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Fakes.StubStandardInterceptor.PreProceedIInvocationObjectArray">
            <summary>设置 StandardInterceptor.PreProceed(IInvocation invocation, Object[] args) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubStandardInterceptor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubStandardInterceptor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Fakes.StubStandardInterceptor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation">
            <summary>Castle.DynamicProxy.Invocation.AbstractInvocation 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.#ctor(Castle.DynamicProxy.Invocation.AbstractInvocation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.Bind(Castle.DynamicProxy.IInvocation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.ConstructorICallableObjectMethodInfoObject">
            <summary>设置 AbstractInvocation.AbstractInvocation(ICallable callable, Object proxy, MethodInfo method, Object newtarget) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.InvocationTargetGet">
            <summary>设置 AbstractInvocation.get_InvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.InvocationTargetSetObject">
            <summary>设置 AbstractInvocation.set_InvocationTarget(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.MethodGet">
            <summary>设置 AbstractInvocation.get_Method() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.MethodInvocationTargetGet">
            <summary>设置 AbstractInvocation.get_MethodInvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.ProceedObjectArray">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.ProxyGet">
            <summary>设置 AbstractInvocation.get_Proxy() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.AllInstances.InvocationTargetGet">
            <summary>设置 AbstractInvocation.get_InvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.AllInstances.InvocationTargetSetObject">
            <summary>设置 AbstractInvocation.set_InvocationTarget(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.AllInstances.MethodGet">
            <summary>设置 AbstractInvocation.get_Method() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.AllInstances.MethodInvocationTargetGet">
            <summary>设置 AbstractInvocation.get_MethodInvocationTarget() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.AllInstances.ProceedObjectArray">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimAbstractInvocation.AllInstances.ProxyGet">
            <summary>设置 AbstractInvocation.get_Proxy() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation">
            <summary>Castle.DynamicProxy.Invocation.InterfaceInvocation 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.#ctor(Castle.DynamicProxy.Invocation.InterfaceInvocation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.Bind(Castle.DynamicProxy.IInvocation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.ConstructorICallableObjectMethodInfoObject">
            <summary>设置 InterfaceInvocation.InterfaceInvocation(ICallable callable, Object proxy, MethodInfo method, Object newtarget) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.ShimInterfaceInvocation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation">
            <summary>Castle.DynamicProxy.Invocation.SameClassInvocation 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.#ctor(Castle.DynamicProxy.Invocation.SameClassInvocation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.Bind(Castle.DynamicProxy.IInvocation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.ConstructorICallableObjectMethodInfoObject">
            <summary>设置 SameClassInvocation.SameClassInvocation(ICallable callable, Object proxy, MethodInfo method, Object newtarget) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.ShimSameClassInvocation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation">
            <summary>Castle.DynamicProxy.Invocation.AbstractInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation.#ctor(Castle.DynamicProxy.ICallable,System.Object,System.Reflection.MethodInfo,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation.InitializeStub">
            <summary>初始化 type StubAbstractInvocation 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation.Proceed(System.Object[])">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation.ProceedObjectArray">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubAbstractInvocation.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation">
            <summary>Castle.DynamicProxy.Invocation.InterfaceInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation.#ctor(Castle.DynamicProxy.ICallable,System.Object,System.Reflection.MethodInfo,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation.InitializeStub">
            <summary>初始化 type StubInterfaceInvocation 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation.Proceed(System.Object[])">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation.ProceedObjectArray">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubInterfaceInvocation.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation">
            <summary>Castle.DynamicProxy.Invocation.SameClassInvocation 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation.#ctor(Castle.DynamicProxy.ICallable,System.Object,System.Reflection.MethodInfo,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation.InitializeStub">
            <summary>初始化 type StubSameClassInvocation 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation.Proceed(System.Object[])">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation.ProceedObjectArray">
            <summary>设置 AbstractInvocation.Proceed(Object[] args) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Invocation.Fakes.StubSameClassInvocation.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference">
            <summary>Castle.DynamicProxy.Serialization.ProxyObjectReference 的填充码类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.#ctor(Castle.DynamicProxy.Serialization.ProxyObjectReference)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.Bind(System.Runtime.Serialization.IObjectReference)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.ProxyObjectReference(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.GetRealObjectStreamingContext">
            <summary>设置 ProxyObjectReference.GetRealObject(StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.InvokeCallbackObject">
            <summary>设置 ProxyObjectReference.InvokeCallback(Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.RecreateClassProxySerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.RecreateClassProxy(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.RecreateInterfaceProxySerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.RecreateInterfaceProxy(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.RecreateProxySerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.RecreateProxy(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.ResetScope">
            <summary>设置 ProxyObjectReference.ResetScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.StaticConstructor">
            <summary>设置 ProxyObjectReference.ProxyObjectReference() 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.AllInstances.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.AllInstances.GetRealObjectStreamingContext">
            <summary>设置 ProxyObjectReference.GetRealObject(StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.AllInstances.InvokeCallbackObject">
            <summary>设置 ProxyObjectReference.InvokeCallback(Object target) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.AllInstances.RecreateClassProxySerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.RecreateClassProxy(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.AllInstances.RecreateInterfaceProxySerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.RecreateInterfaceProxy(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.ShimProxyObjectReference.AllInstances.RecreateProxySerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.RecreateProxy(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference">
            <summary>Castle.DynamicProxy.Serialization.ProxyObjectReference 的存根类型</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference.InitializeStub">
            <summary>初始化 type StubProxyObjectReference 的新实例</summary>
        </member>
        <member name="M:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference.RecreateProxy(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 ProxyObjectReference.RecreateProxy(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference.RecreateProxySerializationInfoStreamingContext">
            <summary>设置 ProxyObjectReference.RecreateProxy(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.DynamicProxy.Serialization.Fakes.StubProxyObjectReference.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.CastleDynamicProxyDelegates">
            <summary>包含用于 Castle.DynamicProxy 的存根和填充码的自定义委托</summary>
        </member>
    </members>
</doc>
