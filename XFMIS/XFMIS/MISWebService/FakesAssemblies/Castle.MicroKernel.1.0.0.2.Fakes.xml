<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.MicroKernel.1.0.0.2.Fakes</name>
    </assembly>
    <members>
        <member name="T:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException">
            <summary>Castle.Facilities.EventWiring.EventWiringException 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.#ctor(Castle.Facilities.EventWiring.EventWiringException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 EventWiringException.EventWiringException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.ConstructorString">
            <summary>设置 EventWiringException.EventWiringException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.ConstructorStringException">
            <summary>设置 EventWiringException.EventWiringException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.EventWiring.Fakes.ShimEventWiringException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility">
            <summary>Castle.Facilities.EventWiring.EventWiringFacility 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.#ctor(Castle.Facilities.EventWiring.EventWiringFacility)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AssertValidHandlerIHandlerString">
            <summary>设置 EventWiringFacility.AssertValidHandler(IHandler handler, String subscriberKey) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.Constructor">
            <summary>设置 EventWiringFacility.EventWiringFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.ExtractAndRegisterEventInformationComponentModel">
            <summary>设置 EventWiringFacility.ExtractAndRegisterEventInformation(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.GetPublisherKeyIConfiguration">
            <summary>设置 EventWiringFacility.GetPublisherKey(IConfiguration subscriberNode) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.Init">
            <summary>设置 EventWiringFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.OnComponentCreatedComponentModelObject">
            <summary>设置 EventWiringFacility.OnComponentCreated(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.OnComponentDestroyedComponentModelObject">
            <summary>设置 EventWiringFacility.OnComponentDestroyed(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.OnComponentModelCreatedComponentModel">
            <summary>设置 EventWiringFacility.OnComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.StartAndWireSubscribersComponentModelObject">
            <summary>设置 EventWiringFacility.StartAndWireSubscribers(ComponentModel model, Object publisher) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.WireEventsIfNeededComponentModelObject">
            <summary>设置 EventWiringFacility.WireEventsIfNeeded(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances.ExtractAndRegisterEventInformationComponentModel">
            <summary>设置 EventWiringFacility.ExtractAndRegisterEventInformation(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances.Init">
            <summary>设置 EventWiringFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances.OnComponentCreatedComponentModelObject">
            <summary>设置 EventWiringFacility.OnComponentCreated(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances.OnComponentDestroyedComponentModelObject">
            <summary>设置 EventWiringFacility.OnComponentDestroyed(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances.OnComponentModelCreatedComponentModel">
            <summary>设置 EventWiringFacility.OnComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances.StartAndWireSubscribersComponentModelObject">
            <summary>设置 EventWiringFacility.StartAndWireSubscribers(ComponentModel model, Object publisher) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.ShimEventWiringFacility.AllInstances.WireEventsIfNeededComponentModelObject">
            <summary>设置 EventWiringFacility.WireEventsIfNeeded(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.EventWiring.Fakes.StubEventWiringException">
            <summary>Castle.Facilities.EventWiring.EventWiringException 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubEventWiringException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubEventWiringException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.InitializeStub">
            <summary>初始化 type StubEventWiringException 的新实例</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility">
            <summary>Castle.Facilities.EventWiring.EventWiringFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.Dispose01">
            <summary>设置 AbstractFacility.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.Init">
            <summary>设置 EventWiringFacility.Init() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.Init01">
            <summary>设置 EventWiringFacility.Init() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.InitializeStub">
            <summary>初始化 type StubEventWiringFacility 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.EventWiring.Fakes.StubEventWiringFacility.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator">
            <summary>Castle.Facilities.FactorySupport.AccessorActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.#ctor(Castle.Facilities.FactorySupport.AccessorActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 AccessorActivator.AccessorActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.InstantiateCreationContext">
            <summary>设置 AccessorActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimAccessorActivator.AllInstances.InstantiateCreationContext">
            <summary>设置 AccessorActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator">
            <summary>Castle.Facilities.FactorySupport.FactoryActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.#ctor(Castle.Facilities.FactorySupport.FactoryActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 FactoryActivator.FactoryActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.CreateObjectStringMethodInfoString">
            <summary>设置 FactoryActivator.Create(Object factoryInstance, String factoryId, MethodInfo instanceCreateMethod, String factoryCreate) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.InstantiateCreationContext">
            <summary>设置 FactoryActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.AllInstances.CreateObjectStringMethodInfoString">
            <summary>设置 FactoryActivator.Create(Object factoryInstance, String factoryId, MethodInfo instanceCreateMethod, String factoryCreate) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactoryActivator.AllInstances.InstantiateCreationContext">
            <summary>设置 FactoryActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility">
            <summary>Castle.Facilities.FactorySupport.FactorySupportFacility 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.#ctor(Castle.Facilities.FactorySupport.FactorySupportFacility)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.Constructor">
            <summary>设置 FactorySupportFacility.FactorySupportFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.Init">
            <summary>设置 FactorySupportFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.Kernel_ComponentModelCreatedComponentModel">
            <summary>设置 FactorySupportFacility.Kernel_ComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.AllInstances.Init">
            <summary>设置 FactorySupportFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.ShimFactorySupportFacility.AllInstances.Kernel_ComponentModelCreatedComponentModel">
            <summary>设置 FactorySupportFacility.Kernel_ComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator">
            <summary>Castle.Facilities.FactorySupport.AccessorActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.InitializeStub">
            <summary>初始化 type StubAccessorActivator 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 AccessorActivator.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.InstantiateCreationContext">
            <summary>设置 AccessorActivator.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubAccessorActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator">
            <summary>Castle.Facilities.FactorySupport.FactoryActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.InitializeStub">
            <summary>初始化 type StubFactoryActivator 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 FactoryActivator.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.InstantiateCreationContext">
            <summary>设置 FactoryActivator.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubFactoryActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility">
            <summary>Castle.Facilities.FactorySupport.FactorySupportFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.Dispose01">
            <summary>设置 AbstractFacility.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.Init">
            <summary>设置 FactorySupportFacility.Init() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.Init01">
            <summary>设置 FactorySupportFacility.Init() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.InitializeStub">
            <summary>初始化 type StubFactorySupportFacility 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.FactorySupport.Fakes.StubFactorySupportFacility.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator">
            <summary>Castle.Facilities.Remoting.RemoteActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.#ctor(Castle.Facilities.Remoting.RemoteActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 RemoteActivator.RemoteActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.InstantiateCreationContext">
            <summary>设置 RemoteActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivator.AllInstances.InstantiateCreationContext">
            <summary>设置 RemoteActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector">
            <summary>Castle.Facilities.Remoting.RemoteActivatorThroughConnector 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.#ctor(Castle.Facilities.Remoting.RemoteActivatorThroughConnector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 RemoteActivatorThroughConnector.RemoteActivatorThroughConnector(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.InstantiateCreationContext">
            <summary>设置 RemoteActivatorThroughConnector.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughConnector.AllInstances.InstantiateCreationContext">
            <summary>设置 RemoteActivatorThroughConnector.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry">
            <summary>Castle.Facilities.Remoting.RemoteActivatorThroughRegistry 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.#ctor(Castle.Facilities.Remoting.RemoteActivatorThroughRegistry)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 RemoteActivatorThroughRegistry.RemoteActivatorThroughRegistry(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.InstantiateCreationContext">
            <summary>设置 RemoteActivatorThroughRegistry.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteActivatorThroughRegistry.AllInstances.InstantiateCreationContext">
            <summary>设置 RemoteActivatorThroughRegistry.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator">
            <summary>Castle.Facilities.Remoting.RemoteClientActivatedActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.#ctor(Castle.Facilities.Remoting.RemoteClientActivatedActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 RemoteClientActivatedActivator.RemoteClientActivatedActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.InstantiateCreationContext">
            <summary>设置 RemoteClientActivatedActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteClientActivatedActivator.AllInstances.InstantiateCreationContext">
            <summary>设置 RemoteClientActivatedActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator">
            <summary>Castle.Facilities.Remoting.RemoteMarshallerActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.#ctor(Castle.Facilities.Remoting.RemoteMarshallerActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 RemoteMarshallerActivator.RemoteMarshallerActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.InstantiateCreationContext">
            <summary>设置 RemoteMarshallerActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.MarshalObjectComponentModel">
            <summary>设置 RemoteMarshallerActivator.Marshal(Object instance, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemoteMarshallerActivator.AllInstances.InstantiateCreationContext">
            <summary>设置 RemoteMarshallerActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility">
            <summary>Castle.Facilities.Remoting.RemotingFacility 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.#ctor(Castle.Facilities.Remoting.RemotingFacility)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.ConfigureClientFacility">
            <summary>设置 RemotingFacility.ConfigureClientFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.ConfigureServerFacility">
            <summary>设置 RemotingFacility.ConfigureServerFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.Constructor">
            <summary>设置 RemotingFacility.RemotingFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.Dispose">
            <summary>设置 RemotingFacility.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.Init">
            <summary>设置 RemotingFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.ObtainConverter">
            <summary>设置 RemotingFacility.ObtainConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.SetUpRemotingConfiguration">
            <summary>设置 RemotingFacility.SetUpRemotingConfiguration() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.AllInstances.ConfigureClientFacility">
            <summary>设置 RemotingFacility.ConfigureClientFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.AllInstances.ConfigureServerFacility">
            <summary>设置 RemotingFacility.ConfigureServerFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.AllInstances.Dispose">
            <summary>设置 RemotingFacility.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.AllInstances.Init">
            <summary>设置 RemotingFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.AllInstances.ObtainConverter">
            <summary>设置 RemotingFacility.ObtainConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingFacility.AllInstances.SetUpRemotingConfiguration">
            <summary>设置 RemotingFacility.SetUpRemotingConfiguration() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector">
            <summary>Castle.Facilities.Remoting.RemotingInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.#ctor(Castle.Facilities.Remoting.RemotingInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.BuildUriString">
            <summary>设置 RemotingInspector.BuildUri(String cpntUri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.CheckHasBaseURI">
            <summary>设置 RemotingInspector.CheckHasBaseURI() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.CheckURIIsNotNullStringString">
            <summary>设置 RemotingInspector.CheckURIIsNotNull(String uri, String componentId) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.ConstructorITypeConverterBooleanBooleanStringRemotingRegistryRemotingRegistry">
            <summary>设置 RemotingInspector.RemotingInspector(ITypeConverter converter, Boolean isServer, Boolean isClient, String baseUri, RemotingRegistry remoteRegistry, RemotingRegistry localRegistry) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.ProcessModelIKernelComponentModel">
            <summary>设置 RemotingInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.ResetDependenciesComponentModel">
            <summary>设置 RemotingInspector.ResetDependencies(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.ValidateLifeStyleComponentModel">
            <summary>设置 RemotingInspector.ValidateLifeStyle(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.AllInstances.BuildUriString">
            <summary>设置 RemotingInspector.BuildUri(String cpntUri) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.AllInstances.CheckHasBaseURI">
            <summary>设置 RemotingInspector.CheckHasBaseURI() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.AllInstances.CheckURIIsNotNullStringString">
            <summary>设置 RemotingInspector.CheckURIIsNotNull(String uri, String componentId) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 RemotingInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingInspector.AllInstances.ResetDependenciesComponentModel">
            <summary>设置 RemotingInspector.ResetDependencies(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry">
            <summary>Castle.Facilities.Remoting.RemotingRegistry 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.#ctor(Castle.Facilities.Remoting.RemotingRegistry)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AddComponentEntryComponentModel">
            <summary>设置 RemotingRegistry.AddComponentEntry(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.ConstructorIKernel">
            <summary>设置 RemotingRegistry.RemotingRegistry(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.CreateRemoteInstanceString">
            <summary>设置 RemotingRegistry.CreateRemoteInstance(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.Dispose">
            <summary>设置 RemotingRegistry.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.GetModelString">
            <summary>设置 RemotingRegistry.GetModel(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.InitializeLifetimeService">
            <summary>设置 RemotingRegistry.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.PublishString">
            <summary>设置 RemotingRegistry.Publish(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AllInstances.AddComponentEntryComponentModel">
            <summary>设置 RemotingRegistry.AddComponentEntry(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AllInstances.CreateRemoteInstanceString">
            <summary>设置 RemotingRegistry.CreateRemoteInstance(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AllInstances.Dispose">
            <summary>设置 RemotingRegistry.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AllInstances.GetModelString">
            <summary>设置 RemotingRegistry.GetModel(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AllInstances.InitializeLifetimeService">
            <summary>设置 RemotingRegistry.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.ShimRemotingRegistry.AllInstances.PublishString">
            <summary>设置 RemotingRegistry.Publish(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemoteActivator">
            <summary>Castle.Facilities.Remoting.RemoteActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.InitializeStub">
            <summary>初始化 type StubRemoteActivator 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 RemoteActivator.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.InstantiateCreationContext">
            <summary>设置 RemoteActivator.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector">
            <summary>Castle.Facilities.Remoting.RemoteActivatorThroughConnector 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.InitializeStub">
            <summary>初始化 type StubRemoteActivatorThroughConnector 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 RemoteActivatorThroughConnector.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.InstantiateCreationContext">
            <summary>设置 RemoteActivatorThroughConnector.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughConnector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry">
            <summary>Castle.Facilities.Remoting.RemoteActivatorThroughRegistry 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.InitializeStub">
            <summary>初始化 type StubRemoteActivatorThroughRegistry 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 RemoteActivatorThroughRegistry.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.InstantiateCreationContext">
            <summary>设置 RemoteActivatorThroughRegistry.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteActivatorThroughRegistry.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator">
            <summary>Castle.Facilities.Remoting.RemoteClientActivatedActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.InitializeStub">
            <summary>初始化 type StubRemoteClientActivatedActivator 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 RemoteClientActivatedActivator.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.InstantiateCreationContext">
            <summary>设置 RemoteClientActivatedActivator.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteClientActivatedActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator">
            <summary>Castle.Facilities.Remoting.RemoteMarshallerActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.InitializeStub">
            <summary>初始化 type StubRemoteMarshallerActivator 的新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 RemoteMarshallerActivator.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.InstantiateCreationContext">
            <summary>设置 RemoteMarshallerActivator.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemoteMarshallerActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemotingFacility">
            <summary>Castle.Facilities.Remoting.RemotingFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.Dispose">
            <summary>设置 RemotingFacility.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.Dispose01">
            <summary>设置 RemotingFacility.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.Init">
            <summary>设置 RemotingFacility.Init() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.Init01">
            <summary>设置 RemotingFacility.Init() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.InitializeStub">
            <summary>初始化 type StubRemotingFacility 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingFacility.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemotingInspector">
            <summary>Castle.Facilities.Remoting.RemotingInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingInspector.#ctor(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter,System.Boolean,System.Boolean,System.String,Castle.Facilities.Remoting.RemotingRegistry,Castle.Facilities.Remoting.RemotingRegistry)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingInspector.InitializeStub">
            <summary>初始化 type StubRemotingInspector 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry">
            <summary>Castle.Facilities.Remoting.RemotingRegistry 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry.#ctor(Castle.MicroKernel.IKernel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry.InitializeLifetimeService">
            <summary>设置 RemotingRegistry.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry.InitializeLifetimeService01">
            <summary>设置 RemotingRegistry.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry.InitializeStub">
            <summary>初始化 type StubRemotingRegistry 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Remoting.Fakes.StubRemotingRegistry.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartConcern">
            <summary>Castle.Facilities.Startable.StartConcern 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.#ctor(Castle.Facilities.Startable.StartConcern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartConcern.Bind(Castle.MicroKernel.LifecycleConcerns.ILifecycleConcern)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.ApplyComponentModelObject">
            <summary>设置 StartConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.Constructor">
            <summary>设置 StartConcern.StartConcern() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.InstanceGet">
            <summary>设置 StartConcern.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.StaticConstructor">
            <summary>设置 StartConcern.StartConcern() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartConcern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartConcern.AllInstances.ApplyComponentModelObject">
            <summary>设置 StartConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartableFacility">
            <summary>Castle.Facilities.Startable.StartableFacility 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.#ctor(Castle.Facilities.Startable.StartableFacility)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.CheckIfComponentImplementsIStartableComponentModel">
            <summary>设置 StartableFacility.CheckIfComponentImplementsIStartable(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.CheckWaitingList">
            <summary>设置 StartableFacility.CheckWaitingList() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Constructor">
            <summary>设置 StartableFacility.StartableFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.HasStartableAttributeSetComponentModel">
            <summary>设置 StartableFacility.HasStartableAttributeSet(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.Init">
            <summary>设置 StartableFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.OnComponentModelCreatedComponentModel">
            <summary>设置 StartableFacility.OnComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.OnComponentRegisteredStringIHandler">
            <summary>设置 StartableFacility.OnComponentRegistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.StartString">
            <summary>设置 StartableFacility.Start(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.CheckIfComponentImplementsIStartableComponentModel">
            <summary>设置 StartableFacility.CheckIfComponentImplementsIStartable(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.CheckWaitingList">
            <summary>设置 StartableFacility.CheckWaitingList() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.HasStartableAttributeSetComponentModel">
            <summary>设置 StartableFacility.HasStartableAttributeSet(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.Init">
            <summary>设置 StartableFacility.Init() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.OnComponentModelCreatedComponentModel">
            <summary>设置 StartableFacility.OnComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.OnComponentRegisteredStringIHandler">
            <summary>设置 StartableFacility.OnComponentRegistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStartableFacility.AllInstances.StartString">
            <summary>设置 StartableFacility.Start(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStopConcern">
            <summary>Castle.Facilities.Startable.StopConcern 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.#ctor(Castle.Facilities.Startable.StopConcern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.ShimStopConcern.Bind(Castle.MicroKernel.LifecycleConcerns.ILifecycleConcern)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.ApplyComponentModelObject">
            <summary>设置 StopConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.Constructor">
            <summary>设置 StopConcern.StopConcern() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.InstanceGet">
            <summary>设置 StopConcern.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.StaticConstructor">
            <summary>设置 StopConcern.StopConcern() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.ShimStopConcern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.ShimStopConcern.AllInstances.ApplyComponentModelObject">
            <summary>设置 StopConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.StubStartConcern">
            <summary>Castle.Facilities.Startable.StartConcern 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartConcern.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartConcern.InitializeStub">
            <summary>初始化 type StubStartConcern 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartConcern.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartConcern.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartConcern.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.StubStartableFacility">
            <summary>Castle.Facilities.Startable.StartableFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Startable.Fakes.StubStartableFacility.Dispose01">
            <summary>设置 AbstractFacility.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.Init">
            <summary>设置 StartableFacility.Init() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.Startable.Fakes.StubStartableFacility.Init01">
            <summary>设置 StartableFacility.Init() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStartableFacility.InitializeStub">
            <summary>初始化 type StubStartableFacility 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableFacility.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableFacility.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStartableFacility.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.Startable.Fakes.StubStopConcern">
            <summary>Castle.Facilities.Startable.StopConcern 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStopConcern.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.Startable.Fakes.StubStopConcern.InitializeStub">
            <summary>初始化 type StubStopConcern 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStopConcern.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStopConcern.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.Startable.Fakes.StubStopConcern.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimEmpty">
            <summary>Castle.Facilities.TypedFactory.Empty 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimEmpty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimEmpty.#ctor(Castle.Facilities.TypedFactory.Empty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimEmpty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimEmpty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimEmpty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimEmpty.Constructor">
            <summary>设置 Empty.Empty() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimEmpty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry">
            <summary>Castle.Facilities.TypedFactory.FactoryEntry 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.#ctor(Castle.Facilities.TypedFactory.FactoryEntry)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.ConstructorStringTypeStringString">
            <summary>设置 FactoryEntry.FactoryEntry(String id, Type factoryInterface, String creationMethod, String destructionMethod) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.CreationMethodGet">
            <summary>设置 FactoryEntry.get_CreationMethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.DestructionMethodGet">
            <summary>设置 FactoryEntry.get_DestructionMethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.FactoryInterfaceGet">
            <summary>设置 FactoryEntry.get_FactoryInterface() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.IdGet">
            <summary>设置 FactoryEntry.get_Id() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.CreationMethodGet">
            <summary>设置 FactoryEntry.get_CreationMethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.DestructionMethodGet">
            <summary>设置 FactoryEntry.get_DestructionMethod() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.FactoryInterfaceGet">
            <summary>设置 FactoryEntry.get_FactoryInterface() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryEntry.AllInstances.IdGet">
            <summary>设置 FactoryEntry.get_Id() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor">
            <summary>Castle.Facilities.TypedFactory.FactoryInterceptor 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.#ctor(Castle.Facilities.TypedFactory.FactoryInterceptor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.Bind(Castle.Core.Interceptor.IMethodInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.Bind(Castle.Core.Interceptor.IOnBehalfAware)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.ConstructorIKernel">
            <summary>设置 FactoryInterceptor.FactoryInterceptor(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.InterceptIMethodInvocationObjectArray">
            <summary>设置 FactoryInterceptor.Intercept(IMethodInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.SetInterceptedComponentModelComponentModel">
            <summary>设置 FactoryInterceptor.SetInterceptedComponentModel(ComponentModel target) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.AllInstances.InterceptIMethodInvocationObjectArray">
            <summary>设置 FactoryInterceptor.Intercept(IMethodInvocation invocation, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimFactoryInterceptor.AllInstances.SetInterceptedComponentModelComponentModel">
            <summary>设置 FactoryInterceptor.SetInterceptedComponentModel(ComponentModel target) 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility">
            <summary>Castle.Facilities.TypedFactory.TypedFactoryFacility 的填充码类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.#ctor(Castle.Facilities.TypedFactory.TypedFactoryFacility)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AddFactoriesIConfigurationITypeConverter">
            <summary>设置 TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AddTypedFactoryEntryFactoryEntry">
            <summary>设置 TypedFactoryFacility.AddTypedFactoryEntry(FactoryEntry entry) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Constructor">
            <summary>设置 TypedFactoryFacility.TypedFactoryFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.Init">
            <summary>设置 TypedFactoryFacility.Init() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.AddFactoriesIConfigurationITypeConverter">
            <summary>设置 TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.AddTypedFactoryEntryFactoryEntry">
            <summary>设置 TypedFactoryFacility.AddTypedFactoryEntry(FactoryEntry entry) 的 填充码</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.ShimTypedFactoryFacility.AllInstances.Init">
            <summary>设置 TypedFactoryFacility.Init() 的 填充码</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubEmpty">
            <summary>Castle.Facilities.TypedFactory.Empty 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubEmpty.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubEmpty.InitializeStub">
            <summary>初始化 type StubEmpty 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubEmpty.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubEmpty.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubEmpty.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry">
            <summary>Castle.Facilities.TypedFactory.FactoryEntry 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.InitializeStub">
            <summary>初始化 type StubFactoryEntry 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryEntry.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubFactoryInterceptor">
            <summary>Castle.Facilities.TypedFactory.FactoryInterceptor 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryInterceptor.#ctor(Castle.MicroKernel.IKernel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubFactoryInterceptor.InitializeStub">
            <summary>初始化 type StubFactoryInterceptor 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryInterceptor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryInterceptor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubFactoryInterceptor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility">
            <summary>Castle.Facilities.TypedFactory.TypedFactoryFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.AddFactories(Castle.Core.Configuration.IConfiguration,Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>设置 TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter) 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.AddFactoriesIConfigurationITypeConverter">
            <summary>设置 TypedFactoryFacility.AddFactories(IConfiguration facilityConfig, ITypeConverter converter) 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Dispose01">
            <summary>设置 AbstractFacility.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Init">
            <summary>设置 TypedFactoryFacility.Init() 的 存根</summary>
        </member>
        <member name="F:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.Init01">
            <summary>设置 TypedFactoryFacility.Init() 的 stub</summary>
        </member>
        <member name="M:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.InitializeStub">
            <summary>初始化 type StubTypedFactoryFacility 的新实例</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.Facilities.TypedFactory.Fakes.StubTypedFactoryFacility.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator">
            <summary>Castle.MicroKernel.ComponentActivator.AbstractComponentActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.#ctor(Castle.MicroKernel.ComponentActivator.AbstractComponentActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 AbstractComponentActivator.AbstractComponentActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.KernelGet">
            <summary>设置 AbstractComponentActivator.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.ModelGet">
            <summary>设置 AbstractComponentActivator.get_Model() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.OnCreationGet">
            <summary>设置 AbstractComponentActivator.get_OnCreation() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.OnDestructionGet">
            <summary>设置 AbstractComponentActivator.get_OnDestruction() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.KernelGet">
            <summary>设置 AbstractComponentActivator.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.ModelGet">
            <summary>设置 AbstractComponentActivator.get_Model() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.OnCreationGet">
            <summary>设置 AbstractComponentActivator.get_OnCreation() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimAbstractComponentActivator.AllInstances.OnDestructionGet">
            <summary>设置 AbstractComponentActivator.get_OnDestruction() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException">
            <summary>Castle.MicroKernel.ComponentActivator.ComponentActivatorException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.#ctor(Castle.MicroKernel.ComponentActivator.ComponentActivatorException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ComponentActivatorException.ComponentActivatorException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ConstructorString">
            <summary>设置 ComponentActivatorException.ComponentActivatorException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.ConstructorStringException">
            <summary>设置 ComponentActivatorException.ComponentActivatorException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimComponentActivatorException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator">
            <summary>Castle.MicroKernel.ComponentActivator.DefaultComponentActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.#ctor(Castle.MicroKernel.ComponentActivator.DefaultComponentActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 DefaultComponentActivator.DefaultComponentActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.InstantiateCreationContext">
            <summary>设置 DefaultComponentActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.InternalCreateCreationContext">
            <summary>设置 DefaultComponentActivator.InternalCreate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.InstantiateCreationContext">
            <summary>设置 DefaultComponentActivator.Instantiate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.InternalCreateCreationContext">
            <summary>设置 DefaultComponentActivator.InternalCreate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimDefaultComponentActivator.AllInstances.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator">
            <summary>Castle.MicroKernel.ComponentActivator.ExternalInstanceActivator 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.#ctor(Castle.MicroKernel.ComponentActivator.ExternalInstanceActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.Bind(Castle.MicroKernel.IComponentActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.ConstructorComponentModelIKernelComponentInstanceDelegateComponentInstanceDelegate">
            <summary>设置 ExternalInstanceActivator.ExternalInstanceActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.InternalCreateCreationContext">
            <summary>设置 ExternalInstanceActivator.InternalCreate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.InternalDestroyObject">
            <summary>设置 ExternalInstanceActivator.InternalDestroy(Object instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances.InternalCreateCreationContext">
            <summary>设置 ExternalInstanceActivator.InternalCreate(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.ShimExternalInstanceActivator.AllInstances.InternalDestroyObject">
            <summary>设置 ExternalInstanceActivator.InternalDestroy(Object instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator">
            <summary>Castle.MicroKernel.ComponentActivator.AbstractComponentActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InitializeStub">
            <summary>初始化 type StubAbstractComponentActivator 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalCreate(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.InternalCreate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalCreateCreationContext">
            <summary>设置 AbstractComponentActivator.InternalCreate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalDestroy(System.Object)">
            <summary>设置 AbstractComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InternalDestroyObject">
            <summary>设置 AbstractComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubAbstractComponentActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException">
            <summary>Castle.MicroKernel.ComponentActivator.ComponentActivatorException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubComponentActivatorException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubComponentActivatorException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.InitializeStub">
            <summary>初始化 type StubComponentActivatorException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubComponentActivatorException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator">
            <summary>Castle.MicroKernel.ComponentActivator.DefaultComponentActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyCommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyCommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyCommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyConcerns(System.Object[],System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyConcernsObjectArrayObject">
            <summary>设置 DefaultComponentActivator.ApplyConcerns(Object[] steps, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyDecommissionConcerns(System.Object)">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.ApplyDecommissionConcernsObject">
            <summary>设置 DefaultComponentActivator.ApplyDecommissionConcerns(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CanSatisfyDependency(Castle.MicroKernel.CreationContext,Castle.Core.DependencyModel)">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CanSatisfyDependencyCreationContextDependencyModel">
            <summary>设置 DefaultComponentActivator.CanSatisfyDependency(CreationContext context, DependencyModel dep) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateConstructorArguments(Castle.Core.ConstructorCandidate,Castle.MicroKernel.CreationContext,System.Type[]@)">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateConstructorArgumentsConstructorCandidateCreationContextTypeArrayOut">
            <summary>设置 DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context, Type[]&amp; signature) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateInstance(Castle.MicroKernel.CreationContext,System.Object[],System.Type[])">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CreateInstanceCreationContextObjectArrayTypeArray">
            <summary>设置 DefaultComponentActivator.CreateInstance(CreationContext context, Object[] arguments, Type[] signature) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InitializeStub">
            <summary>初始化 type StubDefaultComponentActivator 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.Instantiate(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.Instantiate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InstantiateCreationContext">
            <summary>设置 DefaultComponentActivator.Instantiate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InternalDestroy(System.Object)">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InternalDestroyObject">
            <summary>设置 DefaultComponentActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SelectEligibleConstructor(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SelectEligibleConstructorCreationContext">
            <summary>设置 DefaultComponentActivator.SelectEligibleConstructor(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SetUpProperties(System.Object,Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.SetUpPropertiesObjectCreationContext">
            <summary>设置 DefaultComponentActivator.SetUpProperties(Object instance, CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubDefaultComponentActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator">
            <summary>Castle.MicroKernel.ComponentActivator.ExternalInstanceActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.#ctor(Castle.Core.ComponentModel,Castle.MicroKernel.IKernel,Castle.MicroKernel.ComponentInstanceDelegate,Castle.MicroKernel.ComponentInstanceDelegate)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.CreateCreationContext">
            <summary>设置 AbstractComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.Destroy(System.Object)">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.DestroyObject">
            <summary>设置 AbstractComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InitializeStub">
            <summary>初始化 type StubExternalInstanceActivator 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalCreate(Castle.MicroKernel.CreationContext)">
            <summary>设置 ExternalInstanceActivator.InternalCreate(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalCreateCreationContext">
            <summary>设置 ExternalInstanceActivator.InternalCreate(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalDestroy(System.Object)">
            <summary>设置 ExternalInstanceActivator.InternalDestroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InternalDestroyObject">
            <summary>设置 ExternalInstanceActivator.InternalDestroy(Object instance) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ComponentActivator.Fakes.StubExternalInstanceActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException">
            <summary>Castle.MicroKernel.Exceptions.CircularDependecyException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.#ctor(Castle.MicroKernel.Exceptions.CircularDependecyException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 CircularDependecyException.CircularDependecyException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.ConstructorString">
            <summary>设置 CircularDependecyException.CircularDependecyException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.ConstructorStringException">
            <summary>设置 CircularDependecyException.CircularDependecyException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Exceptions.Fakes.ShimCircularDependecyException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException">
            <summary>Castle.MicroKernel.Exceptions.CircularDependecyException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCircularDependecyException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCircularDependecyException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.InitializeStub">
            <summary>初始化 type StubCircularDependecyException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Exceptions.Fakes.StubCircularDependecyException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility">
            <summary>Castle.MicroKernel.Facilities.AbstractFacility 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.#ctor(Castle.MicroKernel.Facilities.AbstractFacility)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Bind(Castle.MicroKernel.IFacility)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Constructor">
            <summary>设置 AbstractFacility.AbstractFacility() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.FacilityConfigGet">
            <summary>设置 AbstractFacility.get_FacilityConfig() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.InitIKernelIConfiguration">
            <summary>设置 AbstractFacility.Init(IKernel kernel, IConfiguration facilityConfig) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.KernelGet">
            <summary>设置 AbstractFacility.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.Terminate">
            <summary>设置 AbstractFacility.Terminate() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.FacilityConfigGet">
            <summary>设置 AbstractFacility.get_FacilityConfig() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.InitIKernelIConfiguration">
            <summary>设置 AbstractFacility.Init(IKernel kernel, IConfiguration facilityConfig) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.KernelGet">
            <summary>设置 AbstractFacility.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimAbstractFacility.AllInstances.Terminate">
            <summary>设置 AbstractFacility.Terminate() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException">
            <summary>Castle.MicroKernel.Facilities.FacilityException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.#ctor(Castle.MicroKernel.Facilities.FacilityException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 FacilityException.FacilityException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.ConstructorString">
            <summary>设置 FacilityException.FacilityException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.ConstructorStringException">
            <summary>设置 FacilityException.FacilityException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.ShimFacilityException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility">
            <summary>Castle.MicroKernel.Facilities.AbstractFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Dispose">
            <summary>设置 AbstractFacility.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Dispose01">
            <summary>设置 AbstractFacility.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Init">
            <summary>设置 AbstractFacility.Init() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.Init01">
            <summary>设置 AbstractFacility.Init() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.InitializeStub">
            <summary>初始化 type StubAbstractFacility 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubAbstractFacility.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Facilities.Fakes.StubFacilityException">
            <summary>Castle.MicroKernel.Facilities.FacilityException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubFacilityException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubFacilityException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.InitializeStub">
            <summary>初始化 type StubFacilityException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Facilities.Fakes.StubFacilityException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimAbstractSubSystem">
            <summary>Castle.MicroKernel.AbstractSubSystem 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.#ctor(Castle.MicroKernel.AbstractSubSystem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Constructor">
            <summary>设置 AbstractSubSystem.AbstractSubSystem() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.KernelGet">
            <summary>设置 AbstractSubSystem.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.KernelGet">
            <summary>设置 AbstractSubSystem.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimAbstractSubSystem.AllInstances.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentNotFoundException">
            <summary>Castle.MicroKernel.ComponentNotFoundException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.#ctor(Castle.MicroKernel.ComponentNotFoundException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ComponentNotFoundException.ComponentNotFoundException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorString">
            <summary>设置 ComponentNotFoundException.ComponentNotFoundException(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.ConstructorType">
            <summary>设置 ComponentNotFoundException.ComponentNotFoundException(Type service) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentNotFoundException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentRegistrationException">
            <summary>Castle.MicroKernel.ComponentRegistrationException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.#ctor(Castle.MicroKernel.ComponentRegistrationException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ComponentRegistrationException.ComponentRegistrationException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.ConstructorString">
            <summary>设置 ComponentRegistrationException.ComponentRegistrationException(String message) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimComponentRegistrationException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimCreationContext">
            <summary>Castle.MicroKernel.CreationContext 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCreationContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCreationContext.#ctor(Castle.MicroKernel.CreationContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCreationContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCreationContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimCreationContext.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 CreationContext.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ConstructorDependencyModelArray">
            <summary>设置 CreationContext.CreationContext(DependencyModel[] dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ConstructorIHandlerCreationContext">
            <summary>设置 CreationContext.CreationContext(IHandler handler, CreationContext parentContext) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ConstructorIHandlerDependencyModelCollection">
            <summary>设置 CreationContext.CreationContext(IHandler handler, DependencyModelCollection dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ConstructorIHandlerIDictionary">
            <summary>设置 CreationContext.CreationContext(IHandler handler, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ConstructorIHandlerTypeCreationContext">
            <summary>设置 CreationContext.CreationContext(IHandler handler, Type typeToExtractGenericArguments, CreationContext parentContext) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ConstructorIHandlerTypeIDictionary">
            <summary>设置 CreationContext.CreationContext(IHandler handler, Type typeToExtractGenericArguments, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.DependenciesGet">
            <summary>设置 CreationContext.get_Dependencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ExtractGenericArgumentsType">
            <summary>设置 CreationContext.ExtractGenericArguments(Type typeToExtractGenericArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.GenericArgumentsGet">
            <summary>设置 CreationContext.get_GenericArguments() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.HandlerGet">
            <summary>设置 CreationContext.get_Handler() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.HasAdditionalParametersGet">
            <summary>设置 CreationContext.get_HasAdditionalParameters() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 CreationContext.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.StaticConstructor">
            <summary>设置 CreationContext.CreationContext() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.TrackDependencyMemberInfoDependencyModel">
            <summary>设置 CreationContext.TrackDependency(MemberInfo info, DependencyModel dependencyModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.UntrackDependencyDependencyModel">
            <summary>设置 CreationContext.UntrackDependency(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 CreationContext.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.DependenciesGet">
            <summary>设置 CreationContext.get_Dependencies() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.GenericArgumentsGet">
            <summary>设置 CreationContext.get_GenericArguments() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.HandlerGet">
            <summary>设置 CreationContext.get_Handler() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.HasAdditionalParametersGet">
            <summary>设置 CreationContext.get_HasAdditionalParameters() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 CreationContext.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.TrackDependencyMemberInfoDependencyModel">
            <summary>设置 CreationContext.TrackDependency(MemberInfo info, DependencyModel dependencyModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimCreationContext.AllInstances.UntrackDependencyDependencyModel">
            <summary>设置 CreationContext.UntrackDependency(DependencyModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimDefaultKernel">
            <summary>Castle.MicroKernel.DefaultKernel 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.#ctor(Castle.MicroKernel.DefaultKernel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(Castle.MicroKernel.IKernel)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(Castle.MicroKernel.IKernelEvents)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimDefaultKernel.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddChildKernelIKernel">
            <summary>设置 DefaultKernel.AddChildKernel(IKernel childKernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentInstanceStringObject">
            <summary>设置 DefaultKernel.AddComponentInstance(String key, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentInstanceStringTypeObject">
            <summary>设置 DefaultKernel.AddComponentInstance(String key, Type serviceType, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeLifestyleType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeLifestyleTypeBoolean">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeTypeLifestyleType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentStringTypeTypeLifestyleTypeBoolean">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddCustomComponentComponentModel">
            <summary>设置 DefaultKernel.AddCustomComponent(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddFacilityStringIFacility">
            <summary>设置 DefaultKernel.AddFacility(String key, IFacility facility) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AddSubSystemStringISubSystem">
            <summary>设置 DefaultKernel.AddSubSystem(String key, ISubSystem subsystem) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentModelBuilderGet">
            <summary>设置 DefaultKernel.get_ComponentModelBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ComponentModelBuilderSetIComponentModelBuilder">
            <summary>设置 DefaultKernel.set_ComponentModelBuilder(IComponentModelBuilder value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConfigurationStoreGet">
            <summary>设置 DefaultKernel.get_ConfigurationStore() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConfigurationStoreSetIConfigurationStore">
            <summary>设置 DefaultKernel.set_ConfigurationStore(IConfigurationStore value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.Constructor">
            <summary>设置 DefaultKernel.DefaultKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConstructorIDependencyResolverIProxyFactory">
            <summary>设置 DefaultKernel.DefaultKernel(IDependencyResolver resolver, IProxyFactory proxyFactory) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConstructorIProxyFactory">
            <summary>设置 DefaultKernel.DefaultKernel(IProxyFactory proxyFactory) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ConstructorSerializationInfoStreamingContext">
            <summary>设置 DefaultKernel.DefaultKernel(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CreateComponentActivatorComponentModel">
            <summary>设置 DefaultKernel.CreateComponentActivator(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.CreateCreationContextIHandlerTypeIDictionary">
            <summary>设置 DefaultKernel.CreateCreationContext(IHandler handler, Type typeToExtractGenericArguments, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.Dispose">
            <summary>设置 DefaultKernel.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeComponentsInstancesWithinTracker">
            <summary>设置 DefaultKernel.DisposeComponentsInstancesWithinTracker() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeHandlerIHandler">
            <summary>设置 DefaultKernel.DisposeHandler(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeHandlers">
            <summary>设置 DefaultKernel.DisposeHandlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.DisposeSubKernels">
            <summary>设置 DefaultKernel.DisposeSubKernels() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetAssignableHandlersType">
            <summary>设置 DefaultKernel.GetAssignableHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetFacilities">
            <summary>设置 DefaultKernel.GetFacilities() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetHandlerString">
            <summary>设置 DefaultKernel.GetHandler(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetHandlerType">
            <summary>设置 DefaultKernel.GetHandler(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetHandlersType">
            <summary>设置 DefaultKernel.GetHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 DefaultKernel.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GetSubSystemString">
            <summary>设置 DefaultKernel.GetSubSystem(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.GraphNodesGet">
            <summary>设置 DefaultKernel.get_GraphNodes() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HandlerFactoryGet">
            <summary>设置 DefaultKernel.get_HandlerFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HasComponentString">
            <summary>设置 DefaultKernel.HasComponent(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.HasComponentType">
            <summary>设置 DefaultKernel.HasComponent(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ItemGetString">
            <summary>设置 DefaultKernel.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ItemGetType">
            <summary>设置 DefaultKernel.get_Item(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.NamingSubSystemGet">
            <summary>设置 DefaultKernel.get_NamingSubSystem() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ParentGet">
            <summary>设置 DefaultKernel.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ParentSetIKernel">
            <summary>设置 DefaultKernel.set_Parent(IKernel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ProxyFactoryGet">
            <summary>设置 DefaultKernel.get_ProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ProxyFactorySetIProxyFactory">
            <summary>设置 DefaultKernel.set_ProxyFactory(IProxyFactory value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegisterCustomDependenciesStringIDictionary">
            <summary>设置 DefaultKernel.RegisterCustomDependencies(String key, IDictionary dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegisterCustomDependenciesTypeIDictionary">
            <summary>设置 DefaultKernel.RegisterCustomDependencies(Type service, IDictionary dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegisterHandlerStringIHandler">
            <summary>设置 DefaultKernel.RegisterHandler(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RegisterSubSystems">
            <summary>设置 DefaultKernel.RegisterSubSystems() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ReleaseComponentObject">
            <summary>设置 DefaultKernel.ReleaseComponent(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ReleasePolicyGet">
            <summary>设置 DefaultKernel.get_ReleasePolicy() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ReleasePolicySetIReleasePolicy">
            <summary>设置 DefaultKernel.set_ReleasePolicy(IReleasePolicy value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RemoveChildKernelIKernel">
            <summary>设置 DefaultKernel.RemoveChildKernel(IKernel childKernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.RemoveComponentString">
            <summary>设置 DefaultKernel.RemoveComponent(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveComponentIHandler">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveComponentIHandlerIDictionary">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveComponentIHandlerType">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveComponentIHandlerTypeIDictionary">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveStringIDictionary">
            <summary>设置 DefaultKernel.Resolve(String key, IDictionary arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveStringType">
            <summary>设置 DefaultKernel.Resolve(String key, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolveTypeIDictionary">
            <summary>设置 DefaultKernel.Resolve(Type service, IDictionary arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.ResolverGet">
            <summary>设置 DefaultKernel.get_Resolver() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.SubscribeToParentKernel">
            <summary>设置 DefaultKernel.SubscribeToParentKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.SystemRuntimeSerializationIDeserializationCallbackOnDeserializationObject">
            <summary>设置 DefaultKernel.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.TerminateFacilities">
            <summary>设置 DefaultKernel.TerminateFacilities() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.UnsubscribeFromParentKernel">
            <summary>设置 DefaultKernel.UnsubscribeFromParentKernel() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddChildKernelIKernel">
            <summary>设置 DefaultKernel.AddChildKernel(IKernel childKernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentInstanceStringObject">
            <summary>设置 DefaultKernel.AddComponentInstance(String key, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentInstanceStringTypeObject">
            <summary>设置 DefaultKernel.AddComponentInstance(String key, Type serviceType, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeLifestyleType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeLifestyleTypeBoolean">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeTypeLifestyleType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentStringTypeTypeLifestyleTypeBoolean">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddCustomComponentComponentModel">
            <summary>设置 DefaultKernel.AddCustomComponent(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddFacilityStringIFacility">
            <summary>设置 DefaultKernel.AddFacility(String key, IFacility facility) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.AddSubSystemStringISubSystem">
            <summary>设置 DefaultKernel.AddSubSystem(String key, ISubSystem subsystem) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentModelBuilderGet">
            <summary>设置 DefaultKernel.get_ComponentModelBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ComponentModelBuilderSetIComponentModelBuilder">
            <summary>设置 DefaultKernel.set_ComponentModelBuilder(IComponentModelBuilder value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ConfigurationStoreGet">
            <summary>设置 DefaultKernel.get_ConfigurationStore() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ConfigurationStoreSetIConfigurationStore">
            <summary>设置 DefaultKernel.set_ConfigurationStore(IConfigurationStore value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CreateComponentActivatorComponentModel">
            <summary>设置 DefaultKernel.CreateComponentActivator(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.CreateCreationContextIHandlerTypeIDictionary">
            <summary>设置 DefaultKernel.CreateCreationContext(IHandler handler, Type typeToExtractGenericArguments, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.Dispose">
            <summary>设置 DefaultKernel.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeComponentsInstancesWithinTracker">
            <summary>设置 DefaultKernel.DisposeComponentsInstancesWithinTracker() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeHandlerIHandler">
            <summary>设置 DefaultKernel.DisposeHandler(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeHandlers">
            <summary>设置 DefaultKernel.DisposeHandlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.DisposeSubKernels">
            <summary>设置 DefaultKernel.DisposeSubKernels() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetAssignableHandlersType">
            <summary>设置 DefaultKernel.GetAssignableHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetFacilities">
            <summary>设置 DefaultKernel.GetFacilities() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetHandlerString">
            <summary>设置 DefaultKernel.GetHandler(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetHandlerType">
            <summary>设置 DefaultKernel.GetHandler(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetHandlersType">
            <summary>设置 DefaultKernel.GetHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 DefaultKernel.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GetSubSystemString">
            <summary>设置 DefaultKernel.GetSubSystem(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.GraphNodesGet">
            <summary>设置 DefaultKernel.get_GraphNodes() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HandlerFactoryGet">
            <summary>设置 DefaultKernel.get_HandlerFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HasComponentString">
            <summary>设置 DefaultKernel.HasComponent(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.HasComponentType">
            <summary>设置 DefaultKernel.HasComponent(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ItemGetString">
            <summary>设置 DefaultKernel.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ItemGetType">
            <summary>设置 DefaultKernel.get_Item(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.NamingSubSystemGet">
            <summary>设置 DefaultKernel.get_NamingSubSystem() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ParentGet">
            <summary>设置 DefaultKernel.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ParentSetIKernel">
            <summary>设置 DefaultKernel.set_Parent(IKernel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ProxyFactoryGet">
            <summary>设置 DefaultKernel.get_ProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ProxyFactorySetIProxyFactory">
            <summary>设置 DefaultKernel.set_ProxyFactory(IProxyFactory value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegisterCustomDependenciesStringIDictionary">
            <summary>设置 DefaultKernel.RegisterCustomDependencies(String key, IDictionary dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegisterCustomDependenciesTypeIDictionary">
            <summary>设置 DefaultKernel.RegisterCustomDependencies(Type service, IDictionary dependencies) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegisterHandlerStringIHandler">
            <summary>设置 DefaultKernel.RegisterHandler(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RegisterSubSystems">
            <summary>设置 DefaultKernel.RegisterSubSystems() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ReleaseComponentObject">
            <summary>设置 DefaultKernel.ReleaseComponent(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ReleasePolicyGet">
            <summary>设置 DefaultKernel.get_ReleasePolicy() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ReleasePolicySetIReleasePolicy">
            <summary>设置 DefaultKernel.set_ReleasePolicy(IReleasePolicy value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RemoveChildKernelIKernel">
            <summary>设置 DefaultKernel.RemoveChildKernel(IKernel childKernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.RemoveComponentString">
            <summary>设置 DefaultKernel.RemoveComponent(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveComponentIHandler">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveComponentIHandlerIDictionary">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveComponentIHandlerType">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveComponentIHandlerTypeIDictionary">
            <summary>设置 DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveStringIDictionary">
            <summary>设置 DefaultKernel.Resolve(String key, IDictionary arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveStringType">
            <summary>设置 DefaultKernel.Resolve(String key, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolveTypeIDictionary">
            <summary>设置 DefaultKernel.Resolve(Type service, IDictionary arguments) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.ResolverGet">
            <summary>设置 DefaultKernel.get_Resolver() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.SubscribeToParentKernel">
            <summary>设置 DefaultKernel.SubscribeToParentKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.SystemRuntimeSerializationIDeserializationCallbackOnDeserializationObject">
            <summary>设置 DefaultKernel.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.TerminateFacilities">
            <summary>设置 DefaultKernel.TerminateFacilities() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimDefaultKernel.AllInstances.UnsubscribeFromParentKernel">
            <summary>设置 DefaultKernel.UnsubscribeFromParentKernel() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimKernelEventSupport">
            <summary>Castle.MicroKernel.KernelEventSupport 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelEventSupport.#ctor(Castle.MicroKernel.KernelEventSupport)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelEventSupport.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelEventSupport.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelEventSupport.Bind(Castle.MicroKernel.IKernelEvents)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelEventSupport.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AddedAsChildKernelAddEventHandler">
            <summary>设置 KernelEventSupport.add_AddedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AddedAsChildKernelRemoveEventHandler">
            <summary>设置 KernelEventSupport.remove_AddedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentCreatedAddComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.add_ComponentCreated(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentCreatedRemoveComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentCreated(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentDestroyedAddComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.add_ComponentDestroyed(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentDestroyedRemoveComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentDestroyed(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentModelCreatedAddComponentModelDelegate">
            <summary>设置 KernelEventSupport.add_ComponentModelCreated(ComponentModelDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentModelCreatedRemoveComponentModelDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentModelCreated(ComponentModelDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentRegisteredAddComponentDataDelegate">
            <summary>设置 KernelEventSupport.add_ComponentRegistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentRegisteredRemoveComponentDataDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentRegistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentUnregisteredAddComponentDataDelegate">
            <summary>设置 KernelEventSupport.add_ComponentUnregistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ComponentUnregisteredRemoveComponentDataDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentUnregistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.Constructor">
            <summary>设置 KernelEventSupport.KernelEventSupport() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.ConstructorSerializationInfoStreamingContext">
            <summary>设置 KernelEventSupport.KernelEventSupport(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.DependencyResolvingAddDependencyDelegate">
            <summary>设置 KernelEventSupport.add_DependencyResolving(DependencyDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.DependencyResolvingRemoveDependencyDelegate">
            <summary>设置 KernelEventSupport.remove_DependencyResolving(DependencyDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 KernelEventSupport.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.HandlerRegisteredAddHandlerDelegate">
            <summary>设置 KernelEventSupport.add_HandlerRegistered(HandlerDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.HandlerRegisteredRemoveHandlerDelegate">
            <summary>设置 KernelEventSupport.remove_HandlerRegistered(HandlerDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.InitializeLifetimeService">
            <summary>设置 KernelEventSupport.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseAddedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseAddedAsChildKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseComponentCreatedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentCreated(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseComponentDestroyedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentDestroyed(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseComponentModelCreatedComponentModel">
            <summary>设置 KernelEventSupport.RaiseComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseComponentRegisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentRegistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseComponentUnregisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentUnregistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>设置 KernelEventSupport.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseHandlerRegisteredIHandler">
            <summary>设置 KernelEventSupport.RaiseHandlerRegistered(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RaiseRemovedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseRemovedAsChildKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RemovedAsChildKernelAddEventHandler">
            <summary>设置 KernelEventSupport.add_RemovedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.RemovedAsChildKernelRemoveEventHandler">
            <summary>设置 KernelEventSupport.remove_RemovedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.StaticConstructor">
            <summary>设置 KernelEventSupport.KernelEventSupport() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.AddedAsChildKernelAddEventHandler">
            <summary>设置 KernelEventSupport.add_AddedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.AddedAsChildKernelRemoveEventHandler">
            <summary>设置 KernelEventSupport.remove_AddedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentCreatedAddComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.add_ComponentCreated(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentCreatedRemoveComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentCreated(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentDestroyedAddComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.add_ComponentDestroyed(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentDestroyedRemoveComponentInstanceDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentDestroyed(ComponentInstanceDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentModelCreatedAddComponentModelDelegate">
            <summary>设置 KernelEventSupport.add_ComponentModelCreated(ComponentModelDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentModelCreatedRemoveComponentModelDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentModelCreated(ComponentModelDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentRegisteredAddComponentDataDelegate">
            <summary>设置 KernelEventSupport.add_ComponentRegistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentRegisteredRemoveComponentDataDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentRegistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentUnregisteredAddComponentDataDelegate">
            <summary>设置 KernelEventSupport.add_ComponentUnregistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.ComponentUnregisteredRemoveComponentDataDelegate">
            <summary>设置 KernelEventSupport.remove_ComponentUnregistered(ComponentDataDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.DependencyResolvingAddDependencyDelegate">
            <summary>设置 KernelEventSupport.add_DependencyResolving(DependencyDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.DependencyResolvingRemoveDependencyDelegate">
            <summary>设置 KernelEventSupport.remove_DependencyResolving(DependencyDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 KernelEventSupport.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.HandlerRegisteredAddHandlerDelegate">
            <summary>设置 KernelEventSupport.add_HandlerRegistered(HandlerDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.HandlerRegisteredRemoveHandlerDelegate">
            <summary>设置 KernelEventSupport.remove_HandlerRegistered(HandlerDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.InitializeLifetimeService">
            <summary>设置 KernelEventSupport.InitializeLifetimeService() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseAddedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseAddedAsChildKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseComponentCreatedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentCreated(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseComponentDestroyedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentDestroyed(ComponentModel model, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseComponentModelCreatedComponentModel">
            <summary>设置 KernelEventSupport.RaiseComponentModelCreated(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseComponentRegisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentRegistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseComponentUnregisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentUnregistered(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>设置 KernelEventSupport.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseHandlerRegisteredIHandler">
            <summary>设置 KernelEventSupport.RaiseHandlerRegistered(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RaiseRemovedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseRemovedAsChildKernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RemovedAsChildKernelAddEventHandler">
            <summary>设置 KernelEventSupport.add_RemovedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelEventSupport.AllInstances.RemovedAsChildKernelRemoveEventHandler">
            <summary>设置 KernelEventSupport.remove_RemovedAsChildKernel(EventHandler value) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimKernelException">
            <summary>Castle.MicroKernel.KernelException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.#ctor(Castle.MicroKernel.KernelException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimKernelException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 KernelException.KernelException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.ConstructorString">
            <summary>设置 KernelException.KernelException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimKernelException.ConstructorStringException">
            <summary>设置 KernelException.KernelException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimKernelException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimSubSystemConstants">
            <summary>Castle.MicroKernel.SubSystemConstants 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimSubSystemConstants.#ctor(Castle.MicroKernel.SubSystemConstants)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimSubSystemConstants.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.ShimSubSystemConstants.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimSubSystemConstants.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimSubSystemConstants.Constructor">
            <summary>设置 SubSystemConstants.SubSystemConstants() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.ShimSubSystemConstants.StaticConstructor">
            <summary>设置 SubSystemConstants.SubSystemConstants() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.ShimSubSystemConstants.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubAbstractSubSystem">
            <summary>Castle.MicroKernel.AbstractSubSystem 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitializeLifetimeService01">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InitializeStub">
            <summary>初始化 type StubAbstractSubSystem 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubAbstractSubSystem.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubAbstractSubSystem.Terminate01">
            <summary>设置 AbstractSubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubAbstractSubSystem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubAbstractSubSystem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubComponentNotFoundException">
            <summary>Castle.MicroKernel.ComponentNotFoundException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubComponentNotFoundException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubComponentNotFoundException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.InitializeStub">
            <summary>初始化 type StubComponentNotFoundException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentNotFoundException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentNotFoundException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentNotFoundException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubComponentRegistrationException">
            <summary>Castle.MicroKernel.ComponentRegistrationException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubComponentRegistrationException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubComponentRegistrationException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.InitializeStub">
            <summary>初始化 type StubComponentRegistrationException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubComponentRegistrationException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubComponentRegistrationException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubComponentRegistrationException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubDefaultKernel">
            <summary>Castle.MicroKernel.DefaultKernel 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor(Castle.MicroKernel.IProxyFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor(Castle.MicroKernel.IDependencyResolver,Castle.MicroKernel.IProxyFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddChildKernel(Castle.MicroKernel.IKernel)">
            <summary>设置 DefaultKernel.AddChildKernel(IKernel childKernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddChildKernelIKernel">
            <summary>设置 DefaultKernel.AddChildKernel(IKernel childKernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponent(System.String,System.Type)">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponent(System.String,System.Type,System.Type)">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentStringType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type classType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentStringTypeType">
            <summary>设置 DefaultKernel.AddComponent(String key, Type serviceType, Type classType) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary parameters) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary parameters) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary parameters) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>设置 DefaultKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary parameters) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddCustomComponent(Castle.Core.ComponentModel)">
            <summary>设置 DefaultKernel.AddCustomComponent(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddCustomComponentComponentModel">
            <summary>设置 DefaultKernel.AddCustomComponent(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>设置 DefaultKernel.AddFacility(String key, IFacility facility) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddFacilityStringIFacility">
            <summary>设置 DefaultKernel.AddFacility(String key, IFacility facility) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AddSubSystem(System.String,Castle.MicroKernel.ISubSystem)">
            <summary>设置 DefaultKernel.AddSubSystem(String key, ISubSystem subsystem) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.AddSubSystemStringISubSystem">
            <summary>设置 DefaultKernel.AddSubSystem(String key, ISubSystem subsystem) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AttachBackingFieldToConfigurationStore">
            <summary>附加委托以将 StubDefaultKernel.ConfigurationStore 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AttachBackingFieldToParent">
            <summary>附加委托以将 StubDefaultKernel.Parent 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.AttachBackingFieldToReleasePolicy">
            <summary>附加委托以将 StubDefaultKernel.ReleasePolicy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ConfigurationStoreGet">
            <summary>设置 DefaultKernel.get_ConfigurationStore() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ConfigurationStoreSetIConfigurationStore">
            <summary>设置 DefaultKernel.set_ConfigurationStore(IConfigurationStore value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.CreateComponentActivator(Castle.Core.ComponentModel)">
            <summary>设置 DefaultKernel.CreateComponentActivator(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.CreateComponentActivatorComponentModel">
            <summary>设置 DefaultKernel.CreateComponentActivator(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.Dispose">
            <summary>设置 DefaultKernel.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.Dispose01">
            <summary>设置 DefaultKernel.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetAssignableHandlers(System.Type)">
            <summary>设置 DefaultKernel.GetAssignableHandlers(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetAssignableHandlersType">
            <summary>设置 DefaultKernel.GetAssignableHandlers(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetFacilities">
            <summary>设置 DefaultKernel.GetFacilities() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetFacilities01">
            <summary>设置 DefaultKernel.GetFacilities() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandler(System.String)">
            <summary>设置 DefaultKernel.GetHandler(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandler(System.Type)">
            <summary>设置 DefaultKernel.GetHandler(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlerString">
            <summary>设置 DefaultKernel.GetHandler(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlerType">
            <summary>设置 DefaultKernel.GetHandler(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlers(System.Type)">
            <summary>设置 DefaultKernel.GetHandlers(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetHandlersType">
            <summary>设置 DefaultKernel.GetHandlers(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 DefaultKernel.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 DefaultKernel.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.GetSubSystem(System.String)">
            <summary>设置 DefaultKernel.GetSubSystem(String key) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.GetSubSystemString">
            <summary>设置 DefaultKernel.GetSubSystem(String key) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponent(System.String)">
            <summary>设置 DefaultKernel.HasComponent(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponent(System.Type)">
            <summary>设置 DefaultKernel.HasComponent(Type serviceType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponentString">
            <summary>设置 DefaultKernel.HasComponent(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.HasComponentType">
            <summary>设置 DefaultKernel.HasComponent(Type serviceType) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.InitializeLifetimeService">
            <summary>设置 KernelEventSupport.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.InitializeLifetimeService01">
            <summary>设置 KernelEventSupport.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.InitializeStub">
            <summary>初始化 type StubDefaultKernel 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ItemGetString">
            <summary>设置 DefaultKernel.get_Item(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ItemGetType">
            <summary>设置 DefaultKernel.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ParentGet">
            <summary>设置 DefaultKernel.get_Parent() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ParentSetIKernel">
            <summary>设置 DefaultKernel.set_Parent(IKernel value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseAddedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseAddedAsChildKernel() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseAddedAsChildKernel01">
            <summary>设置 KernelEventSupport.RaiseAddedAsChildKernel() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentCreated(Castle.Core.ComponentModel,System.Object)">
            <summary>设置 KernelEventSupport.RaiseComponentCreated(ComponentModel model, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentCreatedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentCreated(ComponentModel model, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentDestroyed(Castle.Core.ComponentModel,System.Object)">
            <summary>设置 KernelEventSupport.RaiseComponentDestroyed(ComponentModel model, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentDestroyedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentDestroyed(ComponentModel model, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentModelCreated(Castle.Core.ComponentModel)">
            <summary>设置 KernelEventSupport.RaiseComponentModelCreated(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentModelCreatedComponentModel">
            <summary>设置 KernelEventSupport.RaiseComponentModelCreated(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentRegistered(System.String,Castle.MicroKernel.IHandler)">
            <summary>设置 KernelEventSupport.RaiseComponentRegistered(String key, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentRegisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentRegistered(String key, IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentUnregistered(System.String,Castle.MicroKernel.IHandler)">
            <summary>设置 KernelEventSupport.RaiseComponentUnregistered(String key, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseComponentUnregisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentUnregistered(String key, IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseDependencyResolving(Castle.Core.ComponentModel,Castle.Core.DependencyModel,System.Object)">
            <summary>设置 KernelEventSupport.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>设置 KernelEventSupport.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseHandlerRegistered(Castle.MicroKernel.IHandler)">
            <summary>设置 KernelEventSupport.RaiseHandlerRegistered(IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseHandlerRegisteredIHandler">
            <summary>设置 KernelEventSupport.RaiseHandlerRegistered(IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseRemovedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseRemovedAsChildKernel() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RaiseRemovedAsChildKernel01">
            <summary>设置 KernelEventSupport.RaiseRemovedAsChildKernel() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RegisterSubSystems">
            <summary>设置 DefaultKernel.RegisterSubSystems() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RegisterSubSystems01">
            <summary>设置 DefaultKernel.RegisterSubSystems() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.ReleaseComponent(System.Object)">
            <summary>设置 DefaultKernel.ReleaseComponent(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ReleaseComponentObject">
            <summary>设置 DefaultKernel.ReleaseComponent(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ReleasePolicyGet">
            <summary>设置 DefaultKernel.get_ReleasePolicy() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ReleasePolicySetIReleasePolicy">
            <summary>设置 DefaultKernel.set_ReleasePolicy(IReleasePolicy value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RemoveChildKernel(Castle.MicroKernel.IKernel)">
            <summary>设置 DefaultKernel.RemoveChildKernel(IKernel childKernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RemoveChildKernelIKernel">
            <summary>设置 DefaultKernel.RemoveChildKernel(IKernel childKernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.RemoveComponent(System.String)">
            <summary>设置 DefaultKernel.RemoveComponent(String key) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.RemoveComponentString">
            <summary>设置 DefaultKernel.RemoveComponent(String key) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubDefaultKernel.Resolve(System.String,System.Type)">
            <summary>设置 DefaultKernel.Resolve(String key, Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubDefaultKernel.ResolveStringType">
            <summary>设置 DefaultKernel.Resolve(String key, Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.ConfigurationStore">
            <summary>设置 DefaultKernel.get_ConfigurationStore() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.Item(System.String)">
            <summary>设置 DefaultKernel.get_Item(String key) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.Item(System.Type)">
            <summary>设置 DefaultKernel.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.Parent">
            <summary>设置 DefaultKernel.get_Parent() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubDefaultKernel.ReleasePolicy">
            <summary>设置 DefaultKernel.get_ReleasePolicy() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIComponentActivator">
            <summary>Castle.MicroKernel.IComponentActivator 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentActivator.#ctor">
            <summary>初始化 type StubIComponentActivator 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentActivator.cmk::Castle#MicroKernel#IComponentActivator#Create(Castle.MicroKernel.CreationContext)">
            <summary>设置 IComponentActivator.Create(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentActivator.cmk::Castle#MicroKernel#IComponentActivator#Destroy(System.Object)">
            <summary>设置 IComponentActivator.Destroy(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentActivator.CreateCreationContext">
            <summary>设置 IComponentActivator.Create(CreationContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentActivator.DestroyObject">
            <summary>设置 IComponentActivator.Destroy(Object instance) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIComponentModelBuilder">
            <summary>Castle.MicroKernel.IComponentModelBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.#ctor">
            <summary>初始化 type StubIComponentModelBuilder 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.AddContributorIContributeComponentModelConstruction">
            <summary>设置 IComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.BuildModelStringTypeTypeIDictionary">
            <summary>设置 IComponentModelBuilder.BuildModel(String key, Type service, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cmk::Castle#MicroKernel#IComponentModelBuilder#AddContributor(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>设置 IComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cmk::Castle#MicroKernel#IComponentModelBuilder#BuildModel(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>设置 IComponentModelBuilder.BuildModel(String key, Type service, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cmk::Castle#MicroKernel#IComponentModelBuilder#RemoveContributor(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>设置 IComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.ContributorsGet">
            <summary>设置 IComponentModelBuilder.get_Contributors() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.RemoveContributorIContributeComponentModelConstruction">
            <summary>设置 IComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIComponentModelBuilder.cmk::Castle#MicroKernel#IComponentModelBuilder#Contributors">
            <summary>设置 IComponentModelBuilder.get_Contributors() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIConfigurationStore">
            <summary>Castle.MicroKernel.IConfigurationStore 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.#ctor">
            <summary>初始化 type StubIConfigurationStore 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.AddComponentConfigurationStringIConfiguration">
            <summary>设置 IConfigurationStore.AddComponentConfiguration(String key, IConfiguration config) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.AddFacilityConfigurationStringIConfiguration">
            <summary>设置 IConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#IConfigurationStore#AddComponentConfiguration(System.String,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 IConfigurationStore.AddComponentConfiguration(String key, IConfiguration config) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#IConfigurationStore#AddFacilityConfiguration(System.String,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 IConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#IConfigurationStore#GetComponentConfiguration(System.String)">
            <summary>设置 IConfigurationStore.GetComponentConfiguration(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#IConfigurationStore#GetComponents">
            <summary>设置 IConfigurationStore.GetComponents() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#IConfigurationStore#GetFacilities">
            <summary>设置 IConfigurationStore.GetFacilities() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#IConfigurationStore#GetFacilityConfiguration(System.String)">
            <summary>设置 IConfigurationStore.GetFacilityConfiguration(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#IConfigurationStore#GetResource(System.String,Castle.Core.Resource.IResource)">
            <summary>设置 IConfigurationStore.GetResource(String resourceUri, IResource resource) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernel)">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIConfigurationStore.cmk::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>设置 ISubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.GetComponentConfigurationString">
            <summary>设置 IConfigurationStore.GetComponentConfiguration(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.GetComponents">
            <summary>设置 IConfigurationStore.GetComponents() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.GetFacilities">
            <summary>设置 IConfigurationStore.GetFacilities() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.GetFacilityConfigurationString">
            <summary>设置 IConfigurationStore.GetFacilityConfiguration(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.GetResourceStringIResource">
            <summary>设置 IConfigurationStore.GetResource(String resourceUri, IResource resource) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.InitIKernel">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIConfigurationStore.Terminate">
            <summary>设置 ISubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIDependencyResolver">
            <summary>Castle.MicroKernel.IDependencyResolver 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.#ctor">
            <summary>初始化 type StubIDependencyResolver 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.AddSubResolverISubDependencyResolver">
            <summary>设置 IDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cmk::Castle#MicroKernel#IDependencyResolver#AddSubResolver(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>设置 IDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cmk::Castle#MicroKernel#IDependencyResolver#Initialize(Castle.MicroKernel.DependencyDelegate)">
            <summary>设置 IDependencyResolver.Initialize(DependencyDelegate resolving) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cmk::Castle#MicroKernel#IDependencyResolver#RemoveSubResolver(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>设置 IDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cmk::Castle#MicroKernel#ISubDependencyResolver#CanResolve(Castle.MicroKernel.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIDependencyResolver.cmk::Castle#MicroKernel#ISubDependencyResolver#Resolve(Castle.MicroKernel.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.InitializeDependencyDelegate">
            <summary>设置 IDependencyResolver.Initialize(DependencyDelegate resolving) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.RemoveSubResolverISubDependencyResolver">
            <summary>设置 IDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIDependencyResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIFacility">
            <summary>Castle.MicroKernel.IFacility 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIFacility.#ctor">
            <summary>初始化 type StubIFacility 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIFacility.cmk::Castle#MicroKernel#IFacility#Init(Castle.MicroKernel.IKernel,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 IFacility.Init(IKernel kernel, IConfiguration facilityConfig) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIFacility.cmk::Castle#MicroKernel#IFacility#Terminate">
            <summary>设置 IFacility.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIFacility.InitIKernelIConfiguration">
            <summary>设置 IFacility.Init(IKernel kernel, IConfiguration facilityConfig) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIFacility.Terminate">
            <summary>设置 IFacility.Terminate() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIHandler">
            <summary>Castle.MicroKernel.IHandler 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.#ctor">
            <summary>初始化 type StubIHandler 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.AddCustomDependencyValueStringObject">
            <summary>设置 IHandler.AddCustomDependencyValue(String key, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#AddCustomDependencyValue(System.String,System.Object)">
            <summary>设置 IHandler.AddCustomDependencyValue(String key, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#HasCustomParameter(System.String)">
            <summary>设置 IHandler.HasCustomParameter(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#Init(Castle.MicroKernel.IKernel)">
            <summary>设置 IHandler.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#Release(System.Object)">
            <summary>设置 IHandler.Release(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#RemoveCustomDependencyValue(System.String)">
            <summary>设置 IHandler.RemoveCustomDependencyValue(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 IHandler.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#ISubDependencyResolver#CanResolve(Castle.MicroKernel.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#ISubDependencyResolver#Resolve(Castle.MicroKernel.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ComponentModelGet">
            <summary>设置 IHandler.get_ComponentModel() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.CurrentStateGet">
            <summary>设置 IHandler.get_CurrentState() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.HasCustomParameterString">
            <summary>设置 IHandler.HasCustomParameter(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.InitIKernel">
            <summary>设置 IHandler.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ReleaseObject">
            <summary>设置 IHandler.Release(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.RemoveCustomDependencyValueString">
            <summary>设置 IHandler.RemoveCustomDependencyValue(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ResolveCreationContext">
            <summary>设置 IHandler.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#ComponentModel">
            <summary>设置 IHandler.get_ComponentModel() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIHandler.cmk::Castle#MicroKernel#IHandler#CurrentState">
            <summary>设置 IHandler.get_CurrentState() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIHandlerFactory">
            <summary>Castle.MicroKernel.IHandlerFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlerFactory.#ctor">
            <summary>初始化 type StubIHandlerFactory 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIHandlerFactory.cmk::Castle#MicroKernel#IHandlerFactory#Create(Castle.Core.ComponentModel)">
            <summary>设置 IHandlerFactory.Create(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIHandlerFactory.CreateComponentModel">
            <summary>设置 IHandlerFactory.Create(ComponentModel model) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIKernel">
            <summary>Castle.MicroKernel.IKernel 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.#ctor">
            <summary>初始化 type StubIKernel 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddChildKernelIKernel">
            <summary>设置 IKernel.AddChildKernel(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentInstanceStringObject">
            <summary>设置 IKernel.AddComponentInstance(String key, Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentInstanceStringTypeObject">
            <summary>设置 IKernel.AddComponentInstance(String key, Type serviceType, Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringType">
            <summary>设置 IKernel.AddComponent(String key, Type classType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeLifestyleType">
            <summary>设置 IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeLifestyleTypeBoolean">
            <summary>设置 IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeType">
            <summary>设置 IKernel.AddComponent(String key, Type serviceType, Type classType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeTypeLifestyleType">
            <summary>设置 IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentStringTypeTypeLifestyleTypeBoolean">
            <summary>设置 IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentWithExtendedPropertiesStringTypeIDictionary">
            <summary>设置 IKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddComponentWithExtendedPropertiesStringTypeTypeIDictionary">
            <summary>设置 IKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddCustomComponentComponentModel">
            <summary>设置 IKernel.AddCustomComponent(ComponentModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddFacilityStringIFacility">
            <summary>设置 IKernel.AddFacility(String key, IFacility facility) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.AddSubSystemStringISubSystem">
            <summary>设置 IKernel.AddSubSystem(String key, ISubSystem subsystem) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToConfigurationStore">
            <summary>附加委托以将 StubIKernel.ConfigurationStore 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToParent">
            <summary>附加委托以将 StubIKernel.Parent 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToProxyFactory">
            <summary>附加委托以将 StubIKernel.ProxyFactory 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.AttachBackingFieldToReleasePolicy">
            <summary>附加委托以将 StubIKernel.ReleasePolicy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddChildKernel(Castle.MicroKernel.IKernel)">
            <summary>设置 IKernel.AddChildKernel(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type)">
            <summary>设置 IKernel.AddComponent(String key, Type classType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>设置 IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type)">
            <summary>设置 IKernel.AddComponent(String key, Type serviceType, Type classType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>设置 IKernel.AddComponent(String key, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>设置 IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponent(System.String,System.Type,System.Type,Castle.Core.LifestyleType,System.Boolean)">
            <summary>设置 IKernel.AddComponent(String key, Type serviceType, Type classType, LifestyleType lifestyle, Boolean overwriteLifestyle) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Object)">
            <summary>设置 IKernel.AddComponentInstance(String key, Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>设置 IKernel.AddComponentInstance(String key, Type serviceType, Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponentWithExtendedProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>设置 IKernel.AddComponentWithExtendedProperties(String key, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddComponentWithExtendedProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>设置 IKernel.AddComponentWithExtendedProperties(String key, Type serviceType, Type classType, IDictionary extendedProperties) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddCustomComponent(Castle.Core.ComponentModel)">
            <summary>设置 IKernel.AddCustomComponent(ComponentModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>设置 IKernel.AddFacility(String key, IFacility facility) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#AddSubSystem(System.String,Castle.MicroKernel.ISubSystem)">
            <summary>设置 IKernel.AddSubSystem(String key, ISubSystem subsystem) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#CreateComponentActivator(Castle.Core.ComponentModel)">
            <summary>设置 IKernel.CreateComponentActivator(ComponentModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#GetAssignableHandlers(System.Type)">
            <summary>设置 IKernel.GetAssignableHandlers(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#GetFacilities">
            <summary>设置 IKernel.GetFacilities() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#GetHandler(System.String)">
            <summary>设置 IKernel.GetHandler(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#GetHandler(System.Type)">
            <summary>设置 IKernel.GetHandler(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#GetHandlers(System.Type)">
            <summary>设置 IKernel.GetHandlers(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#GetSubSystem(System.String)">
            <summary>设置 IKernel.GetSubSystem(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#HasComponent(System.String)">
            <summary>设置 IKernel.HasComponent(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#HasComponent(System.Type)">
            <summary>设置 IKernel.HasComponent(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#RegisterCustomDependencies(System.String,System.Collections.IDictionary)">
            <summary>设置 IKernel.RegisterCustomDependencies(String key, IDictionary dependencies) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#RegisterCustomDependencies(System.Type,System.Collections.IDictionary)">
            <summary>设置 IKernel.RegisterCustomDependencies(Type service, IDictionary dependencies) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#ReleaseComponent(System.Object)">
            <summary>设置 IKernel.ReleaseComponent(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#RemoveChildKernel(Castle.MicroKernel.IKernel)">
            <summary>设置 IKernel.RemoveChildKernel(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#RemoveComponent(System.String)">
            <summary>设置 IKernel.RemoveComponent(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#Resolve(System.String,System.Type)">
            <summary>设置 IKernel.Resolve(String key, Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#Resolve(System.String,System.Collections.IDictionary)">
            <summary>设置 IKernel.Resolve(String key, IDictionary arguments) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#Resolve(System.Type,System.Collections.IDictionary)">
            <summary>设置 IKernel.Resolve(Type service, IDictionary arguments) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ComponentModelBuilderGet">
            <summary>设置 IKernel.get_ComponentModelBuilder() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ConfigurationStoreGet">
            <summary>设置 IKernel.get_ConfigurationStore() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ConfigurationStoreSetIConfigurationStore">
            <summary>设置 IKernel.set_ConfigurationStore(IConfigurationStore value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.CreateComponentActivatorComponentModel">
            <summary>设置 IKernel.CreateComponentActivator(ComponentModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetAssignableHandlersType">
            <summary>设置 IKernel.GetAssignableHandlers(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetFacilities">
            <summary>设置 IKernel.GetFacilities() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetHandlerString">
            <summary>设置 IKernel.GetHandler(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetHandlerType">
            <summary>设置 IKernel.GetHandler(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetHandlersType">
            <summary>设置 IKernel.GetHandlers(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GetSubSystemString">
            <summary>设置 IKernel.GetSubSystem(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.GraphNodesGet">
            <summary>设置 IKernel.get_GraphNodes() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.HandlerFactoryGet">
            <summary>设置 IKernel.get_HandlerFactory() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.HasComponentString">
            <summary>设置 IKernel.HasComponent(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.HasComponentType">
            <summary>设置 IKernel.HasComponent(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ItemGetString">
            <summary>设置 IKernel.get_Item(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ItemGetType">
            <summary>设置 IKernel.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ParentGet">
            <summary>设置 IKernel.get_Parent() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ParentSetIKernel">
            <summary>设置 IKernel.set_Parent(IKernel value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ProxyFactoryGet">
            <summary>设置 IKernel.get_ProxyFactory() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ProxyFactorySetIProxyFactory">
            <summary>设置 IKernel.set_ProxyFactory(IProxyFactory value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.RegisterCustomDependenciesStringIDictionary">
            <summary>设置 IKernel.RegisterCustomDependencies(String key, IDictionary dependencies) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.RegisterCustomDependenciesTypeIDictionary">
            <summary>设置 IKernel.RegisterCustomDependencies(Type service, IDictionary dependencies) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ReleaseComponentObject">
            <summary>设置 IKernel.ReleaseComponent(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ReleasePolicyGet">
            <summary>设置 IKernel.get_ReleasePolicy() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ReleasePolicySetIReleasePolicy">
            <summary>设置 IKernel.set_ReleasePolicy(IReleasePolicy value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.RemoveChildKernelIKernel">
            <summary>设置 IKernel.RemoveChildKernel(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.RemoveComponentString">
            <summary>设置 IKernel.RemoveComponent(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveStringIDictionary">
            <summary>设置 IKernel.Resolve(String key, IDictionary arguments) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveStringType">
            <summary>设置 IKernel.Resolve(String key, Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolveTypeIDictionary">
            <summary>设置 IKernel.Resolve(Type service, IDictionary arguments) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIKernel.ResolverGet">
            <summary>设置 IKernel.get_Resolver() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernel.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#ComponentModelBuilder">
            <summary>设置 IKernel.get_ComponentModelBuilder() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#ConfigurationStore">
            <summary>设置 IKernel.get_ConfigurationStore() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#GraphNodes">
            <summary>设置 IKernel.get_GraphNodes() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#HandlerFactory">
            <summary>设置 IKernel.get_HandlerFactory() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.Castle#MicroKernel#IKernel#Item(System.String)">
            <summary>设置 IKernel.get_Item(String key) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.Castle#MicroKernel#IKernel#Item(System.Type)">
            <summary>设置 IKernel.get_Item(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#Parent">
            <summary>设置 IKernel.get_Parent() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#ProxyFactory">
            <summary>设置 IKernel.get_ProxyFactory() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#ReleasePolicy">
            <summary>设置 IKernel.get_ReleasePolicy() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubIKernel.cmk::Castle#MicroKernel#IKernel#Resolver">
            <summary>设置 IKernel.get_Resolver() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIKernelEvents">
            <summary>Castle.MicroKernel.IKernelEvents 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIKernelEvents.#ctor">
            <summary>初始化 type StubIKernelEvents 的新实例</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubILifestyleManager">
            <summary>Castle.MicroKernel.ILifestyleManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.#ctor">
            <summary>初始化 type StubILifestyleManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.cmk::Castle#MicroKernel#ILifestyleManager#Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel)">
            <summary>设置 ILifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.cmk::Castle#MicroKernel#ILifestyleManager#Release(System.Object)">
            <summary>设置 ILifestyleManager.Release(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.cmk::Castle#MicroKernel#ILifestyleManager#Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 ILifestyleManager.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 ILifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.ReleaseObject">
            <summary>设置 ILifestyleManager.Release(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubILifestyleManager.ResolveCreationContext">
            <summary>设置 ILifestyleManager.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubILifestyleManager.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubINamingSubSystem">
            <summary>Castle.MicroKernel.INamingSubSystem 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.#ctor">
            <summary>初始化 type StubINamingSubSystem 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#Contains(System.String)">
            <summary>设置 INamingSubSystem.Contains(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#Contains(System.Type)">
            <summary>设置 INamingSubSystem.Contains(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetAssignableHandlers(System.Type)">
            <summary>设置 INamingSubSystem.GetAssignableHandlers(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetHandler(System.String)">
            <summary>设置 INamingSubSystem.GetHandler(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetHandler(System.Type)">
            <summary>设置 INamingSubSystem.GetHandler(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetHandler(System.String,System.Type)">
            <summary>设置 INamingSubSystem.GetHandler(String key, Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetHandlers">
            <summary>设置 INamingSubSystem.GetHandlers() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetHandlers(System.String)">
            <summary>设置 INamingSubSystem.GetHandlers(String query) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetHandlers(System.Type)">
            <summary>设置 INamingSubSystem.GetHandlers(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetKey2Handler">
            <summary>设置 INamingSubSystem.GetKey2Handler() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#GetService2Handler">
            <summary>设置 INamingSubSystem.GetService2Handler() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#Register(System.String,Castle.MicroKernel.IHandler)">
            <summary>设置 INamingSubSystem.Register(String key, IHandler handler) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#UnRegister(System.String)">
            <summary>设置 INamingSubSystem.UnRegister(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#UnRegister(System.Type)">
            <summary>设置 INamingSubSystem.UnRegister(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernel)">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>设置 ISubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.ComponentCountGet">
            <summary>设置 INamingSubSystem.get_ComponentCount() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.ContainsString">
            <summary>设置 INamingSubSystem.Contains(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.ContainsType">
            <summary>设置 INamingSubSystem.Contains(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetAssignableHandlersType">
            <summary>设置 INamingSubSystem.GetAssignableHandlers(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetHandlerString">
            <summary>设置 INamingSubSystem.GetHandler(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetHandlerStringType">
            <summary>设置 INamingSubSystem.GetHandler(String key, Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetHandlerType">
            <summary>设置 INamingSubSystem.GetHandler(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetHandlers">
            <summary>设置 INamingSubSystem.GetHandlers() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetHandlersString">
            <summary>设置 INamingSubSystem.GetHandlers(String query) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetHandlersType">
            <summary>设置 INamingSubSystem.GetHandlers(Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetKey2Handler">
            <summary>设置 INamingSubSystem.GetKey2Handler() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.GetService2Handler">
            <summary>设置 INamingSubSystem.GetService2Handler() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.InitIKernel">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.ItemSetStringIHandler">
            <summary>设置 INamingSubSystem.set_Item(String key, IHandler value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.ItemSetTypeIHandler">
            <summary>设置 INamingSubSystem.set_Item(Type service, IHandler value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.RegisterStringIHandler">
            <summary>设置 INamingSubSystem.Register(String key, IHandler handler) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.Terminate">
            <summary>设置 ISubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.UnRegisterString">
            <summary>设置 INamingSubSystem.UnRegister(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubINamingSubSystem.UnRegisterType">
            <summary>设置 INamingSubSystem.UnRegister(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubINamingSubSystem.cmk::Castle#MicroKernel#INamingSubSystem#ComponentCount">
            <summary>设置 INamingSubSystem.get_ComponentCount() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubINamingSubSystem.Castle#MicroKernel#INamingSubSystem#Item(System.String)">
            <summary>设置 INamingSubSystem.set_Item(String key, IHandler value) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubINamingSubSystem.Castle#MicroKernel#INamingSubSystem#Item(System.Type)">
            <summary>设置 INamingSubSystem.set_Item(Type service, IHandler value) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIProxyFactory">
            <summary>Castle.MicroKernel.IProxyFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.#ctor">
            <summary>初始化 type StubIProxyFactory 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIProxyFactory.cmk::Castle#MicroKernel#IProxyFactory#Create(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,System.Object[])">
            <summary>设置 IProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIProxyFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 IProxyFactory.Create(IKernel kernel, ComponentModel model, Object[] constructorArguments) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubIReleasePolicy">
            <summary>Castle.MicroKernel.IReleasePolicy 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.#ctor">
            <summary>初始化 type StubIReleasePolicy 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.cmk::Castle#MicroKernel#IReleasePolicy#HasTrack(System.Object)">
            <summary>设置 IReleasePolicy.HasTrack(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.cmk::Castle#MicroKernel#IReleasePolicy#Release(System.Object)">
            <summary>设置 IReleasePolicy.Release(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.cmk::Castle#MicroKernel#IReleasePolicy#Track(System.Object,Castle.MicroKernel.IHandler)">
            <summary>设置 IReleasePolicy.Track(Object instance, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.HasTrackObject">
            <summary>设置 IReleasePolicy.HasTrack(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.ReleaseObject">
            <summary>设置 IReleasePolicy.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubIReleasePolicy.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubIReleasePolicy.TrackObjectIHandler">
            <summary>设置 IReleasePolicy.Track(Object instance, IHandler handler) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubISubDependencyResolver">
            <summary>Castle.MicroKernel.ISubDependencyResolver 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubDependencyResolver.#ctor">
            <summary>初始化 type StubISubDependencyResolver 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubDependencyResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubDependencyResolver.cmk::Castle#MicroKernel#ISubDependencyResolver#CanResolve(Castle.MicroKernel.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 ISubDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubDependencyResolver.cmk::Castle#MicroKernel#ISubDependencyResolver#Resolve(Castle.MicroKernel.CreationContext,Castle.MicroKernel.ISubDependencyResolver,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubDependencyResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 ISubDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubISubSystem">
            <summary>Castle.MicroKernel.ISubSystem 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubSystem.#ctor">
            <summary>初始化 type StubISubSystem 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubSystem.cmk::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernel)">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubISubSystem.cmk::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>设置 ISubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubSystem.InitIKernel">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubISubSystem.Terminate">
            <summary>设置 ISubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubKernelEventSupport">
            <summary>Castle.MicroKernel.KernelEventSupport 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 KernelEventSupport.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 KernelEventSupport.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.InitializeLifetimeService">
            <summary>设置 KernelEventSupport.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.InitializeLifetimeService01">
            <summary>设置 KernelEventSupport.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.InitializeStub">
            <summary>初始化 type StubKernelEventSupport 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseAddedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseAddedAsChildKernel() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseAddedAsChildKernel01">
            <summary>设置 KernelEventSupport.RaiseAddedAsChildKernel() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentCreated(Castle.Core.ComponentModel,System.Object)">
            <summary>设置 KernelEventSupport.RaiseComponentCreated(ComponentModel model, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentCreatedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentCreated(ComponentModel model, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentDestroyed(Castle.Core.ComponentModel,System.Object)">
            <summary>设置 KernelEventSupport.RaiseComponentDestroyed(ComponentModel model, Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentDestroyedComponentModelObject">
            <summary>设置 KernelEventSupport.RaiseComponentDestroyed(ComponentModel model, Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentModelCreated(Castle.Core.ComponentModel)">
            <summary>设置 KernelEventSupport.RaiseComponentModelCreated(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentModelCreatedComponentModel">
            <summary>设置 KernelEventSupport.RaiseComponentModelCreated(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentRegistered(System.String,Castle.MicroKernel.IHandler)">
            <summary>设置 KernelEventSupport.RaiseComponentRegistered(String key, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentRegisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentRegistered(String key, IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentUnregistered(System.String,Castle.MicroKernel.IHandler)">
            <summary>设置 KernelEventSupport.RaiseComponentUnregistered(String key, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseComponentUnregisteredStringIHandler">
            <summary>设置 KernelEventSupport.RaiseComponentUnregistered(String key, IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseDependencyResolving(Castle.Core.ComponentModel,Castle.Core.DependencyModel,System.Object)">
            <summary>设置 KernelEventSupport.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>设置 KernelEventSupport.RaiseDependencyResolving(ComponentModel client, DependencyModel model, Object dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseHandlerRegistered(Castle.MicroKernel.IHandler)">
            <summary>设置 KernelEventSupport.RaiseHandlerRegistered(IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseHandlerRegisteredIHandler">
            <summary>设置 KernelEventSupport.RaiseHandlerRegistered(IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseRemovedAsChildKernel">
            <summary>设置 KernelEventSupport.RaiseRemovedAsChildKernel() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelEventSupport.RaiseRemovedAsChildKernel01">
            <summary>设置 KernelEventSupport.RaiseRemovedAsChildKernel() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelEventSupport.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelEventSupport.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelEventSupport.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubKernelException">
            <summary>Castle.MicroKernel.KernelException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubKernelException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubKernelException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.InitializeStub">
            <summary>初始化 type StubKernelException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubKernelException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Fakes.StubKernelException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubKernelException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Fakes.StubSubSystemConstants">
            <summary>Castle.MicroKernel.SubSystemConstants 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubSubSystemConstants.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Fakes.StubSubSystemConstants.InitializeStub">
            <summary>初始化 type StubSubSystemConstants 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubSubSystemConstants.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubSubSystemConstants.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Fakes.StubSubSystemConstants.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler">
            <summary>Castle.MicroKernel.Handlers.AbstractHandler 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.#ctor(Castle.MicroKernel.Handlers.AbstractHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(Castle.MicroKernel.IHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(Castle.MicroKernel.Handlers.IExposeDependencyInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddCustomDependencyValueStringObject">
            <summary>设置 AbstractHandler.AddCustomDependencyValue(String key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddDependencyDependencyModel">
            <summary>设置 AbstractHandler.AddDependency(DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AddGraphDependencyComponentModel">
            <summary>设置 AbstractHandler.AddGraphDependency(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ComponentModelGet">
            <summary>设置 AbstractHandler.get_ComponentModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ConstructorComponentModel">
            <summary>设置 AbstractHandler.AbstractHandler(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.CreateLifestyleManagerIComponentActivator">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.CurrentStateGet">
            <summary>设置 AbstractHandler.get_CurrentState() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.DependenciesByKeyGet">
            <summary>设置 AbstractHandler.get_DependenciesByKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.DependenciesByServiceGet">
            <summary>设置 AbstractHandler.get_DependenciesByService() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.DependencySatisfiedIHandlerBooleanRef">
            <summary>设置 AbstractHandler.DependencySatisfied(IHandler handler, Boolean&amp; stateChanged) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.Dispose">
            <summary>设置 AbstractHandler.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.EnsureDependenciesCanBeSatisfied">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.HandlerStateChangedObjectEventArgs">
            <summary>设置 AbstractHandler.HandlerStateChanged(Object source, EventArgs args) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.HasCustomParameterString">
            <summary>设置 AbstractHandler.HasCustomParameter(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.HasValidComponentString">
            <summary>设置 AbstractHandler.HasValidComponent(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.HasValidComponentType">
            <summary>设置 AbstractHandler.HasValidComponent(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.InitIKernel">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.IsValidHandlerStateIHandler">
            <summary>设置 AbstractHandler.IsValidHandlerState(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.KernelGet">
            <summary>设置 AbstractHandler.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ObtainDependencyDetailsIList">
            <summary>设置 AbstractHandler.ObtainDependencyDetails(IList dependenciesChecked) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.OnAddedAsChildKernelObjectEventArgs">
            <summary>设置 AbstractHandler.OnAddedAsChildKernel(Object sender, EventArgs e) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.OnHandlerStateChangedAddHandlerStateDelegate">
            <summary>设置 AbstractHandler.add_OnHandlerStateChanged(HandlerStateDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.OnHandlerStateChangedRemoveHandlerStateDelegate">
            <summary>设置 AbstractHandler.remove_OnHandlerStateChanged(HandlerStateDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.RaiseHandlerStateChanged">
            <summary>设置 AbstractHandler.RaiseHandlerStateChanged() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.RemoveCustomDependencyValueString">
            <summary>设置 AbstractHandler.RemoveCustomDependencyValue(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.SetNewStateHandlerState">
            <summary>设置 AbstractHandler.SetNewState(HandlerState newState) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.UnionICollectionICollection">
            <summary>设置 AbstractHandler.Union(ICollection firstset, ICollection secondset) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddCustomDependencyValueStringObject">
            <summary>设置 AbstractHandler.AddCustomDependencyValue(String key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddDependencyDependencyModel">
            <summary>设置 AbstractHandler.AddDependency(DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.AddGraphDependencyComponentModel">
            <summary>设置 AbstractHandler.AddGraphDependency(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 AbstractHandler.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ComponentModelGet">
            <summary>设置 AbstractHandler.get_ComponentModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.CreateLifestyleManagerIComponentActivator">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.CurrentStateGet">
            <summary>设置 AbstractHandler.get_CurrentState() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.DependenciesByKeyGet">
            <summary>设置 AbstractHandler.get_DependenciesByKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.DependenciesByServiceGet">
            <summary>设置 AbstractHandler.get_DependenciesByService() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.DependencySatisfiedIHandlerBooleanRef">
            <summary>设置 AbstractHandler.DependencySatisfied(IHandler handler, Boolean&amp; stateChanged) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.Dispose">
            <summary>设置 AbstractHandler.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.EnsureDependenciesCanBeSatisfied">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.HandlerStateChangedObjectEventArgs">
            <summary>设置 AbstractHandler.HandlerStateChanged(Object source, EventArgs args) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.HasCustomParameterString">
            <summary>设置 AbstractHandler.HasCustomParameter(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.HasValidComponentString">
            <summary>设置 AbstractHandler.HasValidComponent(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.HasValidComponentType">
            <summary>设置 AbstractHandler.HasValidComponent(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.InitIKernel">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.IsValidHandlerStateIHandler">
            <summary>设置 AbstractHandler.IsValidHandlerState(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.KernelGet">
            <summary>设置 AbstractHandler.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ObtainDependencyDetailsIList">
            <summary>设置 AbstractHandler.ObtainDependencyDetails(IList dependenciesChecked) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.OnAddedAsChildKernelObjectEventArgs">
            <summary>设置 AbstractHandler.OnAddedAsChildKernel(Object sender, EventArgs e) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.OnHandlerStateChangedAddHandlerStateDelegate">
            <summary>设置 AbstractHandler.add_OnHandlerStateChanged(HandlerStateDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.OnHandlerStateChangedRemoveHandlerStateDelegate">
            <summary>设置 AbstractHandler.remove_OnHandlerStateChanged(HandlerStateDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.RaiseHandlerStateChanged">
            <summary>设置 AbstractHandler.RaiseHandlerStateChanged() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.RemoveCustomDependencyValueString">
            <summary>设置 AbstractHandler.RemoveCustomDependencyValue(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 AbstractHandler.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.SetNewStateHandlerState">
            <summary>设置 AbstractHandler.SetNewState(HandlerState newState) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimAbstractHandler.AllInstances.UnionICollectionICollection">
            <summary>设置 AbstractHandler.Union(ICollection firstset, ICollection secondset) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler">
            <summary>Castle.MicroKernel.Handlers.DefaultGenericHandler 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.#ctor(Castle.MicroKernel.Handlers.DefaultGenericHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(Castle.MicroKernel.IHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(Castle.MicroKernel.Handlers.IExposeDependencyInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ConstructorComponentModel">
            <summary>设置 DefaultGenericHandler.DefaultGenericHandler(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.GetSubHandlerCreationContextType">
            <summary>设置 DefaultGenericHandler.GetSubHandler(CreationContext context, Type genericType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ReleaseObject">
            <summary>设置 DefaultGenericHandler.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.ResolveCreationContext">
            <summary>设置 DefaultGenericHandler.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.GetSubHandlerCreationContextType">
            <summary>设置 DefaultGenericHandler.GetSubHandler(CreationContext context, Type genericType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.ReleaseObject">
            <summary>设置 DefaultGenericHandler.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultGenericHandler.AllInstances.ResolveCreationContext">
            <summary>设置 DefaultGenericHandler.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler">
            <summary>Castle.MicroKernel.Handlers.DefaultHandler 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.#ctor(Castle.MicroKernel.Handlers.DefaultHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(Castle.MicroKernel.IHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(Castle.MicroKernel.Handlers.IExposeDependencyInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AssertNotWaitingForDependency">
            <summary>设置 DefaultHandler.AssertNotWaitingForDependency() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.ConstructorComponentModel">
            <summary>设置 DefaultHandler.DefaultHandler(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.ReleaseObject">
            <summary>设置 DefaultHandler.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.ResolveCreationContext">
            <summary>设置 DefaultHandler.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.AssertNotWaitingForDependency">
            <summary>设置 DefaultHandler.AssertNotWaitingForDependency() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.ReleaseObject">
            <summary>设置 DefaultHandler.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandler.AllInstances.ResolveCreationContext">
            <summary>设置 DefaultHandler.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory">
            <summary>Castle.MicroKernel.Handlers.DefaultHandlerFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.#ctor(Castle.MicroKernel.Handlers.DefaultHandlerFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.Bind(Castle.MicroKernel.IHandlerFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.ConstructorIKernel">
            <summary>设置 DefaultHandlerFactory.DefaultHandlerFactory(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.CreateComponentModel">
            <summary>设置 DefaultHandlerFactory.Create(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimDefaultHandlerFactory.AllInstances.CreateComponentModel">
            <summary>设置 DefaultHandlerFactory.Create(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException">
            <summary>Castle.MicroKernel.Handlers.HandlerException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.#ctor(Castle.MicroKernel.Handlers.HandlerException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 HandlerException.HandlerException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.ConstructorString">
            <summary>设置 HandlerException.HandlerException(String message) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.ShimHandlerException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler">
            <summary>Castle.MicroKernel.Handlers.AbstractHandler 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.#ctor(Castle.Core.ComponentModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.CreateLifestyleManager(Castle.MicroKernel.IComponentActivator)">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.CreateLifestyleManagerIComponentActivator">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Dispose">
            <summary>设置 AbstractHandler.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Dispose01">
            <summary>设置 AbstractHandler.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.EnsureDependenciesCanBeSatisfied">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.EnsureDependenciesCanBeSatisfied01">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InitIKernel">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InitializeStub">
            <summary>初始化 type StubAbstractHandler 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Release(System.Object)">
            <summary>设置 AbstractHandler.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ReleaseObject">
            <summary>设置 AbstractHandler.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractHandler.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.ResolveCreationContext">
            <summary>设置 AbstractHandler.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubAbstractHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler">
            <summary>Castle.MicroKernel.Handlers.DefaultGenericHandler 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.#ctor(Castle.Core.ComponentModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.CreateLifestyleManager(Castle.MicroKernel.IComponentActivator)">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.CreateLifestyleManagerIComponentActivator">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Dispose">
            <summary>设置 AbstractHandler.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Dispose01">
            <summary>设置 AbstractHandler.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.EnsureDependenciesCanBeSatisfied">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.EnsureDependenciesCanBeSatisfied01">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InitIKernel">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InitializeStub">
            <summary>初始化 type StubDefaultGenericHandler 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Release(System.Object)">
            <summary>设置 DefaultGenericHandler.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ReleaseObject">
            <summary>设置 DefaultGenericHandler.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultGenericHandler.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.ResolveCreationContext">
            <summary>设置 DefaultGenericHandler.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultGenericHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler">
            <summary>Castle.MicroKernel.Handlers.DefaultHandler 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.#ctor(Castle.Core.ComponentModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.CreateLifestyleManager(Castle.MicroKernel.IComponentActivator)">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.CreateLifestyleManagerIComponentActivator">
            <summary>设置 AbstractHandler.CreateLifestyleManager(IComponentActivator activator) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Dispose">
            <summary>设置 AbstractHandler.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Dispose01">
            <summary>设置 AbstractHandler.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.EnsureDependenciesCanBeSatisfied">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.EnsureDependenciesCanBeSatisfied01">
            <summary>设置 AbstractHandler.EnsureDependenciesCanBeSatisfied() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InitIKernel">
            <summary>设置 AbstractHandler.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InitializeStub">
            <summary>初始化 type StubDefaultHandler 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Release(System.Object)">
            <summary>设置 DefaultHandler.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ReleaseObject">
            <summary>设置 DefaultHandler.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultHandler.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.ResolveCreationContext">
            <summary>设置 DefaultHandler.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory">
            <summary>Castle.MicroKernel.Handlers.DefaultHandlerFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.#ctor(Castle.MicroKernel.IKernel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.Create(Castle.Core.ComponentModel)">
            <summary>设置 DefaultHandlerFactory.Create(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.CreateComponentModel">
            <summary>设置 DefaultHandlerFactory.Create(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.InitializeStub">
            <summary>初始化 type StubDefaultHandlerFactory 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubDefaultHandlerFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubHandlerException">
            <summary>Castle.MicroKernel.Handlers.HandlerException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubHandlerException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubHandlerException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.InitializeStub">
            <summary>初始化 type StubHandlerException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Handlers.Fakes.StubHandlerException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo">
            <summary>Castle.MicroKernel.Handlers.IExposeDependencyInfo 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo.#ctor">
            <summary>初始化 type StubIExposeDependencyInfo 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo.cmk::Castle#MicroKernel#Handlers#IExposeDependencyInfo#ObtainDependencyDetails(System.Collections.IList)">
            <summary>设置 IExposeDependencyInfo.ObtainDependencyDetails(IList dependenciesChecked) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Handlers.Fakes.StubIExposeDependencyInfo.ObtainDependencyDetailsIList">
            <summary>设置 IExposeDependencyInfo.ObtainDependencyDetails(IList dependenciesChecked) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern">
            <summary>Castle.MicroKernel.LifecycleConcerns.DisposalConcern 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.#ctor(Castle.MicroKernel.LifecycleConcerns.DisposalConcern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.Bind(Castle.MicroKernel.LifecycleConcerns.ILifecycleConcern)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.ApplyComponentModelObject">
            <summary>设置 DisposalConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.Constructor">
            <summary>设置 DisposalConcern.DisposalConcern() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.InstanceGet">
            <summary>设置 DisposalConcern.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.StaticConstructor">
            <summary>设置 DisposalConcern.DisposalConcern() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimDisposalConcern.AllInstances.ApplyComponentModelObject">
            <summary>设置 DisposalConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern">
            <summary>Castle.MicroKernel.LifecycleConcerns.InitializationConcern 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.#ctor(Castle.MicroKernel.LifecycleConcerns.InitializationConcern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.Bind(Castle.MicroKernel.LifecycleConcerns.ILifecycleConcern)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.ApplyComponentModelObject">
            <summary>设置 InitializationConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.Constructor">
            <summary>设置 InitializationConcern.InitializationConcern() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.InstanceGet">
            <summary>设置 InitializationConcern.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.StaticConstructor">
            <summary>设置 InitializationConcern.InitializationConcern() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimInitializationConcern.AllInstances.ApplyComponentModelObject">
            <summary>设置 InitializationConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern">
            <summary>Castle.MicroKernel.LifecycleConcerns.SupportInitializeConcern 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.#ctor(Castle.MicroKernel.LifecycleConcerns.SupportInitializeConcern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.Bind(Castle.MicroKernel.LifecycleConcerns.ILifecycleConcern)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.ApplyComponentModelObject">
            <summary>设置 SupportInitializeConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.Constructor">
            <summary>设置 SupportInitializeConcern.SupportInitializeConcern() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.InstanceGet">
            <summary>设置 SupportInitializeConcern.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.StaticConstructor">
            <summary>设置 SupportInitializeConcern.SupportInitializeConcern() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.ShimSupportInitializeConcern.AllInstances.ApplyComponentModelObject">
            <summary>设置 SupportInitializeConcern.Apply(ComponentModel model, Object component) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern">
            <summary>Castle.MicroKernel.LifecycleConcerns.DisposalConcern 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.InitializeStub">
            <summary>初始化 type StubDisposalConcern 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubDisposalConcern.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubILifecycleConcern">
            <summary>Castle.MicroKernel.LifecycleConcerns.ILifecycleConcern 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubILifecycleConcern.#ctor">
            <summary>初始化 type StubILifecycleConcern 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.LifecycleConcerns.Fakes.StubILifecycleConcern.ApplyComponentModelObject">
            <summary>设置 ILifecycleConcern.Apply(ComponentModel model, Object component) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubILifecycleConcern.cmk::Castle#MicroKernel#LifecycleConcerns#ILifecycleConcern#Apply(Castle.Core.ComponentModel,System.Object)">
            <summary>设置 ILifecycleConcern.Apply(ComponentModel model, Object component) 的 存根</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern">
            <summary>Castle.MicroKernel.LifecycleConcerns.InitializationConcern 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.InitializeStub">
            <summary>初始化 type StubInitializationConcern 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubInitializationConcern.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern">
            <summary>Castle.MicroKernel.LifecycleConcerns.SupportInitializeConcern 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.InitializeStub">
            <summary>初始化 type StubSupportInitializeConcern 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.LifecycleConcerns.Fakes.StubSupportInitializeConcern.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.AbstractLifestyleManager 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.AbstractLifestyleManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.ComponentActivatorGet">
            <summary>设置 AbstractLifestyleManager.get_ComponentActivator() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.Constructor">
            <summary>设置 AbstractLifestyleManager.AbstractLifestyleManager() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.KernelGet">
            <summary>设置 AbstractLifestyleManager.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.ReleaseObject">
            <summary>设置 AbstractLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.ResolveCreationContext">
            <summary>设置 AbstractLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.ComponentActivatorGet">
            <summary>设置 AbstractLifestyleManager.get_ComponentActivator() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.InitIComponentActivatorIKernel">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.KernelGet">
            <summary>设置 AbstractLifestyleManager.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.ReleaseObject">
            <summary>设置 AbstractLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimAbstractLifestyleManager.AllInstances.ResolveCreationContext">
            <summary>设置 AbstractLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.PerThreadLifestyleManager 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.PerThreadLifestyleManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.Constructor">
            <summary>设置 PerThreadLifestyleManager.PerThreadLifestyleManager() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.Dispose">
            <summary>设置 PerThreadLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.OnDeserializationObject">
            <summary>设置 PerThreadLifestyleManager.OnDeserialization(Object sender) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.ReleaseObject">
            <summary>设置 PerThreadLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.ResolveCreationContext">
            <summary>设置 PerThreadLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.StaticConstructor">
            <summary>设置 PerThreadLifestyleManager.PerThreadLifestyleManager() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.AllInstances.Dispose">
            <summary>设置 PerThreadLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.AllInstances.OnDeserializationObject">
            <summary>设置 PerThreadLifestyleManager.OnDeserialization(Object sender) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.AllInstances.ReleaseObject">
            <summary>设置 PerThreadLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerThreadLifestyleManager.AllInstances.ResolveCreationContext">
            <summary>设置 PerThreadLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleManager 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.Constructor">
            <summary>设置 PerWebRequestLifestyleManager.PerWebRequestLifestyleManager() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.Dispose">
            <summary>设置 PerWebRequestLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.EvictObject">
            <summary>设置 PerWebRequestLifestyleManager.Evict(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.ReleaseObject">
            <summary>设置 PerWebRequestLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.ResolveCreationContext">
            <summary>设置 PerWebRequestLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.AllInstances.Dispose">
            <summary>设置 PerWebRequestLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.AllInstances.EvictObject">
            <summary>设置 PerWebRequestLifestyleManager.Evict(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.AllInstances.ReleaseObject">
            <summary>设置 PerWebRequestLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleManager.AllInstances.ResolveCreationContext">
            <summary>设置 PerWebRequestLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule">
            <summary>Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleModule 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.#ctor(Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleModule)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Bind(System.Web.IHttpModule)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Application_EndRequestObjectEventArgs">
            <summary>设置 PerWebRequestLifestyleModule.Application_EndRequest(Object sender, EventArgs e) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Constructor">
            <summary>设置 PerWebRequestLifestyleModule.PerWebRequestLifestyleModule() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.Dispose">
            <summary>设置 PerWebRequestLifestyleModule.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.InitHttpApplication">
            <summary>设置 PerWebRequestLifestyleModule.Init(HttpApplication context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.InitializedGet">
            <summary>设置 PerWebRequestLifestyleModule.get_Initialized() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.RegisterForEvictionPerWebRequestLifestyleManagerObject">
            <summary>设置 PerWebRequestLifestyleModule.RegisterForEviction(PerWebRequestLifestyleManager manager, Object instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances.Application_EndRequestObjectEventArgs">
            <summary>设置 PerWebRequestLifestyleModule.Application_EndRequest(Object sender, EventArgs e) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances.Dispose">
            <summary>设置 PerWebRequestLifestyleModule.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPerWebRequestLifestyleModule.AllInstances.InitHttpApplication">
            <summary>设置 PerWebRequestLifestyleModule.Init(HttpApplication context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.PoolableLifestyleManager 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.PoolableLifestyleManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.ConstructorInt32Int32">
            <summary>设置 PoolableLifestyleManager.PoolableLifestyleManager(Int32 initialSize, Int32 maxSize) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.CreatePoolInt32Int32">
            <summary>设置 PoolableLifestyleManager.CreatePool(Int32 initialSize, Int32 maxSize) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.Dispose">
            <summary>设置 PoolableLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 PoolableLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.ReleaseObject">
            <summary>设置 PoolableLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.ResolveCreationContext">
            <summary>设置 PoolableLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.CreatePoolInt32Int32">
            <summary>设置 PoolableLifestyleManager.CreatePool(Int32 initialSize, Int32 maxSize) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.Dispose">
            <summary>设置 PoolableLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.InitIComponentActivatorIKernel">
            <summary>设置 PoolableLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.ReleaseObject">
            <summary>设置 PoolableLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimPoolableLifestyleManager.AllInstances.ResolveCreationContext">
            <summary>设置 PoolableLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.SingletonLifestyleManager 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.SingletonLifestyleManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Constructor">
            <summary>设置 SingletonLifestyleManager.SingletonLifestyleManager() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.Dispose">
            <summary>设置 SingletonLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.ReleaseObject">
            <summary>设置 SingletonLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.ResolveCreationContext">
            <summary>设置 SingletonLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances.Dispose">
            <summary>设置 SingletonLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances.ReleaseObject">
            <summary>设置 SingletonLifestyleManager.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimSingletonLifestyleManager.AllInstances.ResolveCreationContext">
            <summary>设置 SingletonLifestyleManager.Resolve(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.TransientLifestyleManager 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.#ctor(Castle.MicroKernel.Lifestyle.TransientLifestyleManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Bind(Castle.MicroKernel.ILifestyleManager)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Constructor">
            <summary>设置 TransientLifestyleManager.TransientLifestyleManager() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.Dispose">
            <summary>设置 TransientLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.ShimTransientLifestyleManager.AllInstances.Dispose">
            <summary>设置 TransientLifestyleManager.Dispose() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.AbstractLifestyleManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Dispose">
            <summary>设置 AbstractLifestyleManager.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Dispose01">
            <summary>设置 AbstractLifestyleManager.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InitializeStub">
            <summary>初始化 type StubAbstractLifestyleManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Release(System.Object)">
            <summary>设置 AbstractLifestyleManager.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.ReleaseObject">
            <summary>设置 AbstractLifestyleManager.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractLifestyleManager.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.ResolveCreationContext">
            <summary>设置 AbstractLifestyleManager.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubAbstractLifestyleManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.PerThreadLifestyleManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.Dispose">
            <summary>设置 PerThreadLifestyleManager.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.Dispose01">
            <summary>设置 PerThreadLifestyleManager.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.InitializeStub">
            <summary>初始化 type StubPerThreadLifestyleManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.Release(System.Object)">
            <summary>设置 PerThreadLifestyleManager.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.ReleaseObject">
            <summary>设置 PerThreadLifestyleManager.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 PerThreadLifestyleManager.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.ResolveCreationContext">
            <summary>设置 PerThreadLifestyleManager.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerThreadLifestyleManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.Dispose">
            <summary>设置 PerWebRequestLifestyleManager.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.Dispose01">
            <summary>设置 PerWebRequestLifestyleManager.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.InitializeStub">
            <summary>初始化 type StubPerWebRequestLifestyleManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.Release(System.Object)">
            <summary>设置 PerWebRequestLifestyleManager.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.ReleaseObject">
            <summary>设置 PerWebRequestLifestyleManager.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 PerWebRequestLifestyleManager.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.ResolveCreationContext">
            <summary>设置 PerWebRequestLifestyleManager.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule">
            <summary>Castle.MicroKernel.Lifestyle.PerWebRequestLifestyleModule 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.InitializeStub">
            <summary>初始化 type StubPerWebRequestLifestyleModule 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPerWebRequestLifestyleModule.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.PoolableLifestyleManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Dispose">
            <summary>设置 PoolableLifestyleManager.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Dispose01">
            <summary>设置 PoolableLifestyleManager.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel)">
            <summary>设置 PoolableLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 PoolableLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InitializeStub">
            <summary>初始化 type StubPoolableLifestyleManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Release(System.Object)">
            <summary>设置 PoolableLifestyleManager.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.ReleaseObject">
            <summary>设置 PoolableLifestyleManager.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 PoolableLifestyleManager.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.ResolveCreationContext">
            <summary>设置 PoolableLifestyleManager.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubPoolableLifestyleManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.SingletonLifestyleManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Dispose">
            <summary>设置 SingletonLifestyleManager.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Dispose01">
            <summary>设置 SingletonLifestyleManager.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InitializeStub">
            <summary>初始化 type StubSingletonLifestyleManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Release(System.Object)">
            <summary>设置 SingletonLifestyleManager.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.ReleaseObject">
            <summary>设置 SingletonLifestyleManager.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 SingletonLifestyleManager.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.ResolveCreationContext">
            <summary>设置 SingletonLifestyleManager.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubSingletonLifestyleManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager">
            <summary>Castle.MicroKernel.Lifestyle.TransientLifestyleManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Dispose">
            <summary>设置 TransientLifestyleManager.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Dispose01">
            <summary>设置 TransientLifestyleManager.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Init(Castle.MicroKernel.IComponentActivator,Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InitIComponentActivatorIKernel">
            <summary>设置 AbstractLifestyleManager.Init(IComponentActivator componentActivator, IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InitializeStub">
            <summary>初始化 type StubTransientLifestyleManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Release(System.Object)">
            <summary>设置 AbstractLifestyleManager.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.ReleaseObject">
            <summary>设置 AbstractLifestyleManager.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.Resolve(Castle.MicroKernel.CreationContext)">
            <summary>设置 AbstractLifestyleManager.Resolve(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.ResolveCreationContext">
            <summary>设置 AbstractLifestyleManager.Resolve(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Fakes.StubTransientLifestyleManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool">
            <summary>Castle.MicroKernel.Lifestyle.Pool.DefaultPool 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.#ctor(Castle.MicroKernel.Lifestyle.Pool.DefaultPool)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Bind(Castle.MicroKernel.Lifestyle.Pool.IPool)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.ConstructorInt32Int32IComponentActivator">
            <summary>设置 DefaultPool.DefaultPool(Int32 initialsize, Int32 maxsize, IComponentActivator componentActivator) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.Dispose">
            <summary>设置 DefaultPool.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.InitPool">
            <summary>设置 DefaultPool.InitPool() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.ReleaseObject">
            <summary>设置 DefaultPool.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.RequestCreationContext">
            <summary>设置 DefaultPool.Request(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.Dispose">
            <summary>设置 DefaultPool.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.InitPool">
            <summary>设置 DefaultPool.InitPool() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.ReleaseObject">
            <summary>设置 DefaultPool.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPool.AllInstances.RequestCreationContext">
            <summary>设置 DefaultPool.Request(CreationContext context) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory">
            <summary>Castle.MicroKernel.Lifestyle.Pool.DefaultPoolFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.#ctor(Castle.MicroKernel.Lifestyle.Pool.DefaultPoolFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.Bind(Castle.MicroKernel.Lifestyle.Pool.IPoolFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.Constructor">
            <summary>设置 DefaultPoolFactory.DefaultPoolFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.CreateInt32Int32IComponentActivator">
            <summary>设置 DefaultPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimDefaultPoolFactory.AllInstances.CreateInt32Int32IComponentActivator">
            <summary>设置 DefaultPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException">
            <summary>Castle.MicroKernel.Lifestyle.Pool.PoolException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.#ctor(Castle.MicroKernel.Lifestyle.Pool.PoolException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 PoolException.PoolException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.ConstructorString">
            <summary>设置 PoolException.PoolException(String message) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.ShimPoolException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool">
            <summary>Castle.MicroKernel.Lifestyle.Pool.DefaultPool 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.#ctor(System.Int32,System.Int32,Castle.MicroKernel.IComponentActivator)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Dispose">
            <summary>设置 DefaultPool.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Dispose01">
            <summary>设置 DefaultPool.Dispose() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.InitializeStub">
            <summary>初始化 type StubDefaultPool 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Release(System.Object)">
            <summary>设置 DefaultPool.Release(Object instance) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.ReleaseObject">
            <summary>设置 DefaultPool.Release(Object instance) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.Request(Castle.MicroKernel.CreationContext)">
            <summary>设置 DefaultPool.Request(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.RequestCreationContext">
            <summary>设置 DefaultPool.Request(CreationContext context) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPool.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory">
            <summary>Castle.MicroKernel.Lifestyle.Pool.DefaultPoolFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.InitializeStub">
            <summary>初始化 type StubDefaultPoolFactory 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubDefaultPoolFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool">
            <summary>Castle.MicroKernel.Lifestyle.Pool.IPool 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.#ctor">
            <summary>初始化 type StubIPool 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.cmk::Castle#MicroKernel#Lifestyle#Pool#IPool#Release(System.Object)">
            <summary>设置 IPool.Release(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.cmk::Castle#MicroKernel#Lifestyle#Pool#IPool#Request(Castle.MicroKernel.CreationContext)">
            <summary>设置 IPool.Request(CreationContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.ReleaseObject">
            <summary>设置 IPool.Release(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.RequestCreationContext">
            <summary>设置 IPool.Request(CreationContext context) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPool.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory">
            <summary>Castle.MicroKernel.Lifestyle.Pool.IPoolFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory.#ctor">
            <summary>初始化 type StubIPoolFactory 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory.cmk::Castle#MicroKernel#Lifestyle#Pool#IPoolFactory#Create(System.Int32,System.Int32,Castle.MicroKernel.IComponentActivator)">
            <summary>设置 IPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubIPoolFactory.CreateInt32Int32IComponentActivator">
            <summary>设置 IPoolFactory.Create(Int32 initialsize, Int32 maxSize, IComponentActivator activator) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException">
            <summary>Castle.MicroKernel.Lifestyle.Pool.PoolException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubPoolException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubPoolException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.InitializeStub">
            <summary>初始化 type StubPoolException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Lifestyle.Pool.Fakes.StubPoolException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder">
            <summary>Castle.MicroKernel.ModelBuilder.DefaultComponentModelBuilder 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.#ctor(Castle.MicroKernel.ModelBuilder.DefaultComponentModelBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.Bind(Castle.MicroKernel.IComponentModelBuilder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AddContributorIContributeComponentModelConstruction">
            <summary>设置 DefaultComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.BuildModelStringTypeTypeIDictionary">
            <summary>设置 DefaultComponentModelBuilder.BuildModel(String key, Type service, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.ConstructorIKernel">
            <summary>设置 DefaultComponentModelBuilder.DefaultComponentModelBuilder(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.ContributorsGet">
            <summary>设置 DefaultComponentModelBuilder.get_Contributors() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.InitializeContributors">
            <summary>设置 DefaultComponentModelBuilder.InitializeContributors() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.RemoveContributorIContributeComponentModelConstruction">
            <summary>设置 DefaultComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.AddContributorIContributeComponentModelConstruction">
            <summary>设置 DefaultComponentModelBuilder.AddContributor(IContributeComponentModelConstruction contributor) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.BuildModelStringTypeTypeIDictionary">
            <summary>设置 DefaultComponentModelBuilder.BuildModel(String key, Type service, Type classType, IDictionary extendedProperties) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.ContributorsGet">
            <summary>设置 DefaultComponentModelBuilder.get_Contributors() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.InitializeContributors">
            <summary>设置 DefaultComponentModelBuilder.InitializeContributors() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.ShimDefaultComponentModelBuilder.AllInstances.RemoveContributorIContributeComponentModelConstruction">
            <summary>设置 DefaultComponentModelBuilder.RemoveContributor(IContributeComponentModelConstruction contributor) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder">
            <summary>Castle.MicroKernel.ModelBuilder.DefaultComponentModelBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.#ctor(Castle.MicroKernel.IKernel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InitializeContributors">
            <summary>设置 DefaultComponentModelBuilder.InitializeContributors() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InitializeContributors01">
            <summary>设置 DefaultComponentModelBuilder.InitializeContributors() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InitializeStub">
            <summary>初始化 type StubDefaultComponentModelBuilder 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Fakes.StubDefaultComponentModelBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction">
            <summary>Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction.#ctor">
            <summary>初始化 type StubIContributeComponentModelConstruction 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction.cmk::Castle#MicroKernel#ModelBuilder#IContributeComponentModelConstruction#ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 IContributeComponentModelConstruction.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Fakes.StubIContributeComponentModelConstruction.ProcessModelIKernelComponentModel">
            <summary>设置 IContributeComponentModelConstruction.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationModelInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationModelInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.Constructor">
            <summary>设置 ConfigurationModelInspector.ConfigurationModelInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationParametersInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationParametersInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.Constructor">
            <summary>设置 ConfigurationParametersInspector.ConfigurationParametersInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.ProcessModelIKernelComponentModel">
            <summary>设置 ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConfigurationParametersInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.ConstructorDependenciesModelInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.ConstructorDependenciesModelInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.Constructor">
            <summary>设置 ConstructorDependenciesModelInspector.ConstructorDependenciesModelInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.CreateConstructorCandidateConstructorInfo">
            <summary>设置 ConstructorDependenciesModelInspector.CreateConstructorCandidate(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.AllInstances.CreateConstructorCandidateConstructorInfo">
            <summary>设置 ConstructorDependenciesModelInspector.CreateConstructorCandidate(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimConstructorDependenciesModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.GenericInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.GenericInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.Constructor">
            <summary>设置 GenericInspector.GenericInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.ProcessModelIKernelComponentModel">
            <summary>设置 GenericInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimGenericInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 GenericInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.InterceptorInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.InterceptorInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AddInterceptorInterceptorReferenceInterceptorReferenceCollection">
            <summary>设置 InterceptorInspector.AddInterceptor(InterceptorReference interceptorRef, InterceptorReferenceCollection interceptors) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CollectFromAttributesComponentModel">
            <summary>设置 InterceptorInspector.CollectFromAttributes(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CollectFromConfigurationComponentModel">
            <summary>设置 InterceptorInspector.CollectFromConfiguration(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.Constructor">
            <summary>设置 InterceptorInspector.InterceptorInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.CreateDependencyModelInterceptorReference">
            <summary>设置 InterceptorInspector.CreateDependencyModel(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.ProcessModelIKernelComponentModel">
            <summary>设置 InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.AddInterceptorInterceptorReferenceInterceptorReferenceCollection">
            <summary>设置 InterceptorInspector.AddInterceptor(InterceptorReference interceptorRef, InterceptorReferenceCollection interceptors) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CollectFromAttributesComponentModel">
            <summary>设置 InterceptorInspector.CollectFromAttributes(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CollectFromConfigurationComponentModel">
            <summary>设置 InterceptorInspector.CollectFromConfiguration(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.CreateDependencyModelInterceptorReference">
            <summary>设置 InterceptorInspector.CreateDependencyModel(InterceptorReference interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimInterceptorInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.LifecycleModelInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.LifecycleModelInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.Constructor">
            <summary>设置 LifecycleModelInspector.LifecycleModelInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifecycleModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.LifestyleModelInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.LifestyleModelInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.Constructor">
            <summary>设置 LifestyleModelInspector.LifestyleModelInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ExtractCustomConfigComponentModel">
            <summary>设置 LifestyleModelInspector.ExtractCustomConfig(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ExtractPoolConfigComponentModel">
            <summary>设置 LifestyleModelInspector.ExtractPoolConfig(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ReadLifestyleFromConfigurationComponentModel">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.ReadLifestyleFromTypeComponentModel">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ExtractCustomConfigComponentModel">
            <summary>设置 LifestyleModelInspector.ExtractCustomConfig(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ExtractPoolConfigComponentModel">
            <summary>设置 LifestyleModelInspector.ExtractPoolConfig(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ReadLifestyleFromConfigurationComponentModel">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimLifestyleModelInspector.AllInstances.ReadLifestyleFromTypeComponentModel">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.MethodMetaInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.MethodMetaInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AssertNameIsNotNullStringComponentModel">
            <summary>设置 MethodMetaInspector.AssertNameIsNotNull(String name, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.Constructor">
            <summary>设置 MethodMetaInspector.MethodMetaInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ConvertSignatureString">
            <summary>设置 MethodMetaInspector.ConvertSignature(String signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.EnsureHasReferenceToConverterIKernel">
            <summary>设置 MethodMetaInspector.EnsureHasReferenceToConverter(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.GetMethodsTypeStringString">
            <summary>设置 MethodMetaInspector.GetMethods(Type implementation, String name, String signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.IsValidMetaComponentModelMethodMetaModel">
            <summary>设置 MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ProcessMetaComponentModelMethodInfoArrayMethodMetaModel">
            <summary>设置 MethodMetaInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ProcessModelIKernelComponentModel">
            <summary>设置 MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.ShouldUseMetaModelGet">
            <summary>设置 MethodMetaInspector.get_ShouldUseMetaModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.StaticConstructor">
            <summary>设置 MethodMetaInspector.MethodMetaInspector() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.AssertNameIsNotNullStringComponentModel">
            <summary>设置 MethodMetaInspector.AssertNameIsNotNull(String name, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ConvertSignatureString">
            <summary>设置 MethodMetaInspector.ConvertSignature(String signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.EnsureHasReferenceToConverterIKernel">
            <summary>设置 MethodMetaInspector.EnsureHasReferenceToConverter(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.GetMethodsTypeStringString">
            <summary>设置 MethodMetaInspector.GetMethods(Type implementation, String name, String signature) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.IsValidMetaComponentModelMethodMetaModel">
            <summary>设置 MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ProcessMetaComponentModelMethodInfoArrayMethodMetaModel">
            <summary>设置 MethodMetaInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimMethodMetaInspector.AllInstances.ShouldUseMetaModelGet">
            <summary>设置 MethodMetaInspector.get_ShouldUseMetaModel() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.PropertiesDependenciesModelInspector 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.#ctor(Castle.MicroKernel.ModelBuilder.Inspectors.PropertiesDependenciesModelInspector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.Bind(Castle.MicroKernel.ModelBuilder.IContributeComponentModelConstruction)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.Constructor">
            <summary>设置 PropertiesDependenciesModelInspector.PropertiesDependenciesModelInspector() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.GetInspectionBehaviorFromTheConfigurationIConfiguration">
            <summary>设置 PropertiesDependenciesModelInspector.GetInspectionBehaviorFromTheConfiguration(IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.InspectPropertiesComponentModel">
            <summary>设置 PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.GetInspectionBehaviorFromTheConfigurationIConfiguration">
            <summary>设置 PropertiesDependenciesModelInspector.GetInspectionBehaviorFromTheConfiguration(IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.InspectPropertiesComponentModel">
            <summary>设置 PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.ShimPropertiesDependenciesModelInspector.AllInstances.ProcessModelIKernelComponentModel">
            <summary>设置 PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationModelInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.InitializeStub">
            <summary>初始化 type StubConfigurationModelInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 ConfigurationModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationModelInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.ConfigurationParametersInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.InitializeStub">
            <summary>初始化 type StubConfigurationParametersInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.ProcessModelIKernelComponentModel">
            <summary>设置 ConfigurationParametersInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConfigurationParametersInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.ConstructorDependenciesModelInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.CreateConstructorCandidate(System.Reflection.ConstructorInfo)">
            <summary>设置 ConstructorDependenciesModelInspector.CreateConstructorCandidate(ConstructorInfo constructor) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.CreateConstructorCandidateConstructorInfo">
            <summary>设置 ConstructorDependenciesModelInspector.CreateConstructorCandidate(ConstructorInfo constructor) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.InitializeStub">
            <summary>初始化 type StubConstructorDependenciesModelInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 ConstructorDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubConstructorDependenciesModelInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.GenericInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.InitializeStub">
            <summary>初始化 type StubGenericInspector 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubGenericInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.InterceptorInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromAttributes(Castle.Core.ComponentModel)">
            <summary>设置 InterceptorInspector.CollectFromAttributes(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromAttributesComponentModel">
            <summary>设置 InterceptorInspector.CollectFromAttributes(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromConfiguration(Castle.Core.ComponentModel)">
            <summary>设置 InterceptorInspector.CollectFromConfiguration(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CollectFromConfigurationComponentModel">
            <summary>设置 InterceptorInspector.CollectFromConfiguration(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.InitializeStub">
            <summary>初始化 type StubInterceptorInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.ProcessModelIKernelComponentModel">
            <summary>设置 InterceptorInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubInterceptorInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.LifecycleModelInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.InitializeStub">
            <summary>初始化 type StubLifecycleModelInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 LifecycleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifecycleModelInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.LifestyleModelInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.InitializeStub">
            <summary>初始化 type StubLifestyleModelInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 LifestyleModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromConfiguration(Castle.Core.ComponentModel)">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromConfigurationComponentModel">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromConfiguration(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromType(Castle.Core.ComponentModel)">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.ReadLifestyleFromTypeComponentModel">
            <summary>设置 LifestyleModelInspector.ReadLifestyleFromType(ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubLifestyleModelInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.MethodMetaInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.InitializeStub">
            <summary>初始化 type StubMethodMetaInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.IsValidMeta(Castle.Core.ComponentModel,Castle.Core.MethodMetaModel)">
            <summary>设置 MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.IsValidMetaComponentModelMethodMetaModel">
            <summary>设置 MethodMetaInspector.IsValidMeta(ComponentModel model, MethodMetaModel metaModel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ObtainNodeName">
            <summary>设置 MethodMetaInspector.ObtainNodeName() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ObtainNodeName01">
            <summary>设置 MethodMetaInspector.ObtainNodeName() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessMeta(Castle.Core.ComponentModel,System.Reflection.MethodInfo[],Castle.Core.MethodMetaModel)">
            <summary>设置 MethodMetaInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessMetaComponentModelMethodInfoArrayMethodMetaModel">
            <summary>设置 MethodMetaInspector.ProcessMeta(ComponentModel model, MethodInfo[] methods, MethodMetaModel metaModel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ProcessModelIKernelComponentModel">
            <summary>设置 MethodMetaInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ShouldUseMetaModelGet">
            <summary>设置 MethodMetaInspector.get_ShouldUseMetaModel() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubMethodMetaInspector.ShouldUseMetaModel">
            <summary>设置 MethodMetaInspector.get_ShouldUseMetaModel() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector">
            <summary>Castle.MicroKernel.ModelBuilder.Inspectors.PropertiesDependenciesModelInspector 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InitializeStub">
            <summary>初始化 type StubPropertiesDependenciesModelInspector 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InspectProperties(Castle.Core.ComponentModel)">
            <summary>设置 PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InspectPropertiesComponentModel">
            <summary>设置 PropertiesDependenciesModelInspector.InspectProperties(ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.ProcessModel(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>设置 PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.ProcessModelIKernelComponentModel">
            <summary>设置 PropertiesDependenciesModelInspector.ProcessModel(IKernel kernel, ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.ModelBuilder.Inspectors.Fakes.StubPropertiesDependenciesModelInspector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory">
            <summary>Castle.MicroKernel.Proxy.NotSupportedProxyFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.#ctor(Castle.MicroKernel.Proxy.NotSupportedProxyFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.Bind(Castle.MicroKernel.IProxyFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.Constructor">
            <summary>设置 NotSupportedProxyFactory.NotSupportedProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.CreateIKernelComponentModelObjectArray">
            <summary>设置 NotSupportedProxyFactory.Create(IKernel kernel, ComponentModel mode, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.ShimNotSupportedProxyFactory.AllInstances.CreateIKernelComponentModelObjectArray">
            <summary>设置 NotSupportedProxyFactory.Create(IKernel kernel, ComponentModel mode, Object[] constructorArguments) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory">
            <summary>Castle.MicroKernel.Proxy.NotSupportedProxyFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.InitializeStub">
            <summary>初始化 type StubNotSupportedProxyFactory 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Proxy.Fakes.StubNotSupportedProxyFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy">
            <summary>Castle.MicroKernel.Releasers.AllComponentsReleasePolicy 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.#ctor(Castle.MicroKernel.Releasers.AllComponentsReleasePolicy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.Bind(Castle.MicroKernel.IReleasePolicy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.Constructor">
            <summary>设置 AllComponentsReleasePolicy.AllComponentsReleasePolicy() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.Dispose">
            <summary>设置 AllComponentsReleasePolicy.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.HasTrackObject">
            <summary>设置 AllComponentsReleasePolicy.HasTrack(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.ReleaseObject">
            <summary>设置 AllComponentsReleasePolicy.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.TrackObjectIHandler">
            <summary>设置 AllComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.AllInstances.Dispose">
            <summary>设置 AllComponentsReleasePolicy.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.AllInstances.HasTrackObject">
            <summary>设置 AllComponentsReleasePolicy.HasTrack(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.AllInstances.ReleaseObject">
            <summary>设置 AllComponentsReleasePolicy.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimAllComponentsReleasePolicy.AllInstances.TrackObjectIHandler">
            <summary>设置 AllComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy">
            <summary>Castle.MicroKernel.Releasers.LifecycledComponentsReleasePolicy 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.#ctor(Castle.MicroKernel.Releasers.LifecycledComponentsReleasePolicy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Bind(Castle.MicroKernel.IReleasePolicy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.Constructor">
            <summary>设置 LifecycledComponentsReleasePolicy.LifecycledComponentsReleasePolicy() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.TrackObjectIHandler">
            <summary>设置 LifecycledComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimLifecycledComponentsReleasePolicy.AllInstances.TrackObjectIHandler">
            <summary>设置 LifecycledComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy">
            <summary>Castle.MicroKernel.Releasers.NoTrackingReleasePolicy 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.#ctor(Castle.MicroKernel.Releasers.NoTrackingReleasePolicy)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.Bind(Castle.MicroKernel.IReleasePolicy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.Constructor">
            <summary>设置 NoTrackingReleasePolicy.NoTrackingReleasePolicy() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.Dispose">
            <summary>设置 NoTrackingReleasePolicy.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.HasTrackObject">
            <summary>设置 NoTrackingReleasePolicy.HasTrack(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.ReleaseObject">
            <summary>设置 NoTrackingReleasePolicy.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.TrackObjectIHandler">
            <summary>设置 NoTrackingReleasePolicy.Track(Object instance, IHandler handler) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.AllInstances.Dispose">
            <summary>设置 NoTrackingReleasePolicy.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.AllInstances.HasTrackObject">
            <summary>设置 NoTrackingReleasePolicy.HasTrack(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.AllInstances.ReleaseObject">
            <summary>设置 NoTrackingReleasePolicy.Release(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.ShimNoTrackingReleasePolicy.AllInstances.TrackObjectIHandler">
            <summary>设置 NoTrackingReleasePolicy.Track(Object instance, IHandler handler) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy">
            <summary>Castle.MicroKernel.Releasers.AllComponentsReleasePolicy 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy.InitializeStub">
            <summary>初始化 type StubAllComponentsReleasePolicy 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy.Track(System.Object,Castle.MicroKernel.IHandler)">
            <summary>设置 AllComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy.TrackObjectIHandler">
            <summary>设置 AllComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubAllComponentsReleasePolicy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy">
            <summary>Castle.MicroKernel.Releasers.LifecycledComponentsReleasePolicy 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.InitializeStub">
            <summary>初始化 type StubLifecycledComponentsReleasePolicy 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.Track(System.Object,Castle.MicroKernel.IHandler)">
            <summary>设置 LifecycledComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.TrackObjectIHandler">
            <summary>设置 LifecycledComponentsReleasePolicy.Track(Object instance, IHandler handler) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubLifecycledComponentsReleasePolicy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Releasers.Fakes.StubNoTrackingReleasePolicy">
            <summary>Castle.MicroKernel.Releasers.NoTrackingReleasePolicy 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubNoTrackingReleasePolicy.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Releasers.Fakes.StubNoTrackingReleasePolicy.InitializeStub">
            <summary>初始化 type StubNoTrackingReleasePolicy 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubNoTrackingReleasePolicy.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubNoTrackingReleasePolicy.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Releasers.Fakes.StubNoTrackingReleasePolicy.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver">
            <summary>Castle.MicroKernel.Resolvers.DefaultDependencyResolver 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.#ctor(Castle.MicroKernel.Resolvers.DefaultDependencyResolver)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.Bind(Castle.MicroKernel.IDependencyResolver)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.Bind(Castle.MicroKernel.ISubDependencyResolver)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AddSubResolverISubDependencyResolver">
            <summary>设置 DefaultDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveParameterDependencyComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolveParameterDependency(ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.CanResolveServiceDependencyComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolveServiceDependency(ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ConstructorIKernel">
            <summary>设置 DefaultDependencyResolver.DefaultDependencyResolver(IKernel kernel) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ExtractComponentKeyStringString">
            <summary>设置 DefaultDependencyResolver.ExtractComponentKey(String keyValue, String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.HasComponentInValidStateString">
            <summary>设置 DefaultDependencyResolver.HasComponentInValidState(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.HasComponentInValidStateType">
            <summary>设置 DefaultDependencyResolver.HasComponentInValidState(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.InitializeDependencyDelegate">
            <summary>设置 DefaultDependencyResolver.Initialize(DependencyDelegate dependencyDelegate) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.IsHandlerInValidStateIHandler">
            <summary>设置 DefaultDependencyResolver.IsHandlerInValidState(IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ObtainParameterModelMatchingDependencyDependencyModelComponentModel">
            <summary>设置 DefaultDependencyResolver.ObtainParameterModelMatchingDependency(DependencyModel dependency, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>设置 DefaultDependencyResolver.RaiseDependencyResolving(ComponentModel model, DependencyModel dependency, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.RebuildContextForParameterCreationContextType">
            <summary>设置 DefaultDependencyResolver.RebuildContextForParameter(CreationContext current, Type parameterType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.RemoveSubResolverISubDependencyResolver">
            <summary>设置 DefaultDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveParameterDependencyCreationContextComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.ResolveParameterDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.ResolveServiceDependencyCreationContextComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.ResolveServiceDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.AddSubResolverISubDependencyResolver">
            <summary>设置 DefaultDependencyResolver.AddSubResolver(ISubDependencyResolver subResolver) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveParameterDependencyComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolveParameterDependency(ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.CanResolveServiceDependencyComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolveServiceDependency(ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ExtractComponentKeyStringString">
            <summary>设置 DefaultDependencyResolver.ExtractComponentKey(String keyValue, String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.HasComponentInValidStateString">
            <summary>设置 DefaultDependencyResolver.HasComponentInValidState(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.HasComponentInValidStateType">
            <summary>设置 DefaultDependencyResolver.HasComponentInValidState(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.InitializeDependencyDelegate">
            <summary>设置 DefaultDependencyResolver.Initialize(DependencyDelegate dependencyDelegate) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ObtainParameterModelMatchingDependencyDependencyModelComponentModel">
            <summary>设置 DefaultDependencyResolver.ObtainParameterModelMatchingDependency(DependencyModel dependency, ComponentModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.RaiseDependencyResolvingComponentModelDependencyModelObject">
            <summary>设置 DefaultDependencyResolver.RaiseDependencyResolving(ComponentModel model, DependencyModel dependency, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.RebuildContextForParameterCreationContextType">
            <summary>设置 DefaultDependencyResolver.RebuildContextForParameter(CreationContext current, Type parameterType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.RemoveSubResolverISubDependencyResolver">
            <summary>设置 DefaultDependencyResolver.RemoveSubResolver(ISubDependencyResolver subResolver) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveCreationContextISubDependencyResolverComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveParameterDependencyCreationContextComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.ResolveParameterDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDefaultDependencyResolver.AllInstances.ResolveServiceDependencyCreationContextComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.ResolveServiceDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException">
            <summary>Castle.MicroKernel.Resolvers.DependencyResolverException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.#ctor(Castle.MicroKernel.Resolvers.DependencyResolverException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 DependencyResolverException.DependencyResolverException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.ConstructorString">
            <summary>设置 DependencyResolverException.DependencyResolverException(String message) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.ShimDependencyResolverException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver">
            <summary>Castle.MicroKernel.Resolvers.DefaultDependencyResolver 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.#ctor(Castle.MicroKernel.IKernel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CanResolveParameterDependency(Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 DefaultDependencyResolver.CanResolveParameterDependency(ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CanResolveParameterDependencyComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolveParameterDependency(ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CanResolveServiceDependency(Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 DefaultDependencyResolver.CanResolveServiceDependency(ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CanResolveServiceDependencyComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.CanResolveServiceDependency(ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ExtractComponentKey(System.String,System.String)">
            <summary>设置 DefaultDependencyResolver.ExtractComponentKey(String keyValue, String name) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ExtractComponentKeyStringString">
            <summary>设置 DefaultDependencyResolver.ExtractComponentKey(String keyValue, String name) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.InitializeStub">
            <summary>初始化 type StubDefaultDependencyResolver 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ObtainParameterModelMatchingDependency(Castle.Core.DependencyModel,Castle.Core.ComponentModel)">
            <summary>设置 DefaultDependencyResolver.ObtainParameterModelMatchingDependency(DependencyModel dependency, ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ObtainParameterModelMatchingDependencyDependencyModelComponentModel">
            <summary>设置 DefaultDependencyResolver.ObtainParameterModelMatchingDependency(DependencyModel dependency, ComponentModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ResolveParameterDependency(Castle.MicroKernel.CreationContext,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 DefaultDependencyResolver.ResolveParameterDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ResolveParameterDependencyCreationContextComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.ResolveParameterDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ResolveServiceDependency(Castle.MicroKernel.CreationContext,Castle.Core.ComponentModel,Castle.Core.DependencyModel)">
            <summary>设置 DefaultDependencyResolver.ResolveServiceDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.ResolveServiceDependencyCreationContextComponentModelDependencyModel">
            <summary>设置 DefaultDependencyResolver.ResolveServiceDependency(CreationContext context, ComponentModel model, DependencyModel dependency) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDefaultDependencyResolver.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException">
            <summary>Castle.MicroKernel.Resolvers.DependencyResolverException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubDependencyResolverException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubDependencyResolverException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.InitializeStub">
            <summary>初始化 type StubDependencyResolverException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.Resolvers.Fakes.StubDependencyResolverException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore">
            <summary>Castle.MicroKernel.SubSystems.Configuration.DefaultConfigurationStore 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.#ctor(Castle.MicroKernel.SubSystems.Configuration.DefaultConfigurationStore)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Bind(Castle.MicroKernel.IConfigurationStore)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AddComponentConfigurationStringIConfiguration">
            <summary>设置 DefaultConfigurationStore.AddComponentConfiguration(String key, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AddFacilityConfigurationStringIConfiguration">
            <summary>设置 DefaultConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.Constructor">
            <summary>设置 DefaultConfigurationStore.DefaultConfigurationStore() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetComponentConfigurationString">
            <summary>设置 DefaultConfigurationStore.GetComponentConfiguration(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetComponents">
            <summary>设置 DefaultConfigurationStore.GetComponents() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetFacilities">
            <summary>设置 DefaultConfigurationStore.GetFacilities() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetFacilityConfigurationString">
            <summary>设置 DefaultConfigurationStore.GetFacilityConfiguration(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.GetResourceStringIResource">
            <summary>设置 DefaultConfigurationStore.GetResource(String resourceUri, IResource resource) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.AddComponentConfigurationStringIConfiguration">
            <summary>设置 DefaultConfigurationStore.AddComponentConfiguration(String key, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.AddFacilityConfigurationStringIConfiguration">
            <summary>设置 DefaultConfigurationStore.AddFacilityConfiguration(String key, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetComponentConfigurationString">
            <summary>设置 DefaultConfigurationStore.GetComponentConfiguration(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetComponents">
            <summary>设置 DefaultConfigurationStore.GetComponents() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetFacilities">
            <summary>设置 DefaultConfigurationStore.GetFacilities() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetFacilityConfigurationString">
            <summary>设置 DefaultConfigurationStore.GetFacilityConfiguration(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.ShimDefaultConfigurationStore.AllInstances.GetResourceStringIResource">
            <summary>设置 DefaultConfigurationStore.GetResource(String resourceUri, IResource resource) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore">
            <summary>Castle.MicroKernel.SubSystems.Configuration.DefaultConfigurationStore 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitializeLifetimeService01">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InitializeStub">
            <summary>初始化 type StubDefaultConfigurationStore 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.Terminate01">
            <summary>设置 AbstractSubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Configuration.Fakes.StubDefaultConfigurationStore.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.Constructor">
            <summary>设置 AbstractTypeConverter.AbstractTypeConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.ContextGet">
            <summary>设置 AbstractTypeConverter.get_Context() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.ContextSetITypeConverterContext">
            <summary>设置 AbstractTypeConverter.set_Context(ITypeConverterContext value) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.ContextGet">
            <summary>设置 AbstractTypeConverter.get_Context() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimAbstractTypeConverter.AllInstances.ContextSetITypeConverterContext">
            <summary>设置 AbstractTypeConverter.set_Context(ITypeConverterContext value) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ArrayConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ArrayConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.CanHandleTypeType">
            <summary>设置 ArrayConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.Constructor">
            <summary>设置 ArrayConverter.ArrayConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.PerformConversionIConfigurationType">
            <summary>设置 ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.PerformConversionStringType">
            <summary>设置 ArrayConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances.CanHandleTypeType">
            <summary>设置 ArrayConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimArrayConverter.AllInstances.PerformConversionStringType">
            <summary>设置 ArrayConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ComponentConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ComponentConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.IKernelDependentConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.CanHandleTypeType">
            <summary>设置 ComponentConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.Constructor">
            <summary>设置 ComponentConverter.ComponentConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.PerformConversionIConfigurationType">
            <summary>设置 ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.PerformConversionStringType">
            <summary>设置 ComponentConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances.CanHandleTypeType">
            <summary>设置 ComponentConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimComponentConverter.AllInstances.PerformConversionStringType">
            <summary>设置 ComponentConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ConverterException 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.#ctor(Castle.MicroKernel.SubSystems.Conversion.ConverterException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ConverterException.ConverterException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.ConstructorString">
            <summary>设置 ConverterException.ConverterException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.ConstructorStringException">
            <summary>设置 ConverterException.ConverterException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimConverterException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager">
            <summary>Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.#ctor(Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.SubSystems.Conversion.IConversionManager)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AddITypeConverter">
            <summary>设置 DefaultConversionManager.Add(ITypeConverter converter) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CanHandleTypeType">
            <summary>设置 DefaultConversionManager.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CanHandleTypeTypeIConfiguration">
            <summary>设置 DefaultConversionManager.CanHandleType(Type type, IConfiguration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CompositionGet">
            <summary>设置 DefaultConversionManager.get_Composition() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.Constructor">
            <summary>设置 DefaultConversionManager.DefaultConversionManager() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.ContextGet">
            <summary>设置 DefaultConversionManager.get_Context() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.ContextSetITypeConverterContext">
            <summary>设置 DefaultConversionManager.set_Context(ITypeConverterContext value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.CurrentModelGet">
            <summary>设置 DefaultConversionManager.get_CurrentModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.InitDefaultConverters">
            <summary>设置 DefaultConversionManager.InitDefaultConverters() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.IsSupportedAndPrimitiveTypeType">
            <summary>设置 DefaultConversionManager.IsSupportedAndPrimitiveType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.KernelCastleMicroKernelSubSystemsConversionITypeConverterContextget">
            <summary>设置 DefaultConversionManager.Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PerformConversionIConfigurationType">
            <summary>设置 DefaultConversionManager.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PerformConversionStringType">
            <summary>设置 DefaultConversionManager.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PopModel">
            <summary>设置 DefaultConversionManager.PopModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.PushModelComponentModel">
            <summary>设置 DefaultConversionManager.PushModel(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.AddITypeConverter">
            <summary>设置 DefaultConversionManager.Add(ITypeConverter converter) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CanHandleTypeType">
            <summary>设置 DefaultConversionManager.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CanHandleTypeTypeIConfiguration">
            <summary>设置 DefaultConversionManager.CanHandleType(Type type, IConfiguration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CompositionGet">
            <summary>设置 DefaultConversionManager.get_Composition() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.ContextGet">
            <summary>设置 DefaultConversionManager.get_Context() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.ContextSetITypeConverterContext">
            <summary>设置 DefaultConversionManager.set_Context(ITypeConverterContext value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.CurrentModelGet">
            <summary>设置 DefaultConversionManager.get_CurrentModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.InitDefaultConverters">
            <summary>设置 DefaultConversionManager.InitDefaultConverters() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.IsSupportedAndPrimitiveTypeType">
            <summary>设置 DefaultConversionManager.IsSupportedAndPrimitiveType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.KernelCastleMicroKernelSubSystemsConversionITypeConverterContextget">
            <summary>设置 DefaultConversionManager.Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext.get_Kernel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 DefaultConversionManager.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PerformConversionStringType">
            <summary>设置 DefaultConversionManager.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PopModel">
            <summary>设置 DefaultConversionManager.PopModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDefaultConversionManager.AllInstances.PushModelComponentModel">
            <summary>设置 DefaultConversionManager.PushModel(ComponentModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.DictionaryConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.DictionaryConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.CanHandleTypeType">
            <summary>设置 DictionaryConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.Constructor">
            <summary>设置 DictionaryConverter.DictionaryConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.PerformConversionIConfigurationType">
            <summary>设置 DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.PerformConversionStringType">
            <summary>设置 DictionaryConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances.CanHandleTypeType">
            <summary>设置 DictionaryConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimDictionaryConverter.AllInstances.PerformConversionStringType">
            <summary>设置 DictionaryConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.EnumConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.EnumConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.CanHandleTypeType">
            <summary>设置 EnumConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.Constructor">
            <summary>设置 EnumConverter.EnumConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.PerformConversionIConfigurationType">
            <summary>设置 EnumConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.PerformConversionStringType">
            <summary>设置 EnumConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances.CanHandleTypeType">
            <summary>设置 EnumConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 EnumConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimEnumConverter.AllInstances.PerformConversionStringType">
            <summary>设置 EnumConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ListConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.ListConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.CanHandleTypeType">
            <summary>设置 ListConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.Constructor">
            <summary>设置 ListConverter.ListConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.PerformConversionIConfigurationType">
            <summary>设置 ListConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.PerformConversionStringType">
            <summary>设置 ListConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances.CanHandleTypeType">
            <summary>设置 ListConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 ListConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimListConverter.AllInstances.PerformConversionStringType">
            <summary>设置 ListConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.PrimitiveConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.PrimitiveConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.CanHandleTypeType">
            <summary>设置 PrimitiveConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.Constructor">
            <summary>设置 PrimitiveConverter.PrimitiveConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.PerformConversionIConfigurationType">
            <summary>设置 PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.PerformConversionStringType">
            <summary>设置 PrimitiveConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances.CanHandleTypeType">
            <summary>设置 PrimitiveConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimPrimitiveConverter.AllInstances.PerformConversionStringType">
            <summary>设置 PrimitiveConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.TimeSpanConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.TimeSpanConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.CanHandleTypeType">
            <summary>设置 TimeSpanConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.Constructor">
            <summary>设置 TimeSpanConverter.TimeSpanConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.PerformConversionIConfigurationType">
            <summary>设置 TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.PerformConversionStringType">
            <summary>设置 TimeSpanConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances.CanHandleTypeType">
            <summary>设置 TimeSpanConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTimeSpanConverter.AllInstances.PerformConversionStringType">
            <summary>设置 TimeSpanConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.TypeNameConverter 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.#ctor(Castle.MicroKernel.SubSystems.Conversion.TypeNameConverter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.Bind(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.CanHandleTypeType">
            <summary>设置 TypeNameConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.Constructor">
            <summary>设置 TypeNameConverter.TypeNameConverter() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.PerformConversionIConfigurationType">
            <summary>设置 TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.PerformConversionStringType">
            <summary>设置 TypeNameConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.CanHandleTypeType">
            <summary>设置 TypeNameConverter.CanHandleType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.PerformConversionIConfigurationType">
            <summary>设置 TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.ShimTypeNameConverter.AllInstances.PerformConversionStringType">
            <summary>设置 TypeNameConverter.PerformConversion(String value, Type targetType) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.AbstractTypeConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleType(System.Type)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleTypeType">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.InitializeStub">
            <summary>初始化 type StubAbstractTypeConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 AbstractTypeConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 AbstractTypeConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversionIConfigurationType">
            <summary>设置 AbstractTypeConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.PerformConversionStringType">
            <summary>设置 AbstractTypeConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubAbstractTypeConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ArrayConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleType(System.Type)">
            <summary>设置 ArrayConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleTypeType">
            <summary>设置 ArrayConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.InitializeStub">
            <summary>初始化 type StubArrayConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 ArrayConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversionIConfigurationType">
            <summary>设置 ArrayConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.PerformConversionStringType">
            <summary>设置 ArrayConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubArrayConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ComponentConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleType(System.Type)">
            <summary>设置 ComponentConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleTypeType">
            <summary>设置 ComponentConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.InitializeStub">
            <summary>初始化 type StubComponentConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 ComponentConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversionIConfigurationType">
            <summary>设置 ComponentConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.PerformConversionStringType">
            <summary>设置 ComponentConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubComponentConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ConverterException 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubConverterException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubConverterException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.InitializeStub">
            <summary>初始化 type StubConverterException 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubConverterException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager">
            <summary>Castle.MicroKernel.SubSystems.Conversion.DefaultConversionManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitDefaultConverters">
            <summary>设置 DefaultConversionManager.InitDefaultConverters() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitDefaultConverters01">
            <summary>设置 DefaultConversionManager.InitDefaultConverters() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitializeLifetimeService01">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InitializeStub">
            <summary>初始化 type StubDefaultConversionManager 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.Terminate01">
            <summary>设置 AbstractSubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDefaultConversionManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.DictionaryConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleType(System.Type)">
            <summary>设置 DictionaryConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleTypeType">
            <summary>设置 DictionaryConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.InitializeStub">
            <summary>初始化 type StubDictionaryConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 DictionaryConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversionIConfigurationType">
            <summary>设置 DictionaryConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.PerformConversionStringType">
            <summary>设置 DictionaryConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubDictionaryConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.EnumConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleType(System.Type)">
            <summary>设置 EnumConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleTypeType">
            <summary>设置 EnumConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.InitializeStub">
            <summary>初始化 type StubEnumConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 EnumConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 EnumConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversionIConfigurationType">
            <summary>设置 EnumConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.PerformConversionStringType">
            <summary>设置 EnumConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubEnumConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager">
            <summary>Castle.MicroKernel.SubSystems.Conversion.IConversionManager 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.#ctor">
            <summary>初始化 type StubIConversionManager 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.AddITypeConverter">
            <summary>设置 IConversionManager.Add(ITypeConverter converter) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.AttachBackingFieldToContext">
            <summary>附加委托以将 StubIConversionManager.Context 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.CanHandleTypeType">
            <summary>设置 ITypeConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.CanHandleTypeTypeIConfiguration">
            <summary>设置 ITypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernel)">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>设置 ISubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#SubSystems#Conversion#IConversionManager#Add(Castle.MicroKernel.SubSystems.Conversion.ITypeConverter)">
            <summary>设置 IConversionManager.Add(ITypeConverter converter) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#SubSystems#Conversion#IConversionManager#IsSupportedAndPrimitiveType(System.Type)">
            <summary>设置 IConversionManager.IsSupportedAndPrimitiveType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type)">
            <summary>设置 ITypeConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 ITypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(System.String,System.Type)">
            <summary>设置 ITypeConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.ContextGet">
            <summary>设置 ITypeConverter.get_Context() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.ContextSetITypeConverterContext">
            <summary>设置 ITypeConverter.set_Context(ITypeConverterContext value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.InitIKernel">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.IsSupportedAndPrimitiveTypeType">
            <summary>设置 IConversionManager.IsSupportedAndPrimitiveType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.PerformConversionIConfigurationType">
            <summary>设置 ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.PerformConversionStringType">
            <summary>设置 ITypeConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.Terminate">
            <summary>设置 ISubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIConversionManager.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#Context">
            <summary>设置 ITypeConverter.get_Context() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIKernelDependentConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.IKernelDependentConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubIKernelDependentConverter.#ctor">
            <summary>初始化 type StubIKernelDependentConverter 的新实例</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ITypeConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.#ctor">
            <summary>初始化 type StubITypeConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.AttachBackingFieldToContext">
            <summary>附加委托以将 StubITypeConverter.Context 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.CanHandleTypeType">
            <summary>设置 ITypeConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 ITypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type)">
            <summary>设置 ITypeConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 ITypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#PerformConversion(System.String,System.Type)">
            <summary>设置 ITypeConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.ContextGet">
            <summary>设置 ITypeConverter.get_Context() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.ContextSetITypeConverterContext">
            <summary>设置 ITypeConverter.set_Context(ITypeConverterContext value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.PerformConversionIConfigurationType">
            <summary>设置 ITypeConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.PerformConversionStringType">
            <summary>设置 ITypeConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverter.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverter#Context">
            <summary>设置 ITypeConverter.get_Context() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ITypeConverterContext 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.#ctor">
            <summary>初始化 type StubITypeConverterContext 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#PopModel">
            <summary>设置 ITypeConverterContext.PopModel() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#PushModel(Castle.Core.ComponentModel)">
            <summary>设置 ITypeConverterContext.PushModel(ComponentModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.CompositionGet">
            <summary>设置 ITypeConverterContext.get_Composition() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.CurrentModelGet">
            <summary>设置 ITypeConverterContext.get_CurrentModel() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.KernelGet">
            <summary>设置 ITypeConverterContext.get_Kernel() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.PopModel">
            <summary>设置 ITypeConverterContext.PopModel() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.PushModelComponentModel">
            <summary>设置 ITypeConverterContext.PushModel(ComponentModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#Composition">
            <summary>设置 ITypeConverterContext.get_Composition() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#CurrentModel">
            <summary>设置 ITypeConverterContext.get_CurrentModel() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubITypeConverterContext.cmk::Castle#MicroKernel#SubSystems#Conversion#ITypeConverterContext#Kernel">
            <summary>设置 ITypeConverterContext.get_Kernel() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.ListConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleType(System.Type)">
            <summary>设置 ListConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleTypeType">
            <summary>设置 ListConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.InitializeStub">
            <summary>初始化 type StubListConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 ListConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 ListConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversionIConfigurationType">
            <summary>设置 ListConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.PerformConversionStringType">
            <summary>设置 ListConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubListConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.PrimitiveConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleType(System.Type)">
            <summary>设置 PrimitiveConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleTypeType">
            <summary>设置 PrimitiveConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.InitializeStub">
            <summary>初始化 type StubPrimitiveConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 PrimitiveConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversionIConfigurationType">
            <summary>设置 PrimitiveConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.PerformConversionStringType">
            <summary>设置 PrimitiveConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubPrimitiveConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.TimeSpanConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleType(System.Type)">
            <summary>设置 TimeSpanConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleTypeType">
            <summary>设置 TimeSpanConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.InitializeStub">
            <summary>初始化 type StubTimeSpanConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 TimeSpanConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversionIConfigurationType">
            <summary>设置 TimeSpanConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.PerformConversionStringType">
            <summary>设置 TimeSpanConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTimeSpanConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter">
            <summary>Castle.MicroKernel.SubSystems.Conversion.TypeNameConverter 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleType(System.Type)">
            <summary>设置 TypeNameConverter.CanHandleType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleType(System.Type,Castle.Core.Configuration.IConfiguration)">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleTypeType">
            <summary>设置 TypeNameConverter.CanHandleType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CanHandleTypeTypeIConfiguration">
            <summary>设置 AbstractTypeConverter.CanHandleType(Type type, IConfiguration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.InitializeStub">
            <summary>初始化 type StubTypeNameConverter 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversion(Castle.Core.Configuration.IConfiguration,System.Type)">
            <summary>设置 TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversion(System.String,System.Type)">
            <summary>设置 TypeNameConverter.PerformConversion(String value, Type targetType) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversionIConfigurationType">
            <summary>设置 TypeNameConverter.PerformConversion(IConfiguration configuration, Type targetType) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.PerformConversionStringType">
            <summary>设置 TypeNameConverter.PerformConversion(String value, Type targetType) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Conversion.Fakes.StubTypeNameConverter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName">
            <summary>Castle.MicroKernel.SubSystems.Naming.BinaryTreeComponentName 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.#ctor(Castle.MicroKernel.SubSystems.Naming.BinaryTreeComponentName)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AddComponentNameIHandler">
            <summary>设置 BinaryTreeComponentName.Add(ComponentName name, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.Constructor">
            <summary>设置 BinaryTreeComponentName.BinaryTreeComponentName() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.ContainsComponentName">
            <summary>设置 BinaryTreeComponentName.Contains(ComponentName name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.CountGet">
            <summary>设置 BinaryTreeComponentName.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.GetHandlerComponentName">
            <summary>设置 BinaryTreeComponentName.GetHandler(ComponentName name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.GetHandlersComponentName">
            <summary>设置 BinaryTreeComponentName.GetHandlers(ComponentName name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.HandlersGet">
            <summary>设置 BinaryTreeComponentName.get_Handlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.RemoveComponentName">
            <summary>设置 BinaryTreeComponentName.Remove(ComponentName name) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances.AddComponentNameIHandler">
            <summary>设置 BinaryTreeComponentName.Add(ComponentName name, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances.ContainsComponentName">
            <summary>设置 BinaryTreeComponentName.Contains(ComponentName name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances.CountGet">
            <summary>设置 BinaryTreeComponentName.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances.GetHandlerComponentName">
            <summary>设置 BinaryTreeComponentName.GetHandler(ComponentName name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances.GetHandlersComponentName">
            <summary>设置 BinaryTreeComponentName.GetHandlers(ComponentName name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances.HandlersGet">
            <summary>设置 BinaryTreeComponentName.get_Handlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimBinaryTreeComponentName.AllInstances.RemoveComponentName">
            <summary>设置 BinaryTreeComponentName.Remove(ComponentName name) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName">
            <summary>Castle.MicroKernel.SubSystems.Naming.ComponentName 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.#ctor(Castle.MicroKernel.SubSystems.Naming.ComponentName)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ComponentName.ComponentName(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.ConstructorString">
            <summary>设置 ComponentName.ComponentName(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.ConstructorStringString">
            <summary>设置 ComponentName.ComponentName(String service, String properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.EqualsObject">
            <summary>设置 ComponentName.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.GetHashCode">
            <summary>设置 ComponentName.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 ComponentName.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.ItemGetString">
            <summary>设置 ComponentName.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.LiteralPropertiesGet">
            <summary>设置 ComponentName.get_LiteralProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.PropertiesGet">
            <summary>设置 ComponentName.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.ServiceGet">
            <summary>设置 ComponentName.get_Service() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.SetupPropertiesIDictionary">
            <summary>设置 ComponentName.SetupProperties(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.SetupPropertiesString">
            <summary>设置 ComponentName.SetupProperties(String properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.SetupServiceString">
            <summary>设置 ComponentName.SetupService(String service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.SetupString">
            <summary>设置 ComponentName.Setup(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.ToString">
            <summary>设置 ComponentName.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.EqualsObject">
            <summary>设置 ComponentName.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.GetHashCode01">
            <summary>设置 ComponentName.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 ComponentName.GetObjectData(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.ItemGetString">
            <summary>设置 ComponentName.get_Item(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.LiteralPropertiesGet">
            <summary>设置 ComponentName.get_LiteralProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.PropertiesGet">
            <summary>设置 ComponentName.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.ServiceGet">
            <summary>设置 ComponentName.get_Service() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.SetupPropertiesIDictionary">
            <summary>设置 ComponentName.SetupProperties(IDictionary properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.SetupPropertiesString">
            <summary>设置 ComponentName.SetupProperties(String properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.SetupServiceString">
            <summary>设置 ComponentName.SetupService(String service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.SetupString">
            <summary>设置 ComponentName.Setup(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimComponentName.AllInstances.ToString01">
            <summary>设置 ComponentName.ToString() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem">
            <summary>Castle.MicroKernel.SubSystems.Naming.DefaultNamingSubSystem 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.#ctor(Castle.MicroKernel.SubSystems.Naming.DefaultNamingSubSystem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Bind(Castle.MicroKernel.INamingSubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ComponentCountGet">
            <summary>设置 DefaultNamingSubSystem.get_ComponentCount() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.Constructor">
            <summary>设置 DefaultNamingSubSystem.DefaultNamingSubSystem() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ContainsString">
            <summary>设置 DefaultNamingSubSystem.Contains(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ContainsType">
            <summary>设置 DefaultNamingSubSystem.Contains(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetAssignableHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetAssignableHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlerString">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlerStringType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlerType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlers">
            <summary>设置 DefaultNamingSubSystem.GetHandlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlersString">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetKey2Handler">
            <summary>设置 DefaultNamingSubSystem.GetKey2Handler() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.GetService2Handler">
            <summary>设置 DefaultNamingSubSystem.GetService2Handler() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ItemSetStringIHandler">
            <summary>设置 DefaultNamingSubSystem.set_Item(String key, IHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.ItemSetTypeIHandler">
            <summary>设置 DefaultNamingSubSystem.set_Item(Type service, IHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.RegisterStringIHandler">
            <summary>设置 DefaultNamingSubSystem.Register(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.UnRegisterString">
            <summary>设置 DefaultNamingSubSystem.UnRegister(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.UnRegisterType">
            <summary>设置 DefaultNamingSubSystem.UnRegister(Type service) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ComponentCountGet">
            <summary>设置 DefaultNamingSubSystem.get_ComponentCount() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ContainsString">
            <summary>设置 DefaultNamingSubSystem.Contains(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ContainsType">
            <summary>设置 DefaultNamingSubSystem.Contains(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetAssignableHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetAssignableHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlerString">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlerStringType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key, Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlerType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlers">
            <summary>设置 DefaultNamingSubSystem.GetHandlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlersString">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(Type service) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetKey2Handler">
            <summary>设置 DefaultNamingSubSystem.GetKey2Handler() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.GetService2Handler">
            <summary>设置 DefaultNamingSubSystem.GetService2Handler() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ItemSetStringIHandler">
            <summary>设置 DefaultNamingSubSystem.set_Item(String key, IHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.ItemSetTypeIHandler">
            <summary>设置 DefaultNamingSubSystem.set_Item(Type service, IHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.RegisterStringIHandler">
            <summary>设置 DefaultNamingSubSystem.Register(String key, IHandler handler) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.UnRegisterString">
            <summary>设置 DefaultNamingSubSystem.UnRegister(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimDefaultNamingSubSystem.AllInstances.UnRegisterType">
            <summary>设置 DefaultNamingSubSystem.UnRegister(Type service) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem">
            <summary>Castle.MicroKernel.SubSystems.Naming.NamingPartsSubSystem 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.#ctor(Castle.MicroKernel.SubSystems.Naming.NamingPartsSubSystem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.Bind(Castle.MicroKernel.INamingSubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.ComponentCountGet">
            <summary>设置 NamingPartsSubSystem.get_ComponentCount() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.Constructor">
            <summary>设置 NamingPartsSubSystem.NamingPartsSubSystem() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.ContainsString">
            <summary>设置 NamingPartsSubSystem.Contains(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.GetHandlerString">
            <summary>设置 NamingPartsSubSystem.GetHandler(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.GetHandlers">
            <summary>设置 NamingPartsSubSystem.GetHandlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.GetHandlersString">
            <summary>设置 NamingPartsSubSystem.GetHandlers(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.ItemSetStringIHandler">
            <summary>设置 NamingPartsSubSystem.set_Item(String key, IHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.ToComponentNameString">
            <summary>设置 NamingPartsSubSystem.ToComponentName(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.UnRegisterString">
            <summary>设置 NamingPartsSubSystem.UnRegister(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.ComponentCountGet">
            <summary>设置 NamingPartsSubSystem.get_ComponentCount() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.ContainsString">
            <summary>设置 NamingPartsSubSystem.Contains(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.GetHandlerString">
            <summary>设置 NamingPartsSubSystem.GetHandler(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.GetHandlers">
            <summary>设置 NamingPartsSubSystem.GetHandlers() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.GetHandlersString">
            <summary>设置 NamingPartsSubSystem.GetHandlers(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.ItemSetStringIHandler">
            <summary>设置 NamingPartsSubSystem.set_Item(String key, IHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.ToComponentNameString">
            <summary>设置 NamingPartsSubSystem.ToComponentName(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.ShimNamingPartsSubSystem.AllInstances.UnRegisterString">
            <summary>设置 NamingPartsSubSystem.UnRegister(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.StubBinaryTreeComponentName">
            <summary>Castle.MicroKernel.SubSystems.Naming.BinaryTreeComponentName 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubBinaryTreeComponentName.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubBinaryTreeComponentName.InitializeStub">
            <summary>初始化 type StubBinaryTreeComponentName 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubBinaryTreeComponentName.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubBinaryTreeComponentName.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubBinaryTreeComponentName.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName">
            <summary>Castle.MicroKernel.SubSystems.Naming.ComponentName 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.Equals(System.Object)">
            <summary>设置 ComponentName.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.EqualsObject">
            <summary>设置 ComponentName.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.GetHashCode">
            <summary>设置 ComponentName.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.GetHashCode01">
            <summary>设置 ComponentName.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.InitializeStub">
            <summary>初始化 type StubComponentName 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.Setup(System.String)">
            <summary>设置 ComponentName.Setup(String name) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.SetupProperties(System.String)">
            <summary>设置 ComponentName.SetupProperties(String properties) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.SetupProperties(System.Collections.IDictionary)">
            <summary>设置 ComponentName.SetupProperties(IDictionary properties) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.SetupPropertiesIDictionary">
            <summary>设置 ComponentName.SetupProperties(IDictionary properties) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.SetupPropertiesString">
            <summary>设置 ComponentName.SetupProperties(String properties) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.SetupService(System.String)">
            <summary>设置 ComponentName.SetupService(String service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.SetupServiceString">
            <summary>设置 ComponentName.SetupService(String service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.SetupString">
            <summary>设置 ComponentName.Setup(String name) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.ToString">
            <summary>设置 ComponentName.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.ToString01">
            <summary>设置 ComponentName.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubComponentName.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem">
            <summary>Castle.MicroKernel.SubSystems.Naming.DefaultNamingSubSystem 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ComponentCountGet">
            <summary>设置 DefaultNamingSubSystem.get_ComponentCount() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Contains(System.String)">
            <summary>设置 DefaultNamingSubSystem.Contains(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Contains(System.Type)">
            <summary>设置 DefaultNamingSubSystem.Contains(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ContainsString">
            <summary>设置 DefaultNamingSubSystem.Contains(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ContainsType">
            <summary>设置 DefaultNamingSubSystem.Contains(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetAssignableHandlers(System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetAssignableHandlers(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetAssignableHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetAssignableHandlers(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandler(System.String)">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandler(System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetHandler(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandler(System.String,System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key, Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlerString">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlerStringType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key, Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlerType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlers">
            <summary>设置 DefaultNamingSubSystem.GetHandlers() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlers(System.String)">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(String query) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlers(System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlers01">
            <summary>设置 DefaultNamingSubSystem.GetHandlers() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlersString">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(String query) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.GetHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitializeLifetimeService01">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InitializeStub">
            <summary>初始化 type StubDefaultNamingSubSystem 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ItemSetStringIHandler">
            <summary>设置 DefaultNamingSubSystem.set_Item(String key, IHandler value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ItemSetTypeIHandler">
            <summary>设置 DefaultNamingSubSystem.set_Item(Type service, IHandler value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Register(System.String,Castle.MicroKernel.IHandler)">
            <summary>设置 DefaultNamingSubSystem.Register(String key, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.RegisterStringIHandler">
            <summary>设置 DefaultNamingSubSystem.Register(String key, IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Terminate01">
            <summary>设置 AbstractSubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.UnRegister(System.String)">
            <summary>设置 DefaultNamingSubSystem.UnRegister(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.UnRegister(System.Type)">
            <summary>设置 DefaultNamingSubSystem.UnRegister(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.UnRegisterString">
            <summary>设置 DefaultNamingSubSystem.UnRegister(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.UnRegisterType">
            <summary>设置 DefaultNamingSubSystem.UnRegister(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.ComponentCount">
            <summary>设置 DefaultNamingSubSystem.get_ComponentCount() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Item(System.String)">
            <summary>设置 DefaultNamingSubSystem.set_Item(String key, IHandler value) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubDefaultNamingSubSystem.Item(System.Type)">
            <summary>设置 DefaultNamingSubSystem.set_Item(Type service, IHandler value) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem">
            <summary>Castle.MicroKernel.SubSystems.Naming.NamingPartsSubSystem 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.ComponentCountGet">
            <summary>设置 NamingPartsSubSystem.get_ComponentCount() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Contains(System.String)">
            <summary>设置 NamingPartsSubSystem.Contains(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Contains(System.Type)">
            <summary>设置 DefaultNamingSubSystem.Contains(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.ContainsString">
            <summary>设置 NamingPartsSubSystem.Contains(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.ContainsType">
            <summary>设置 DefaultNamingSubSystem.Contains(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetAssignableHandlers(System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetAssignableHandlers(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetAssignableHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetAssignableHandlers(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandler(System.String)">
            <summary>设置 NamingPartsSubSystem.GetHandler(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandler(System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetHandler(Type service) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandler(System.String,System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key, Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlerString">
            <summary>设置 NamingPartsSubSystem.GetHandler(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlerStringType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(String key, Type service) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlerType">
            <summary>设置 DefaultNamingSubSystem.GetHandler(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlers">
            <summary>设置 NamingPartsSubSystem.GetHandlers() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlers(System.String)">
            <summary>设置 NamingPartsSubSystem.GetHandlers(String query) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlers(System.Type)">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlers01">
            <summary>设置 NamingPartsSubSystem.GetHandlers() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlersString">
            <summary>设置 NamingPartsSubSystem.GetHandlers(String query) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.GetHandlersType">
            <summary>设置 DefaultNamingSubSystem.GetHandlers(Type service) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.InitializeLifetimeService01">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.InitializeStub">
            <summary>初始化 type StubNamingPartsSubSystem 的新实例</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.ItemSetStringIHandler">
            <summary>设置 NamingPartsSubSystem.set_Item(String key, IHandler value) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.ItemSetTypeIHandler">
            <summary>设置 DefaultNamingSubSystem.set_Item(Type service, IHandler value) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Register(System.String,Castle.MicroKernel.IHandler)">
            <summary>设置 DefaultNamingSubSystem.Register(String key, IHandler handler) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.RegisterStringIHandler">
            <summary>设置 DefaultNamingSubSystem.Register(String key, IHandler handler) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Terminate01">
            <summary>设置 AbstractSubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.UnRegister(System.String)">
            <summary>设置 NamingPartsSubSystem.UnRegister(String key) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.UnRegister(System.Type)">
            <summary>设置 DefaultNamingSubSystem.UnRegister(Type service) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.UnRegisterString">
            <summary>设置 NamingPartsSubSystem.UnRegister(String key) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.UnRegisterType">
            <summary>设置 DefaultNamingSubSystem.UnRegister(Type service) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.ComponentCount">
            <summary>设置 NamingPartsSubSystem.get_ComponentCount() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Item(System.String)">
            <summary>设置 NamingPartsSubSystem.set_Item(String key, IHandler value) 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Naming.Fakes.StubNamingPartsSubSystem.Item(System.Type)">
            <summary>设置 DefaultNamingSubSystem.set_Item(Type service, IHandler value) 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem">
            <summary>Castle.MicroKernel.SubSystems.Resource.DefaultResourceSubSystem 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.#ctor(Castle.MicroKernel.SubSystems.Resource.DefaultResourceSubSystem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Bind(Castle.MicroKernel.ISubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Bind(Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.Constructor">
            <summary>设置 DefaultResourceSubSystem.DefaultResourceSubSystem() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceCustomUri">
            <summary>设置 DefaultResourceSubSystem.CreateResource(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceCustomUriString">
            <summary>设置 DefaultResourceSubSystem.CreateResource(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceString">
            <summary>设置 DefaultResourceSubSystem.CreateResource(String resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.CreateResourceStringString">
            <summary>设置 DefaultResourceSubSystem.CreateResource(String resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.InitDefaultResourceFactories">
            <summary>设置 DefaultResourceSubSystem.InitDefaultResourceFactories() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.RegisterResourceFactoryIResourceFactory">
            <summary>设置 DefaultResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceCustomUri">
            <summary>设置 DefaultResourceSubSystem.CreateResource(CustomUri uri) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceCustomUriString">
            <summary>设置 DefaultResourceSubSystem.CreateResource(CustomUri uri, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceString">
            <summary>设置 DefaultResourceSubSystem.CreateResource(String resource) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.CreateResourceStringString">
            <summary>设置 DefaultResourceSubSystem.CreateResource(String resource, String basePath) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.InitDefaultResourceFactories">
            <summary>设置 DefaultResourceSubSystem.InitDefaultResourceFactories() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.ShimDefaultResourceSubSystem.AllInstances.RegisterResourceFactoryIResourceFactory">
            <summary>设置 DefaultResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem">
            <summary>Castle.MicroKernel.SubSystems.Resource.DefaultResourceSubSystem 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.Init(Castle.MicroKernel.IKernel)">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitDefaultResourceFactories">
            <summary>设置 DefaultResourceSubSystem.InitDefaultResourceFactories() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitDefaultResourceFactories01">
            <summary>设置 DefaultResourceSubSystem.InitDefaultResourceFactories() 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitIKernel">
            <summary>设置 AbstractSubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitializeLifetimeService">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitializeLifetimeService01">
            <summary>设置 AbstractSubSystem.InitializeLifetimeService() 的 stub</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InitializeStub">
            <summary>初始化 type StubDefaultResourceSubSystem 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.Terminate">
            <summary>设置 AbstractSubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.Terminate01">
            <summary>设置 AbstractSubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.SubSystems.Resource.Fakes.StubDefaultResourceSubSystem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem">
            <summary>Castle.MicroKernel.SubSystems.Resource.IResourceSubSystem 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.#ctor">
            <summary>初始化 type StubIResourceSubSystem 的新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cmk::Castle#MicroKernel#ISubSystem#Init(Castle.MicroKernel.IKernel)">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cmk::Castle#MicroKernel#ISubSystem#Terminate">
            <summary>设置 ISubSystem.Terminate() 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cmk::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(Castle.Core.Resource.CustomUri)">
            <summary>设置 IResourceSubSystem.CreateResource(CustomUri uri) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cmk::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(System.String)">
            <summary>设置 IResourceSubSystem.CreateResource(String resource) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cmk::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(Castle.Core.Resource.CustomUri,System.String)">
            <summary>设置 IResourceSubSystem.CreateResource(CustomUri uri, String basePath) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cmk::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#CreateResource(System.String,System.String)">
            <summary>设置 IResourceSubSystem.CreateResource(String resource, String basePath) 的 存根</summary>
        </member>
        <member name="M:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.cmk::Castle#MicroKernel#SubSystems#Resource#IResourceSubSystem#RegisterResourceFactory(Castle.Core.Resource.IResourceFactory)">
            <summary>设置 IResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory) 的 存根</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceCustomUri">
            <summary>设置 IResourceSubSystem.CreateResource(CustomUri uri) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceCustomUriString">
            <summary>设置 IResourceSubSystem.CreateResource(CustomUri uri, String basePath) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceString">
            <summary>设置 IResourceSubSystem.CreateResource(String resource) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.CreateResourceStringString">
            <summary>设置 IResourceSubSystem.CreateResource(String resource, String basePath) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.InitIKernel">
            <summary>设置 ISubSystem.Init(IKernel kernel) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.RegisterResourceFactoryIResourceFactory">
            <summary>设置 IResourceSubSystem.RegisterResourceFactory(IResourceFactory resourceFactory) 的 stub</summary>
        </member>
        <member name="F:Castle.MicroKernel.SubSystems.Resource.Fakes.StubIResourceSubSystem.Terminate">
            <summary>设置 ISubSystem.Terminate() 的 stub</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimGenericTypeNameProvider">
            <summary>Castle.MicroKernel.Util.GenericTypeNameProvider 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimGenericTypeNameProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimGenericTypeNameProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimGenericTypeNameProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimGenericTypeNameProvider.AppendGenericTypeNameIHandlerTypeString">
            <summary>设置 GenericTypeNameProvider.AppendGenericTypeName(IHandler handler, Type genericService, String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimGenericTypeNameProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimGenericTypeNameProvider.StripGenericTypeNameString">
            <summary>设置 GenericTypeNameProvider.StripGenericTypeName(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer">
            <summary>Castle.MicroKernel.Util.ReferenceComparer 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.#ctor(Castle.MicroKernel.Util.ReferenceComparer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.Bind(System.Collections.IComparer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.CompareObjectObject">
            <summary>设置 ReferenceComparer.Compare(Object x, Object y) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.Constructor">
            <summary>设置 ReferenceComparer.ReferenceComparer() 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceComparer.AllInstances.CompareObjectObject">
            <summary>设置 ReferenceComparer.Compare(Object x, Object y) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil">
            <summary>Castle.MicroKernel.Util.ReferenceExpressionUtil 的填充码类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.#ctor(Castle.MicroKernel.Util.ReferenceExpressionUtil)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.Constructor">
            <summary>设置 ReferenceExpressionUtil.ReferenceExpressionUtil() 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.ExtractComponentKeyString">
            <summary>设置 ReferenceExpressionUtil.ExtractComponentKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.IsReferenceString">
            <summary>设置 ReferenceExpressionUtil.IsReference(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.ShimReferenceExpressionUtil.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.StubReferenceComparer">
            <summary>Castle.MicroKernel.Util.ReferenceComparer 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubReferenceComparer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubReferenceComparer.InitializeStub">
            <summary>初始化 type StubReferenceComparer 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceComparer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceComparer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceComparer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil">
            <summary>Castle.MicroKernel.Util.ReferenceExpressionUtil 的存根类型</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.InitializeStub">
            <summary>初始化 type StubReferenceExpressionUtil 的新实例</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.MicroKernel.Util.Fakes.StubReferenceExpressionUtil.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
