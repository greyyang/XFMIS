<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaseSqlMap" xml:space="preserve">
    <value>using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using IBatisNet.Common;
using IBatisNet.Common.Pagination;
using IBatisNet.DataMapper;
using IBatisNet.DataMapper.Exceptions;
using IBatisNet.DataMapper.MappedStatements;
using IBatisNet.DataMapper.Scope;

${ComponentNameSpace}

namespace ${DaoNameSpace}
{
    public abstract class BaseSqlMapDao
    {
        /// &lt;summary&gt;
        /// ISqlMapper实例
        /// 从WindsorContainer容器中获取
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static ISqlMapper sqlMap = (ContainerAccessorUtil.GetContainer())["sqlServerSqlMap"] as ISqlMapper;
        /// &lt;summary&gt;
        /// 获取列表
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;实体类型&lt;/typeparam&gt;
        /// &lt;param name="statementName"&gt;操作名称，对应xml中的Statement的id&lt;/param&gt;
        /// &lt;param name="parameterObject"&gt;参数&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public  virtual IList&lt;T&gt; ExecuteQueryForList&lt;T&gt;(string statementName, object parameterObject)
        {
            try
            {
                return sqlMap.QueryForList&lt;T&gt;(statementName, parameterObject);
            }
            catch (Exception e)
            {
                throw new DataMapperException("Error executing query '" + statementName + "' for list.  Cause: " + e.Message, e);
            }
        }

        /// &lt;summary&gt;
        /// 得到指定数量的记录数
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;param name="statementName"&gt;&lt;/param&gt;
        /// &lt;param name="parameterObject"&gt;参数&lt;/param&gt;
        /// &lt;param name="skipResults"&gt;跳过的记录数&lt;/param&gt;
        /// &lt;param name="maxResults"&gt;最大返回的记录数&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public virtual IList&lt;T&gt; ExecuteQueryForList&lt;T&gt;(string statementName, object parameterObject, int skipResults, int maxResults)
        {
            try
            {
                
                return sqlMap.QueryForList&lt;T&gt;(statementName, parameterObject, skipResults, maxResults);
            }
            catch (Exception e)
            {
                throw new DataMapperException("Error executing query '" + statementName + "' for list.  Cause: " + e.Message, e);
            }
        }

        /// &lt;summary&gt;
        /// 获取分页的列表
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;操作名称&lt;/param&gt;
        /// &lt;param name="parameterObject"&gt;参数&lt;/param&gt;
        /// &lt;param name="pageSize"&gt;每页记录数&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        protected virtual IPaginatedList ExecuteQueryForPaginatedList(string statementName, object parameterObject, int pageSize)
        {
            try
            {
                return sqlMap.QueryForPaginatedList(statementName, parameterObject, pageSize);
            }
            catch (Exception e)
            {
                throw new DataMapperException("Error executing query '" + statementName + "' for paginated list.  Cause: " + e.Message, e);
            }
        }

        /// &lt;summary&gt;
        /// 查询得到对象的一个实例
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;对象type&lt;/typeparam&gt;
        /// &lt;param name="statementName"&gt;操作名&lt;/param&gt;
        /// &lt;param name="parameterObject"&gt;参数&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        protected virtual T ExecuteQueryForObject&lt;T&gt;(string statementName, object parameterObject)
        {
            try
            {
                return sqlMap.QueryForObject&lt;T&gt;(statementName, parameterObject);
            }
            catch (Exception e)
            {
                throw new DataMapperException("Error executing query '" + statementName + "' for object.  Cause: " + e.Message, e);
            }
        }

        /// &lt;summary&gt;
        /// 执行添加
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;操作名&lt;/param&gt;
        /// &lt;param name="parameterObject"&gt;参数&lt;/param&gt;
        protected virtual object ExecuteInsert(string statementName, object parameterObject)
        {
            try
            {
               return sqlMap.Insert(statementName, parameterObject);
            }
            catch (Exception e)
            {
                throw new DataMapperException("Error executing query '" + statementName + "' for insert.  Cause: " + e.Message, e);
            }
        }

        /// &lt;summary&gt;
        /// 执行修改
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;操作名&lt;/param&gt;
        /// &lt;param name="parameterObject"&gt;参数&lt;/param&gt;
        protected virtual int ExecuteUpdate(string statementName, object parameterObject)
        {
            try
            {
                return sqlMap.Update(statementName, parameterObject);
            }
            catch (Exception e)
            {
                throw new DataMapperException("Error executing query '" + statementName + "' for update.  Cause: " + e.Message, e);
            }
        }

        /// &lt;summary&gt;
        /// 执行删除
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;操作名&lt;/param&gt;
        /// &lt;param name="parameterObject"&gt;参数&lt;/param&gt;
        protected virtual int ExecuteDelete(string statementName, object parameterObject)
        {
            try
            {
                return sqlMap.Delete(statementName, parameterObject);
            }
            catch (Exception e)
            {
                throw new DataMapperException("Error executing query '" + statementName + "' for delete.  Cause: " + e.Message, e);
            }
        }

        #region AdoNet操作

		/// &lt;summary&gt;
        /// 返回一个DataTable
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;&lt;/param&gt;
        /// &lt;param name="paramObject"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public DataTable QueryForDataTable(string statementName, Hashtable parameterObject)
        {
            DataTable dt = new DataTable();
            string connStr = sqlMap.DataSource.ConnectionString;
            using (SqlConnection conn = new SqlConnection(connStr))
            {
                conn.Open();
            }
            return dt;
        }

		/// &lt;summary&gt;
        /// 返回IDbCommand的函数
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;&lt;/param&gt;
        /// &lt;param name="paramObject"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private IDbCommand GetDbCommand(string statementName, object parameterObject)
        {
            IDbCommand p_command;
            IBatisNet.Common.IDalSession m_sqlSession;

            if (sqlMap.LocalSession != null)
            {
                m_sqlSession = sqlMap.LocalSession;
            }
            else
            {
                m_sqlSession = sqlMap.OpenConnection();
            }
            IMappedStatement mappedStatement = sqlMap.GetMappedStatement(statementName);
            RequestScope requestScope = mappedStatement.Statement.Sql.GetRequestScope(mappedStatement, parameterObject, m_sqlSession);
            // 通过这个方法生成一个DbCommand，并且给所有的SQL参数指定值。如果没有调用此方法，requestScope.IDbCommand属性为空  //
            mappedStatement.PreparedCommand.Create(requestScope,
             m_sqlSession, mappedStatement.Statement, parameterObject);
            p_command = requestScope.IDbCommand;
            return p_command;
        }
		
		/// &lt;summary&gt;
        /// 实现返回DataSet的函数
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;&lt;/param&gt;
        /// &lt;param name="paramObject"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        protected DataSet ExecuteQueryTable(string statementName, object parameterObject)
        {
            DataSet ds = new DataSet();
            IDbCommand cmd = GetDbCommand(statementName, parameterObject);
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = this.GetSql(statementName, parameterObject);
            if (sqlMap.LocalSession != null)
            {
                IDbDataAdapter adapter =
                 sqlMap.LocalSession.CreateDataAdapter(cmd);
                adapter.Fill(ds);
                return ds;
            }
            else
            {
                IDalSession session = sqlMap.OpenConnection();
                IDbDataAdapter adapter =
                 session.CreateDataAdapter(cmd);
                adapter.Fill(ds);
                session.CloseConnection();
                return ds;
            }
        }
		
		/// &lt;summary&gt;
        /// 结果集返回一个DataSet
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;&lt;/param&gt;
        /// &lt;param name="paramObject"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        protected virtual DataSet QueryForDataSet(string statementName, object paramObject)
        {
            DataSet ds = new DataSet();
            IMappedStatement statement = sqlMap.GetMappedStatement(statementName);
            if (!sqlMap.IsSessionStarted)
            {
                sqlMap.OpenConnection();
            }
            RequestScope scope = statement.Statement.Sql.GetRequestScope(statement, paramObject, sqlMap.LocalSession);
            statement.PreparedCommand.Create(scope, sqlMap.LocalSession, statement.Statement, paramObject);
            sqlMap.LocalSession.CreateDataAdapter(scope.IDbCommand).Fill(ds);

            return ds;
        }
		
        /// &lt;summary&gt;
        /// 获取xml文件配置块的sql语句
        /// &lt;/summary&gt;
        /// &lt;param name="statementName"&gt;&lt;/param&gt;
        /// &lt;param name="paramObject"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        protected virtual string GetSql(string statementName, object paramObject)
        {
            IMappedStatement statement = sqlMap.GetMappedStatement(statementName);
            if (!sqlMap.IsSessionStarted)
            {
                sqlMap.OpenConnection();
            }
            RequestScope scope = statement.Statement.Sql.GetRequestScope(statement, paramObject, sqlMap.LocalSession);

            return scope.PreparedStatement.PreparedSql;
        }
        #endregion
    }
}</value>
  </data>
  <data name="CommonLogicsConfig" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  &lt;components&gt;
    ${LogicComponent}
  &lt;/components&gt;
&lt;/configuration&gt;</value>
  </data>
  <data name="ComponentProject" xml:space="preserve">
    <value>&lt;Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
    &lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
    &lt;ProductVersion&gt;8.0.50727&lt;/ProductVersion&gt;
    &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
    &lt;ProjectGuid&gt;{${Guid}}&lt;/ProjectGuid&gt;
    &lt;OutputType&gt;Library&lt;/OutputType&gt;
    &lt;AppDesignerFolder&gt;Properties&lt;/AppDesignerFolder&gt;
    &lt;RootNamespace&gt;${NameSpace}&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;${Assembly}&lt;/AssemblyName&gt;
    &lt;SccProjectName&gt;
    &lt;/SccProjectName&gt;
    &lt;SccLocalPath&gt;
    &lt;/SccLocalPath&gt;
    &lt;SccAuxPath&gt;
    &lt;/SccAuxPath&gt;
    &lt;SccProvider&gt;
    &lt;/SccProvider&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "&gt;
    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;false&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Debug\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "&gt;
    &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Release\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="Castle.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\Castle.Core.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Castle.MicroKernel, Version=1.0.0.2, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\Castle.MicroKernel.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Castle.Windsor, Version=1.0.0.2, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\Castle.Windsor.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System" /&gt;
    &lt;Reference Include="System.Data" /&gt;
    &lt;Reference Include="System.Drawing" /&gt;
    &lt;Reference Include="System.Security" /&gt;
    &lt;Reference Include="System.Web" /&gt;
    &lt;Reference Include="System.Xml" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Compile Include="ContainerAccessorUtil.cs" /&gt;
    &lt;Compile Include="Properties\AssemblyInfo.cs" /&gt;
  &lt;/ItemGroup&gt;
  &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
  &lt;!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  &lt;Target Name="BeforeBuild"&gt;
  &lt;/Target&gt;
  &lt;Target Name="AfterBuild"&gt;
  &lt;/Target&gt;
  --&gt;
&lt;/Project&gt;</value>
  </data>
  <data name="ContainerAccessorUtil" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using Castle.Windsor;

namespace ${NameSpace}
{
    public class ContainerAccessorUtil
    {
        private ContainerAccessorUtil()
        {
        }

        /// &lt;summary&gt;
        /// Obtain the Cuyahoga container.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static IWindsorContainer GetContainer()
        {
            IContainerAccessor containerAccessor = HttpContext.Current.ApplicationInstance as IContainerAccessor;

            if (containerAccessor == null)
            {
                throw new Exception("You must extend the HttpApplication in your web project " +
                    "and implement the IContainerAccessor to properly expose your container instance");
            }

            IWindsorContainer container = containerAccessor.Container as IWindsorContainer;

            if (container == null)
            {
                throw new Exception("The container seems to be unavailable in " +
                    "your HttpApplication subclass");
            }

            return container;
        }
    } 
}</value>
  </data>
  <data name="EntityBuild" xml:space="preserve">
    <value />
  </data>
  <data name="EntityClass" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;

namespace ${NameSpace}
{
    [Serializable]
	public class ${ClassName}
	{
		public ${ClassName}()
		{
			${Constructor}
		}

		${Fields}
		
		${EqualsHashCode}		
	}
}</value>
  </data>
  <data name="EntityProject" xml:space="preserve">
    <value>&lt;Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
	&lt;PropertyGroup&gt;
		&lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
		&lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
		&lt;ProductVersion&gt;8.0.50727&lt;/ProductVersion&gt;
		&lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
		&lt;ProjectGuid&gt;{${Guid}}&lt;/ProjectGuid&gt;
		&lt;OutputType&gt;Library&lt;/OutputType&gt;
		&lt;AppDesignerFolder&gt;Properties&lt;/AppDesignerFolder&gt;
		&lt;RootNamespace&gt;${NameSpace}&lt;/RootNamespace&gt;
		&lt;AssemblyName&gt;${Assembly}&lt;/AssemblyName&gt;
	&lt;/PropertyGroup&gt;
	&lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "&gt;
		&lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
		&lt;DebugType&gt;full&lt;/DebugType&gt;
		&lt;Optimize&gt;false&lt;/Optimize&gt;
		&lt;OutputPath&gt;bin\Debug\&lt;/OutputPath&gt;
		&lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
		&lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
		&lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
	&lt;/PropertyGroup&gt;
	&lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "&gt;
		&lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
		&lt;Optimize&gt;true&lt;/Optimize&gt;
		&lt;OutputPath&gt;bin\Release\&lt;/OutputPath&gt;
		&lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
		&lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
		&lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
	&lt;/PropertyGroup&gt;
	&lt;ItemGroup&gt;
		&lt;Reference Include="System" /&gt;
		&lt;Reference Include="System.Data" /&gt;
		&lt;Reference Include="System.Xml" /&gt;
	&lt;/ItemGroup&gt;
	&lt;ItemGroup&gt;
		${CompileString}
		&lt;Compile Include="Properties\AssemblyInfo.cs" /&gt;
	&lt;/ItemGroup&gt;
	&lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
&lt;/Project&gt;</value>
  </data>
  <data name="IBatisMapFile" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!--============================================================================
//	CAUTION: This file is generated by IBatisNetGen.BatisMap.cst at 2009-4-14 11:30:53
//				Any manual editing will be lost in re-generation.
//===========================================================================--&gt;
&lt;sqlMap namespace="${ClassName}"
	xmlns="http://ibatis.apache.org/mapping"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

  &lt;alias&gt;
    &lt;typeAlias alias="${ClassName}" type="${EntityNameSpace}.${ClassName}, ${EntityAssembly}" /&gt;
  &lt;/alias&gt;

  &lt;resultMaps&gt;
    &lt;resultMap id="FullResultMap" class="${ClassName}"&gt;
      ${reslut}
    &lt;/resultMap&gt;
  &lt;/resultMaps&gt;

  &lt;statements&gt;
    &lt;insert id="Insert" parameterClass="${ClassName}"&gt;
      ${INSERT}
      &lt;selectKey resultClass="int" type="post" property="${primaryClassID}" &gt;
        select @@IDENTITY as value
      &lt;/selectKey&gt;
    &lt;/insert&gt;
    &lt;update id="Update" parameterClass="${ClassName}"&gt;
      ${UPDATE}
    &lt;/update&gt;
    &lt;delete id="Delete" parameterClass="int"&gt;
      DELETE [dbo].[${TableName}] WHERE ${primaryKeyID} = #${primaryClassID}#
    &lt;/delete&gt;

    &lt;select id="FindById" parameterClass="int" resultMap="FullResultMap"&gt;
      SELECT * FROM [dbo].[${TableName}] WHERE ${primaryKeyID} = #${primaryClassID}#
    &lt;/select&gt;

    &lt;select id="Find" parameterClass="System.Collections.Hashtable" resultMap="FullResultMap"&gt;
      SELECT * FROM [dbo].[${TableName}] WHERE 1=1
      &lt;dynamic&gt;
        ${ParameterList}
      &lt;/dynamic&gt;
    &lt;/select&gt;

    &lt;select id="FindCount" parameterClass="System.Collections.Hashtable" resultClass="int"&gt;
      SELECT COUNT(*) FROM [dbo].[${TableName}] WHERE 1=1
      &lt;dynamic&gt;
        ${ParameterList}
      &lt;/dynamic&gt;
    &lt;/select&gt;
  &lt;/statements&gt;
&lt;/sqlMap&gt;</value>
  </data>
  <data name="ICommonLogic" xml:space="preserve">
    <value>using System;
using System.Collections;
using System.Collections.Generic;

namespace ${LogicNameSpace}.Interface
{
    public interface ICommonLogic&lt;T, IdT&gt;
    {
        /// &lt;sammury&gt;
        /// 创建对象
        /// &lt;/sammury&gt;
        /// &lt;param name="entity"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        void Create(T entity);

        /// &lt;sammury&gt;
        /// 更新对象
        /// &lt;/sammury&gt;
        /// &lt;param name="entity"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int Update(T entity);

        /// &lt;summary&gt;
        /// 删除对象
        /// &lt;/summary&gt;
        /// &lt;param name="entityId"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int Delete(IdT entityId);

        /// &lt;summary&gt;
        /// 删除所有对象
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int DeleteAll();

        /// &lt;summary&gt;
        /// 
        /// &lt;/summary&gt;
        /// &lt;param name="entityId"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        T FindById(IdT entityId);

        /// &lt;summary&gt;
        /// 检索对象数量
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int FindCount();

        /// &lt;sammury&gt;
        /// 检索对象
        /// &lt;/sammury&gt;
        IList&lt;T&gt; FindAll();

        /// &lt;summary&gt;
        /// 检索对象数量
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        int FindCount(Hashtable table);

        /// &lt;sammury&gt;
        /// 检索对象
        /// &lt;/sammury&gt;
        IList&lt;T&gt; FindAll(Hashtable table);
    }
}</value>
  </data>
  <data name="IXXLogic" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
${EntityNameSpace}

namespace ${LogicNameSpace}.Interface
{
    public interface I${ClassName}Logic : ICommonLogic&lt;${ClassName}, ${KeyType}&gt;
    {
    }
}</value>
  </data>
  <data name="LogicProject" xml:space="preserve">
    <value>&lt;Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
    &lt;Platform Condition=" '$(Platform)' == '' "&gt;AnyCPU&lt;/Platform&gt;
    &lt;ProductVersion&gt;8.0.50727&lt;/ProductVersion&gt;
    &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
    &lt;ProjectGuid&gt;{${Guid}}&lt;/ProjectGuid&gt;
    &lt;OutputType&gt;Library&lt;/OutputType&gt;
    &lt;AppDesignerFolder&gt;Properties&lt;/AppDesignerFolder&gt;
    &lt;RootNamespace&gt;${NameSpace}&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;${Assembly}&lt;/AssemblyName&gt;
    &lt;SccProjectName&gt;
    &lt;/SccProjectName&gt;
    &lt;SccLocalPath&gt;
    &lt;/SccLocalPath&gt;
    &lt;SccAuxPath&gt;
    &lt;/SccAuxPath&gt;
    &lt;SccProvider&gt;
    &lt;/SccProvider&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "&gt;
    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;false&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Debug\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;DEBUG;TRACE&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "&gt;
    &lt;DebugType&gt;pdbonly&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Release\&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;TRACE&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="Castle.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\Castle.Core.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Castle.Facilities.AutomaticTransactionManagement, Version=1.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\Castle.Facilities.AutomaticTransactionManagement.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Castle.Facilities.IBatisNetIntegration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\Castle.Facilities.IBatisNetIntegration.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Castle.Services.Transaction, Version=0.1.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\Castle.Services.Transaction.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="log4net, Version=1.2.9.0, Culture=neutral, PublicKeyToken=b32731d11ce58905"&gt;
      &lt;SpecificVersion&gt;False&lt;/SpecificVersion&gt;
      &lt;HintPath&gt;..\SharedLib\log4net.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="System" /&gt;
    &lt;Reference Include="System.Data" /&gt;
    &lt;Reference Include="System.Web" /&gt;
    &lt;Reference Include="System.Xml" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    ${Compile}
    &lt;Compile Include="Properties\AssemblyInfo.cs" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;ProjectReference Include="..\${EntityAssembly}\${EntityAssembly}.csproj"&gt;
      &lt;Project&gt;{${EntityGuid}}&lt;/Project&gt;
      &lt;Name&gt;${EntityAssembly}&lt;/Name&gt;
    &lt;/ProjectReference&gt;
  &lt;/ItemGroup&gt;
  &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
  &lt;!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  &lt;Target Name="BeforeBuild"&gt;
  &lt;/Target&gt;
  &lt;Target Name="AfterBuild"&gt;
  &lt;/Target&gt;
  --&gt;
&lt;/Project&gt;</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// 有关程序集的常规信息通过下列属性集
// 控制。更改这些属性值可修改
// 与程序集关联的信息。
[assembly: AssemblyTitle("${Assembly}")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("武汉聚网科技有限公司")]
[assembly: AssemblyProduct("${Assembly}")]
[assembly: AssemblyCopyright("版权所有 武汉聚网科技有限公司 (C) 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// 将 ComVisible 设置为 false 使此程序集中的类型
// 对 COM 组件不可见。如果需要从 COM 访问此程序集中的类型，
// 则将该类型上的 ComVisible 属性设置为 true。
[assembly: ComVisible(false)]

// 如果此项目向 COM 公开，则下列 Guid 用于类型库的 ID
[assembly: Guid("${Guid}")]

// 程序集的版本信息由下面四个值组成:
//
//      主版本
//      次版本 
//      内部版本号
//      修订号
//
// 可以指定所有这些值，也可以使用“修订号”和“内部版本号”的默认值，
// 方法是按如下所示使用“*”:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="SharedLib" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\SharedLib.zip;System.Byte[], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="SqlMapConfig" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;sqlMapConfig
  xmlns="http://ibatis.apache.org/dataMapper"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;


  &lt;settings&gt;
    &lt;setting useStatementNamespaces="true"/&gt;
  &lt;/settings&gt;

  &lt;providers resource="Config/providers.config"/&gt;

  &lt;!-- Database connection information --&gt;
  &lt;database&gt;
    &lt;provider name="sqlServer1.1"/&gt;
    &lt;dataSource name="GWEE" connectionString="${ConnectionString}" /&gt;
  &lt;/database&gt;
  &lt;sqlMaps&gt;
    ${SqlMap}
  &lt;/sqlMaps&gt;

&lt;/sqlMapConfig&gt;</value>
  </data>
  <data name="Web" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Web.zip;System.Byte[], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="XXLogic" xml:space="preserve">
    <value>using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;


${EntityNameSpace}
using ${LogicNameSpace}.Interface;

namespace ${LogicNameSpace}.Implement
{
    public class ${ClassName}Logic : CommonLogic&lt;${ClassName}, ${KeyType}&gt;,I${ClassName}Logic
    {

        /// &lt;sammury&gt;
        /// 创建对象
        /// &lt;/sammury&gt;
        /// &lt;param name="entity"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int Create(${ClassName} entity)
        {
            return CreateObject(entity);
        }

        /// &lt;sammury&gt;
        /// 更新对象
        /// &lt;/sammury&gt;
        /// &lt;param name="entity"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int Update(${ClassName} entity)
        {
            return UpdateObject(entity);
        }

        /// &lt;summary&gt;
        /// 删除对象
        /// &lt;/summary&gt;
        /// &lt;param name="entityId"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int Delete(int entityId)
        {
            return DeleteObject(entityId);
        }
        

        /// &lt;summary&gt;
        /// 根据主键ID查询对象
        /// &lt;/summary&gt;
        /// &lt;param name="entityId"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public ${ClassName} FindByID(int entityId)
        {
            return FindObjectByID(entityId);
        }

        /// &lt;summary&gt;
        /// 检索对象数量
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int FindCount()
        {
            return FindObjectByCount();
        }

        /// &lt;sammury&gt;
        /// 检索对象
        /// &lt;/sammury&gt;
        public IList&lt;${ClassName}&gt; FindAll()
        {
            return FindAllObject();
        }

        /// &lt;summary&gt;
        /// 检索对象数量
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int FindCount(Hashtable table)
        {
            return FindObjectByCount(table);
        }

        /// &lt;sammury&gt;
        /// 检索对象
        /// &lt;/sammury&gt;
        public IList&lt;${ClassName}&gt; FindAll(Hashtable table)
        {
            return FindAllObject(table);
        }
    }
}</value>
  </data>
</root>